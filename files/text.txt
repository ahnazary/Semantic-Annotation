Received October 3, 2020, accepted October 26, 2020, date of publication October 30, 2020, date of current version November 11, 2020.
Digital Object Identifier 10.1109/ACCESS.2020.3034937
JSON-LD Based Web API Semantic Annotation
Considering Distributed Knowledge
XIANGHUI WANG 1, (Member, IEEE), QIAN SUN1, AND JINLONG LIANG2
1Department of Computer Science and Technology, Shandong Jianzhu University, Jinan 250101, China
2Information Center, Shandong Provincial Qianfoshan Hospital, First Afliated Hospital of Shandong First Medical University, Jinan 250100, China
Corresponding author: Xianghui Wang (wxh_225@163.com)
This work was supported in part by the National Natural Science Foundation of China under Grant 61902221, in part by the Project of
Shandong qProvince Higher Educational Science and Technology Program under Grant J18KA364, in part by the Doctoral Fund of
Shandong Jianzhu University under Grant X19045Z, and in part by the Shandong Provincial Natural Science Foundation under Grant
ZR2018MF012.
ABSTRACT Based on semantically annotated Web APIs, automatic Web API composition can be implemented
easily. The operation can greatly improve efciency of building a software system. However, in real
world, semantic annotation for Web APIs will encounter various difculties, because of their distribution
and function diversity, such as disunited API description formats, response result with complex structure,
shortage of business domain ontologies, semantic conicts among distributed knowledge, and so on. To solve
these difculties, we propose a JSON-LD basedWeb API semantic annotation approach (JWASA). JWASA
can assist professional developers to semi-automatically complete semantic annotation ofWeb APIs. A common
Web API description ontology is rstly dened, including necessary vocabularies about invocation
information, functional semantics, and non-functional features. Then, JWASA automatically converts aWeb
API description into a document in an united JSON format, and assist developers to semi-automatically
embed semantic information of crucial elements of the API by means of a lightweight Linked Data format
JSON-LD. Meanwhile, a semantic annotation specication is proposed to deal with various complex
situations inWeb API description, e.g: too many response parameters, no request parameters, etc. In addition,
to improve efciency of annotation, JWASA provides some extra operations, including automatic new
ontology or vocabulary creation, automatic functional semantics extraction etc. Also, JWASA provides semiautomatically
bridge rule generation algorithm, which can infer implied relationships among vocabularies
(e.g: sub-class, super-class, equality). JWASA focuses on the semantic annotation of functionality of Web
APIs, and can create effective semantic Web APIs for future API automatic composition. We implement a
prototype system and carry out a series of experiments to evaluate JWASA on real Web APIs crawled from
Internet. Experiments show that our approach is effective and efcient.
INDEX TERMS Web API, semantic annotation, JSON-LD, ontology creation, distributed knowledge.
I. INTRODUCTION
Under micro service architecture [1], a software system can
be quickly constructed by integrating various existing Web
APIs from different providers. Some of them are from open
Web API platforms on Internet, such as programmableweb,1
juhe,2 jisuapi.3 Others are developed by internal developers.
Providers generally give descriptions about how to invoke
The associate editor coordinating the review of this manuscript and
approving it for publication was Francesco Tedesco .
1https://www.programmableweb.com 2020-08-27
2https://www.juhe.cn/ 2020-08-27
3https://www.jisuapi.com/ 2020-08-27
Web APIs according to their own custom formats, because
there is no widely accepted description language for Web
APIs. With the increase of Web APIs, it is tedious and timeconsuming
for software system developers to manually nd
and integrate suitable APIs.
To lighten burden of developers, researchers provided
some semantic annotation approaches for Web APIs [2], [3].
Based on semantically annotated Web APIs, developers
can rapidly nd suitable APIs and automatically integrate
them with the help of service composition technologies [4].
In some approaches, specic semantic annotation languages
are utilized to annotate semantics of crucial elements in
HTML-based Web API description documents, such as
VOLUME 8, 2020 This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/ 197203
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
SA-REST, Microdata, RDFa [5][7]. In other approaches,
Web APIs are described by existing API specications with a
concise format, e.g: JSON, and custom semantic annotation
formats are proposed to embed semantic information in original
description documents [8][10]. However, in practice,
existing approaches would encounter ve realistic problems.
Firstly, multiple types of request parameters make it dif-
cult to decide which parameters need to be annotated. From
the perspective of necessity, the parameters may be required,
optional, or having default value. Specially, some APIs have
no request parameters, and they only provide all information
about specic data. Semantically, some are business parameters,
for instance, City and Date in Query History Weather
API; others are result format parameters, e.g: Page No., Total
pages, etc. Secondly, response parameter descriptions from
providers are incomplete, and some details still need to be
parsed out of response result example in a text-based description
document. Generally, the response results are in JSON
format, and data types of parsed parameters are multiple,
such as array, value, object, etc. Also, a response parameter
may be parsed out of a leaf node in a deep level of the
response results. All these factors determine that the parsing
operation is complex. Thirdly, a common Web API semantic
ontology, that mainly describes its invocation, function,
QoS, faults etc., is required to implement automatic invocation,
discovery and composition. Although, existing semantic
annotation approaches provide some ontologies for Web
APIs, they usually aren't incomplete. Some of them mainly
describe request/response parameters [5], [6], and are short of
description about other details, such as precondition, effects
etc. Others are used to annotate traditional WSDL-based web
services and aren't forWeb APIs [11]. Fourthly, there are few
available ontologies for specic domains. Lastly, semantic
conicts among distributed knowledge from multiple used
ontologies can decrease recall ratio of discovery [12], such
as different name synonymous.
To solve the problems above, we propose a JSON-LD [13]
based Web API semantic annotation approach (JWASA).
It converts a Web API description document in informal
natural language into a document in an united JSON format,
and can assist developers in semantically annotating
elements in the JSON document according to JSON-LD format.
JSON-LD is a lightweight Linked Data format, and is
widely accepted by developers for semantically annotating
JSON data. Semantic information for JSON data can be
easily embedded in corresponding JSON document, and can
be parsed out of the document by means of ready-made
JSON-LD APIs. Therefore, JSON-LD is very suitable as a
semantic annotation format of Web API documents in JSON
format.
Furthermore, JWASA proposes a semantic annotation
specication to deal with various real complex situations
for Web API descriptions. During annotation, JWASA can
automatically extract functional semantic information from
semantically annotated JSON-LD documents, and automatically
generate or modify relevant ontologies according to
new vocabularies used by developers. Also, JWASA provides
semi-automatic bridge rule generation algorithm to ef-
ciently solve semantic conicts among distributed knowledge
from different ontologies.
The main contributions of this article are in the following
folds:
1) A common Web API description ontology is created
to provide various semantic vocabularies about Web
APIs, and a novel lightweight JSON-based Web API
description format is designed.
2) A semi-automatic JSON-LD based Web API semantic
annotation approach is proposed, where a semantic
annotation specication is designed and some ef-
cient assist operations are provided including automatic
ontology generation, bridge rule generation and functional
semantics extraction.
3) A prototype system is implemented, and, on real Web
APIs from Internet, a series of experiments are carried
out to evaluate effectiveness and efciency of our
approach.
The remainder of this article is organized as follows.
Section II introduces related works. Section III describes an
overview of our semantic annotation approach. Section IV
presents formal denitions of Web API and Common Web
API Ontology. Section V presents implementation details
of the approach. Section VI reports the empirical results.
Section VII concludes the paper.
II. RELATED WORKS
In recent years, researchers proposed some semantic annotation
approaches for Web APIs (or Web services). According
to difference of Web API description formats, these
approaches mainly are divided into three categories: WSDLbased,
HTML-based, and API specication based.
A. WSDL-BASED APPROACH
Currently, available Web APIs most are restful style which
is resource-oriented [14]. Traditional web service description
language (WSDL) provides support for restful APIs
in its version 2.0 [15]. Specic semantic annotation languages
were used to annotate WSDL-based Web APIs, e.g,
SA-WSDL [16], OWL-S [11], etc.
SA-WSDL implemented semantic annotation through
adding extra XML attributes to current WSDL document
and associated XML schema document. Literature [17]
designed a semantic annotation tool for Web services based
on WSDL2.0 and SA-WSDL. The tool could assist users to
search semantic vocabularies and embed semantic information
in current documents.
Different from SA-WSDL, OWL-S described semantics of
everyWeb service through an independent XML document in
OWL-S format. The document not only described functional
semantics of a web service from four aspects: input, output,
precondition, and effect (called IOPE), but also described
other feathers, for instance, QoS (reliable, response time etc.)
197204 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
and the category of a given service. These information were
enough for automatic service composition.
In these WSDL-based approaches, Web API description
documents and semantically annotated documents all are in
XML format, and their syntax is more complex for providers
and annotators than other popular formats, e.g: HTML and
JSON. Therefore, in practice, WSDL format rarely is used to
describe Web API by providers.
B. HTML-BASED APPROACH
Generally, providers offer human-readableWeb API descriptions
according to custom formats on their ofcial websites.
Therefore, descriptions for Web APIs are embedded in
HTML documents.
Based on HTML documents, some lightweight semantic
annotation languages were adopted to directly annotate
crucial elements of Web APIs in these documents
(e.g: access url, request method, request/response parameter
etc.), such as Microdata, hREST, SA-REST, MicroWSMO
and so on [6], [18], [19].
Literature [20] provided a meta model of restful API
description, and implemented semantic annotation by means
of Microdata. The model dened some vocabularies describing
web services, includingWebService, WSResource, WSAc-
tion, WSParam etc. Microdata is used to add additional
semantics of existing data in a HTML document on the
basis of the model. Literature [2] proposed a semantic
annotation tool SWEET, which used MicroWSMO and
hRESTs to implement annotation ofWeb APIs. The hRESTs
was adopted to identifying service properties (e.g, service,
method, input, output) by insert hREST tags in given
HTML document; the MicroWSMO was used to annotate
service properties with semantic information by means of
existing domain ontologies. Identifying service properties
from a HTML document is tedious, because they are put
together with other irrelevant HTML elements. Hence, literature
[3] gave an automated semantic annotation approach,
which could automatically identify service properties in a
HTML document, and then annotate them with hRESTs or
SA-REST.
However, these approaches are limited when HTML documents
for describing Web APIs are complex. For example,
multiple Web APIs are described in a HTML page; Web API
description contents aren't embedded directly into a HTML
page, while they are obtained by asynchronous requests.
In these situations, extra operation is expected to extract a
valid HTML document for every Web API. Furthermore,
most of them focused on annotation for request/response
parameters, and ignored other functional semantics, especially
precondition, effect and fault semantics of Web APIs.
C. API SPECIFICATION BASED APPROACH
In practice, various custom Web API description formats
from different providers make it difcult for API automatic
invocation and semantic annotation. Therefore, some concise
and easy-to-use metadata formats to describe Web API are
proposed, such as OpenAPI Specication (OAS),4 RESTful
API Modeling Language (RAML),5 API Blueprint,6
and so on.
In recent years, on description documents of Web APIs
conforming to OAS, some semantic annotation approaches
have been proposed. OAS denes a standard, programming
language-agnostic interface description for REST APIs.
An OAS description is a YAML or JSON document that
consists in various elements for describing Web APIs and a
list of tags used by the specication with additional metadata.
Literature [10] extended OAS description to add semantic
annotation. New elements (classAnnotation and prop-
ertyAnnotation) were added in the description documents of
Web APIs, and a specic process was designed to identify
these annotation elements. Literature [8] and [9] utilized tag
elements in OAS to add custom semantic information, and
annotated description documents still conformed to OAS.
These approaches semantically annotated Web APIs in custom
formats, thus, extra parsing processes are necessary to
turn semantic API description to semantic resource graph in
RDF.
Considering that an OAS description document can be represented
in JSON format, Literature [21] embedded semantic
information in OAS description documents for Web APIs by
mean of JSON-LD format [13]. JSON-LD is a lightweight
Linked data format, and provides a series of special elements
to semantically annotate a JSON document. Compared with
previous custom semantic annotation formats, JSON-LD format
is more mature because ready-made APIs can be used to
parse semantics out of JSON documents.
These approaches only presented semantic annotation formats,
but didn't illustrate concrete annotation specication.
For instance, which parameters can be annotated when a lot
of parameters are answered; how to annotate when aWeb API
can have multiple request alternatives.
D. OUR APPROACH
All the previous approaches default that the used domain
ontologies always are available. However, in practice, two
main problems may occur for domain ontologies. The rst
is that no suitable domain ontologies are available for some
Web APIs, and the second is that some semantic conicts
among distributed knowledge in domain ontologies may
occur. No solution about the two problems is mentioned in
these approaches.
Our approach proposes a whole solution for Web API
semantic annotation. It learns from the advantages and overcomes
the shortcomings of the previous approaches. The
approach newly describes a Web API with a custom united
JSON format according to its original description document,
and uses JSON-LD to embed semantic information in the
JSON document of the Web API. The semantic information
4http://spec.openapis.org/oas/v3.0.3 2020-10-02
5https://raml.org/ 2020-10-02
6https://apiblueprint.org/ 2020-10-02
VOLUME 8, 2020 197205
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
TABLE 1. Comparison among existing approaches and our approach.
includes IOPE (just like in OWL-S), and other feathers
(e.g: QoS and faults). Also, a semantic annotation speci-
cation is designed to effectively handle various complex
annotation situations.
To solve shortage of domain ontologies and efciently
eliminate semantic conicts, our approach supports the automatic
creation of new ontologies and vocabularies during
semantic annotation, and semi-automatic bridge rule inference
among multiple domain ontologies. It uses six types of
bridge rules dened in our previous work [22] to assist inference
among domain ontologies. These types of bridge rules
respectively are intoc, ontoc, equalc, intor, ontor, equalr.
The rst three types are used to dene sub-class, superclass,
or equality relationship among two concepts from
different ontologies. And the last three types are for subproperty,
super-property, or equality relationship among two
properties (or predicates) from different ontologies. Generated
ontologies and bridge rules are crucial elements for
future composition of Web APIs. Table 1 compares existing
main approaches and our approach from various perspectives.
Furthermore, our approach can semantically annotate various
faults inWeb API descriptions by means of three dened
exceptions in our previous work [23]: UnPre (precondition
unsatised), UnExe (execution failure), and UnEff (unexpected
execution effects). For example, no weather is return
is a fault description for Web API Weather Query, and then
the fault can be annotated as UnEff.
III. OVERVIEW OF JWASA
In this section, an illustrative example is described to show
semantic annotation process in JWASA, and then an architecture
to implement JWASA is presented.
A. AN ILLUSTRATIVE EXAMPLE
In JWASA, the semantic annotation for a Web API follows
ve steps: collect description information of the API,
newly describe the API in an united format, annotate semantics,
update ontology, and generate bridge rules. The detail
description in each step is shown in the following.
1) COLLECT DESCRIPTION INFORMATION OF THE API
On an API open platform (https://www.jisuapi.com/), there
are about 130 types of APIs, and the number of APIs is
TABLE 2. Description information of Weather Query API.
about 300. All APIs have their own description documents.
The description information of Weather Query API on the
platform is shown in Table 2.
Specially, there are two types of request/response parameters
in the API: format parameter and business parameter. Format
parameters are used to specify invocation authorization
and returned result format. For example, parameter appkey
in the request example is a format parameter, and its value
can be applied by users. The parameter is required for every
invocation of the API. Furthermore, status, msg, result also
are format parameters, and respectively represent execution
status code, status text description, and response business
data. The three parameters are all returned after every invocation
of the API. Business parameters can really reect
business function of the API, for instance, city, cityid in
request, weather, winddirect, aqi in response. The meaning of
every business parameter can be found from request/response
parameter list in the description document. However, the relationships
among parameters at structure level only are shown
in the response example (Fig. 1). For example, pm2_5 is a
property of aqi.
197206 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
FIGURE 1. A response example of Weather Query API.
2) NEWLY DESCRIBE THE API IN AN UNITED FORMAT
In JWASA, through parsing the JSON data in response example,
the names of all parameters are described newly. New
names can reect structure information of relevant parameters,
such as result-weather, result-winddirect, result-aqi,
result-aqi-pm2_5, etc. In addition, complex data types are
introduced to further illustrate the structure of relevant parameter,
including Object, Array of value, and Array of object.
For example, in Fig. 1, the data types of result-aqi and result-
daily respectively are Object and Array of object.
It is noticed that description contents of Web APIs on
other platforms are similar to that information in Table 2,
except some individual details. For example, on Juhe platform,
parameter appkey is named key, and parameter status,
msg are respectively named error_code, and reason. Also,
description details of request and response parameter lists are
a little different.
To automatically invoke a Web API, it is necessary to
provide an united description document format. In JWASA,
a Web API is described in an united JSON format, where
various well-dened common attributes are set. Fig. 2 shows
the description document with the JSON format of Weather
Query API. Here, apiID represents the unique identity given
by current user; reqexam, respexam, qoS respectively represent
request example list, response example list, and other
features in Table 2. Meanings of other attributes are as
their names suggest. Every parameter is expressed a JSON
object mainly including three aspects: name (paramname),
data type (datatype), and meaning (pararemark). In addition,
every response parameter has a value example attribute
(valexmp), which value is obtained from response example.
The attribute can assist annotators to comprehend semantics
of current parameter. Meanwhile, every invocation exception
also is expressed a JSON object, and is described from three
aspects: errortype, errorcode, and errorcontent. Specially,
given description information in Table 2, the JSON document
can be automatically generated by JWASA.
3) ANNOTATE SEMANTICS
The semantics of Weather Query API are directly annotated
in its extended JSON document, shown in Fig. 3.
Some JSON-LD attributes (@context,@id,@type) and other
attributes related to semantics (e.g: inputs, outputs, effects,
preconditions) are added in the document.
Here, The @context is used to introduce well-dened
semantics mapping les (jsonld as sufx) and declare various
name space prexes. The @id is used to specify the URI
of current API or request/response parameter. The @type
is used to annotate semantics of current API or parameter.
Specially, in JWASA,@type of all format parameters need to
be specied, because the information is key for automatically
invoking the API and parsing its response result. Only @id
and@type of those crucial parameters, that may interact with
other APIs, are specied.
Attribute domains and function respectively species the
business domains and function description details of current
API, and they can facilitate API classication. Attribute
inputs, outputs, preconditions and effects provide IOPE features
in functional semantics of current API. Based on these
information, automatic composition of Web APIs can be
implemented easily.
Furthermore, the exception with api type means the fault
at business level, and it is necessary for automatic fault
recognition to distinguish different exceptions by annotation.
In JWASA, every exception with api type has attribute@type,
and the value may be UnPre, UnEff, or UnExe [23] according
to its errorcontent value.
In this step, an annotator needs to manually specify semantics
about crucial request/response parameters, every business
fault in exceptions, and to set preconditions and effects. The
inputs and outputs will be automatically extracted by JWASA
according to annotated information.
All in all, JWASA proposes a series of annotation speci-
cations forWeb APIs to make their semantics more complete
and effective.
4) UPDATE ONTOLOGY
JWASA not only supports sharing concepts in existing
ontologies, but also can dynamically create new ontologies
and vocabularies during annotation. For example, the ontology
for weather doesn't exist when an annotator annotates
Weather Query API. He can declare a prex ns for
a new name space (http://sdjzu.edu.cn/cs/onto/weather), and
then use a series of new vocabularies to annotate the API.
VOLUME 8, 2020 197207
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
FIGURE 2. Description document of Weather Query API in JSON format.
FIGURE 3. Well annotated Weather Query API in JSON-LD format.
When the well-annotated JSON-LD le is saved, an new
ontology for weather will automatically be generated and its
name space is http://sdjzu.edu.cn/cs/onto/weather. OtherWeb
APIs related to weather can use the ontology or add new
vocabularies into this ontology during annotation.
5) GENERATE BRIDGE RULES
Due to diversity of business domains, multiple domain
ontologies may be used in well-annotatedWeb APIs, such as
weather ontology, vehicle ontology, book ontology, etc. Some
semantic conicts may occur for these ontologies. For example,
City, CityName in ontology o1 respectively represent a
city object, and a city's name; City in ontology o2 represents
a city's name. Here, City in o1 and City in o2 use the same
vocabulary, but they have different meaning; CityName in o1
and City in o2 are different vocabularies, but they have the
same meaning. In JWASA, we employ bridge rules to solve
these semantic conicts. These rules specify parent-child
197208 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
and equality relationships among different vocabularies.
For instance, rule ho1; CityName; equalc; o2; Cityi represents
CityName in o1 and City in o2 are the equivalent
classes. It is a tedious work for developers to manually create
all bridge rules. To lighten their workload, our approach
can semi-automatically generate all bridge rules among all
ontologies.
After annotation, three types of semantic annotation results
are generated: well-annotated JSON-LD les for Web APIs,
all ontology les used during annotation, and all bridge rules.
They are the crucial information for subsequent automatic
service composition operations.
B. ARCHITECTURE OF JWASA
To efciently complete various semantic annotation tasks
above, a semantic annotation tool supporting JWASA is
designed, and its architecture is shown in Fig. 4. The tool
includes four main function modules: Original Information
Collection, United Format Conversion, Semantic Annotation
Core, and Ontology Management.
FIGURE 4. Architecture of a semantic annotation tool for JWASA.
1) ORIGINAL INFORMATION COLLECTION MODULE
This is used to collect available Web APIs from various API
open platforms on Internet or self-developed Web APIs. For
different API sources, the module provides different crawler
agents. Also, developers can develop own crawler agents for
special API sources. The caught originalWeb API description
information will be stored in Original API DB.
2) UNITED FORMAT CONVERSION MODULE
This can read original information of APIs from Origi-
nal API DB, and parse that information, especially parse
response parameters out of corresponding response result
data. Then, for every Web API, it assembles parsed information
into an united JSON format, and stores that information
in a JSON le. The le is called API-JSON le in the
following.
3) SEMANTIC ANNOTATION CORE MODULE
This rstly uses Prepare JSON-LD template function to
automatically insert JSON-LD elements and extra attributes
about functional semantics into all API-JSON les, and
then adopts JSON-LD annotation management function to
assist developers specify semantics for crucial elements and
to store annotation results in API-JSON les. In the following,
a well-annotated API-JSON le is called API-JSONLD
le. Meanwhile, JSON-LD annotation management also
provides ontology search operations to help developers
rapidly nd suitable vocabularies from available ontology
les. In addition, when new name spaces or new vocabularies
are introduced during annotation, the function would invoke
Automatic ontology update function in Ontology Manage-
ment module to add or update ontology les.
4) ONTOLOGY MANAGEMENT MODULE
This includes two main functions based on Jena ontology tool
kit.7 Jena can support ontology CRUD and reasoning operations.
Automatic ontology update function can automatically
extract all semantic information from API-JSONLD
les and add/update relevant ontology les. Bridge rule
generation function can semi-automatically generate bridge
rules among vocabularies from multiple ontology les, and
store all bridge rules in Bridge rule DB.
Implementation details of main functions in JWASA will
be shown in section IV and section V.
IV. WEB API AND COMMON WEB API ONTOLOGY
In this section, we will present formal denitions ofWeb API,
semanticWeb API and commonWeb API ontology. They are
the basis of implementing JWASA.
A. WEB API AND SEMANTIC WEB API
In this article, a Web API means a web service that can
receive HTTP protocol based requests and respond by HTTP
protocol based answers. Its provider can provide complete
description information about features of the API, including
general features (e.g: provider, business category, quality of
service), invocation crucial features, and invocation illustration
features. Although Web APIs from different providers
may have description documents with different formats, common
features of Web APIs can be abstracted from their
description documents. Here, based on abstracted common
features, a Web API is formally dened.
Denition 1: Web API: A Web API is a tuple hapiname;
Genf ; InvCru; InvIlli, where,
 apiname is the unique identier of a Web API, and can
be used to differentiate from other Web APIs from the
same provider;
7https://jena.apache.org/ 2020-10-02
VOLUME 8, 2020 197209
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
 Genf is a set of elements describing general features of
the API, including provider, apitype (business category),
remark (functional description text), and QoS (quality of
service).
 InvCru is a set of elements describing crucial features
about invocation details, including url (access URL),
returnformat (return format), requestmethod (request
method), requestparas (request parameters), responsep-
aras (response parameters), and exceptions;
 InvIll is a set of elements illustrating how to invoke the
API, including reqexam (request example) and respexam
(response example).
In this denition, provider in Genf is a triple hpname; purl;
premarki, where components respectively represent
provider's unique name, URL, and description text; apitype in
Genf is also a triple htypename; aturl; atremarki, where components
respectively represent name, URL, and description
text of API business category; QoS in Genf is a mutable tuple
hq1; q2; : : : ; qni, where qi(1 6 i 6 n) is an QoS index, e.g:
price, use number, etc. These indexes are provided by current
Web API's provider, and different providers may provide
different indexes.
Furthermore, requestparas and responseparas in InvCru
both are sets including multiple parameters, and each parameter
is modelled as a tuple hparamname; datatype; isrequired;
pararemarki, where components respectively represent
parameter's unique identier in current API, data type
(e.g: string, integer, etc.), required or not, and meaning;
exceptions in InvCru represents a set including various exceptions
that may occur during invocation, and each exception
is modelled as a triple herrortype; errorcode; errorcontenti,
where components respectively represent error type, error
code returned, error message returned. Here, the value of
error type has two kinds: api (application) and sys (system).
The api means exceptions about business, e.g: some request
parameter is invalid or no result is returned; the sys means
exceptions about invocation permission of the API, e.g: application
key is overdue or invalid.
In the following, given a Web API wa, we use wa.XXX to
represent the value of its feature element XXX. For instance,
wa.requestparas responses request parameter set of wa.
A semanticWeb API is an extension of correspondingWeb
API through adding extra semantic features. These semantics
features make the API easily be discovered, interactive and
automatically invoked.
Denition 2 Semantic Web API: A semantic Web API is
a semantically well-annotated Web API, and is expressed
as a tuple hwebapi, semVs; funcSem, exSemV , exSemi,
where,
 webapi is a Web API conforming to Denition 1, and
provides original information from its provider;
 semVs is a set of vocabularies from business domains
related to the API;
 funcSem describes functional semantics, and is
expresses as a tuple hinputs; outputs; preconditions;
effectsi. Here, assume that inparams and outparams
respectively are sets of crucial parameters in webapi.
requestparas and webapi.responseparas, then,
 inputs represents input parameters with semantics,
and is a mapping: inparams ! semVs;
 outputs represents output parameters with semantics,
and is a mapping: outparams ! semVs;
 preconditions represents preconditions before
invoking the API, and is a set of literals that describe
relationships among parameters in inparams by
means of vocabularies in semVs;
 effects represents execution effects after invoking
the API, and is a set of literals that describe relationships
among parameters in inparams and out-
params by means of vocabularies in semVs.
 exSemVs is a set of vocabularies related to exception
semantics;
 exSem represent exceptions semantics, and is a mapping:
webapi:exceptions ! exSemV .
Specially, given a semantic Web API, its component
funcSem describes IOPEs features just like in OWL-S.
Meanwhile, extra exception semantics are introduced to facilitate
self-adaptation running of the API.
B. COMMON WEB API ONTOLOGY
Common features of Web APIs from different providers are
dened in Denition 1. However, in practice, these features
may have different names and presentation formats because
of different providers. This hampers automatic discovery and
interoperability among different Web APIs. To solve this
problem, we design a common Web API ontology: WebAPI-
Onto. It not only provides requisite vocabularies to describe
common features of Web APIs in Denition 1, but also
provides extra semantic vocabularies to describe function and
exception semantics in Denition 2. The formal denition of
WebAPIOnto is shown in Denition 2.
Denition 3 WebAPIOnto: WebAPIOnto is an owl ontology
specially forWeb API domain, and is expressed as a tuple
hWebAPI; Genc; Grdc; FuncSem; Ri, where,
 WebAPI is an owl class that represents a Web API
description document;
 Genc is a set of owl classes that represent concepts
related to general information of a Web API, and
describes what the API is;
 Grdc is a set of owl classes that represent concepts
related to invocation detail of a Web API, and describes
how to invoke the API;
 FuncSem is a set of owl classes that represent concepts
related to functional semantics of a Web API, and
describes what the API does;
 R is a set of owl object properties with one domain and
one range, where every domain or range is an owl class
in set fWebAPIg [ Genc [ Grdc [ FuncSem, and each
object property describes a relationship between concept
for its domain and concept for its range.
In this ontology, the most core concept is WebAPI, and
other concepts are used to illustrate various properties
197210 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
FIGURE 5. Concepts in component Genc of WebAPIOnto.
FIGURE 6. Concepts in component Grdc of WebAPIOnto.
FIGURE 7. Concepts in component FuncSem of WebAPIOnto.
of WebAPI. Component Genc, Grdc, and FuncSem respectively
provide concepts related to three types of features of a
Web API. These concepts are respectively shown in Fig. 5,
Fig. 6, and Fig. 7. Here, an arrow in these gures represents
the concept at its tail is super-class of other concept at its head.
Concepts in Genc mainly describe a Web API's features
in component Genf. Specially, common QoS indexes also
are included in Genc, such as CollectNum (the number of
collected by users),ClickNum (the number of clicked) and so
on. Concepts in Grdc describe a Web API's features in component
InvCru and InvIll. Concepts in FuncSem are mainly
describe necessary IOPE components, business domain, and
function category, and they are extra functional semantic
vocabularies.
Meanwhile, all object properties in component R have
unique names, which can directly illustrate relationship
meanings. Object properties in WebAPIOnto are shown
in Table 3, Table 4, and Table 5. Specially, meanings of
concepts and properties are suggested by their names.
WebAPIOnto is a common Web API ontology, and can
be used by any Web API provider to annotate their own
TABLE 3. Object properties about concepts in component Genc.
TABLE 4. Object properties about concepts in component Grdc.
TABLE 5. Object properties about concepts in component FuncSem.
description documents. In JWASA, it is used to semantically
annotate various Web APIs crawled from Internet.
Specially, ontology WebAPIOnto provides vocabularies
related to currently popular Web APIs as complete as possible.
From the RESTful view, maturity of these Web APIs
generally is at a lower maturity level [24]. Therefore, developers
can extended this ontology as the maturity ofWeb APIs
is raised in future.
V. IMPLEMENTATION OF JWASA
Given original information of Web APIs crawled from Internet,
JWASA can generate corresponding semanticWeb APIs.
During generation, a series of manual and automatic operations
need to be completed according to the architecture of
JWASA (Fig. 4). To ensure the accuracy of semantics, developers
need to manually identify functional semantics and
VOLUME 8, 2020 197211
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
exception semantics of these APIs. Except this, other operations
can be completed automatically by means of designed
algorithms. Therefore, JWASA is a semi-automatic semantic
annotation approach. In this section, implementation details
of JWASA will be presented.
A. AN UNITED JSON FORMAT FOR WEB API
In JWASA, Web APIs crawled from Internet are reorganized
into documents in an united JSON format. The format is
called API-JSON, and document in API-JSON format is
described in Denition 3.
Denition 4 API-JSON Document: Given a Web API, its
API-JSON document is in JSON format, where all features
of the API are modelled as attributes, and each attribute is
expressed a key-value pair. Here, except for features in all
components of the API, it adds an extra attribute apiID as the
unique identier of current API.
Specially, in an API-JSON document, those features modelled
as tuples are converted into attributes with JSON object
values, and each component in a tuple is converted into one
attribute of corresponding JSON object.
In practice, for a Web API, except apiID and responsepa-
ras, other features can be crawled from its ofcial description
document. An concrete example for an complete API-JSON
document is shown in Fig. 2 (section III).
B. PARSE RESPONSE PARAMETER
A provider generally provides two parameter description
lists: request parameter list and response parameter list. And
parameters in the lists are described from four aspects: parameter
name, data type, meaning, required. A real example for
those parameter descriptions is shown in Table 6.
TABLE 6. An example for real parameter descriptions fragment.
Generally, parameters in the two lists are described in a
atted format, that is, no structural relationships (e.g: objectproperty)
among different two parameters are presented.
In practice, request parameters of aWeb API usually are atted.
Thus, users can directly specify value for every parameters
in the request list to invoke a Web API. In API-JSON
document, the request list is assigned to attribute request-
paras. However, in most cases, there are some structural
relationships between two parameters in the response list.
For example, aqi is an object where multiple properties are
included, here, pm2_5 is one property of aqi. This kind of
information is important for automatic interaction among
multiple Web APIs.
FIGURE 8. Algorithm for parsing response parameter.
It is noticed that this information isn't shown in the
response list. Therefore, extra operation is needed to obtain
response parameters with structural relationship. Fortunately,
attribute respexam records a response result in JSON object
format, through analysing internal structure of the result,
response parameters with structural relationship can be
obtained. Specially, attribute responseparas in an API-JSON
document will record all response parameters with structural
relationships.
Here, we design an algorithm to automatic parse all
response parameters out of attribute respexam, and its procedure
is shown in Fig. 8. It deeply traverses an given
JSON object by means of a recursive call. Except for the
JSON object to be parsed( examobj), it also receives two
input parameters: current parsed parameters ( resparas), and
attribute name with value examobj (parentname). Finally,
it will return updated resparas with all parsed parameters out
of examobj.
197212 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
On the rst invocation of ParseRespara, examobj is the
value of attribute respexam in currentWeb API, resparas has
no element, and parentname is null. The algorithm rstly
judges value type of examobj, and gives different parsing
strategies for different types. When examobj is a value node
(e.g: string or integer value), data type and value example
attributes of the parameter called parentname will be
assigned (lines 03-09). When examobj is an object, data
type of the parameter called parentname rstly is assigned
object, then, for each attribute in this object, ParseRespara
is called again to continue to parse value of the attribute
(lines 10-21). Specially, during each loop, a new parameter
with structure relationship is created (lines 15-18). When
examobj is an array, its rst element is parsed, and data type
of the parameter called parentname is respectively assigned
array.value, array.object or array.array according value type
of this element (lines 22-39). When the value type is an
object, ParseRespara is called again to further parse the
element (line 32).
FIGURE 9. Some parsed response parameters for Weather Query API.
According to this algorithm, some parsed parameters for
the response example in Fig. 1 are shown in Fig. 9. Here,
paramname and datatype can reect current parameter's
structure in the response result. The information can help
users to directly obtain value of this parameter from corresponding
response result, and to facilitate interaction with
other Web APIs. In addition, after parsing, the attribute
pararemark of every parameter also is set according to its
meaning description in the response list. This process is easy,
and aren't shown here.
C. SEMANTIC ANNOTATION SPECIFICATION
Given an API-JSON document, JWASA can semantically
annotate the document and nally generate an extension version
of this document: API-JSONLD document. Compared
with the API-JSON document, the API-JSONLD document
adds 3 JSON-LD elements to annotate semantic information
(@context, @id, @type), and introduces 6 new attributes
related to semantic features (domains, function, inputs, out-
puts, preconditions, and effects).
Element @context is an array including some information
related to semantics, eg: dened mapping from attributes
to semantic concepts, used name spaces etc.; element @id
species the URI of current Web API or every parameter
in request/response; element @type species semantics of
current JSON document, parameters in requestparas and
responseparas, or exceptions in exceptions.
Attribute inputs, outputs, preconditions, and effects are
used to describe functional semantics of a semantic Web
API. Attribute domains and function are added to identify
concrete business category. Here, attribute domains includes
vocabularies about business domain of current API; attribute
function includes two elements: the rst species function
type of current API, and the second is a detailed text description
about function of current API. Denition 5 shows the
details about API-JSONLD document.
Denition 5 API-JSONLD Document: Given a semantic
Web API swa, WebAPIOnto, and a set of business domain
ontologies ontos, and ad is the API-JSON document of
swa.webapi. An API-JSONLD document for swa is an extension
of ad through adding other components of swa and
semantic information conforming to JSON-LD specication,
where,
 WebAPIOnto provides semantic vocabularies about
attributes related to features of swa and exception
semantic vocabularies in swa.exSemVs, and is introduced
by @context element;
 ontos provides functional semantic vocabularies in
swa.funcsemVs, and is introduced by@context element;
 Mappings in swa.funcSem and swa.exSem are specied
through introducing @type element in corresponding
parameters or exceptions.
 Each parameter in inputs and outputs of swa.funcSem is
uniquely identied through introducing @id element.
Specially, in an API-JSONLD document, both attribute
inputs and outputs are JSON objects where each attribute
represents a parameter. Each parameter is expressed as a
attribute-value pair pid:psem, where pid and psem respectively
represent parameter ID and its semantics.
During annotation, except for attribute inputs and outputs,
values of other attributes need to be manually assigned by
annotators. Values of the two attributes can be automatically
generated according to annotated request/response parameters.
An concrete example for an API-JSONLD document is
shown in Fig. 3.
In every API-JSONLD document, except for JSON-LD
elements, semantics of other attributes are declared by a
mapping from attributes to concepts in ontology WebA-
PIOnto. The mapping is saved to a JSON-LD le, and
is introduced into the document by attribute @context
(shown in Fig. 10(a)). Here, the rst element in @context
species the mapping le's location: D:/selfadapt/webapi/
jsonld/api.jsonld, and Fig. 10(b) shows a fragment in this
le. In Fig. 10(b), @vocab is used to declare default
name space of semantic vocabularies in current document,
and in the following annotation, no prexes are required
for vocabularies in the default name space. For example,
pname:ProviderName means semantics of attribute pname
VOLUME 8, 2020 197213
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
FIGURE 10. Some fragments in an API-JSONLD document.
is ProviderName from http://sdjzu.edu.cn/cs/onto/WebAPI#
(ontology WebAPIOnto).
The second element in @context is an object which
declares source paths of resources (``a:'' as default prex)
and ontologies to be used in current document. Semantic
annotators can modify these prex names and their source
paths or add new prex denitions to introduce new ontologies.
In Fig. 10(a), three source paths are declared, and
respectively specify path of resources in current document
(e.g: request/response parameters) and paths of two introduced
ontologies.
Values for attribute domain and function are easily speci
ed according to some text description from providers.
Specially, for a Web API, its function type in attribute
function may be information providing, world altering, or
dictionary service according to concrete function effect. For
example, Weather Query API is an information providing
API, because it only query some relevant data; Order Train
Ticket API is a world altering API, because the world status
will be changed after this API runs; Weather Query cities
API is a dictionary service API, because it can run without
any request parameters and return all cities related to weather
query. Based on response result of Weather Query cities API,
according to a given city name, a user can nd the city's ID,
code etc. This is just like a dictionary.
After attribute @context, domain, and function of a template
are specied, the core semantic annotation operation
can start. The core of semantic annotation is to specify semantics
of parameters in attribute requestparas and responsepa-
ras, and to declare literals in preconditions and effects. That
information can directly reect IOPE features of currentWeb
API, and is important for following automatic composition.
However, in realworld, this annotation task will encounter the
following ve main problems, because of diversity of Web
APIs.
(1) A lot of response parameters make annotation
tedious and time-consuming. For example, Weather Query
API has 3 format parameters (msg, result, status) and 71
business parameters. These 71 parameters describe weather
information of today including various air quality indexes,
hourly weather details, and daily weather details.
(2) Some Web APIs can receive different request
parameters and return similar response. For example,
Weather Query API can receive any one of city, cityid, city-
code, location, and all return the weather information.
(3) Multiple parameters describing a business object
aren't specially declared. This makes the expression of
P/E (precondition/effect) difcult. For example, a Web API
can obtain weather information according to two given GPS
coordinate parameters: lon, lat. They respectively represent
longitude and latitude of a location, but this relationship of the
two parameters isn't clearly declared in response parameters
of the API.
(4) Business parameters are crucial elements reecting
I/O features of aWeb API, but, they always are mixed with
format parameters in request and response. For instance,
return data format, request data number, application key are
format parameters in request; execution status code and execution
message both are format parameters in the response.
(5) Some Web APIs don't have request, and only have
response. For example, Cities for weather Query API can
return all cities used for weather query APIs, and users don't
need to input any request parameters.
Considering those problems above, in our semantic annotation,
we design a semantic annotation specication from
the perspective of developers, shown in the following. The
specication make IOPE and other features of a Web API
clearly and easily integrate with other Web APIs.
(1) General JSON-LD element@id and@type are used
to respectively specify unique identify and semantics of
a parameter. For format parameters (e.g. application key,
result, execution message, status code), only their @type
attributes are specied, because format parameters with the
same semantics are unique in a Web API. Some business
parameters, that may interoperate with other Web APIs, are
picked. And both @id and @type attributes are specied for
those picked parameters. An annotation fragment following
this specication is shown in Fig. 11, where parameters without
@id and @type aren't shown.
(2) For a Web API with multiple alternative request
parameters, users can create multiple API-JSONLD doc-
uments. In each document, only one alternative parameter is
picked, and other components are the same. For example, for
Weather Query API, its request parameters may be city, cityid,
citycode, or location. According to these request parameters,
a user can create four similar API-JSONLD documents for
this Web API.
197214 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
FIGURE 11. An annotation fragment for Flight Query API.
(3) To gather relevant parameters together, various vir-
tual parameters representing business objects are intro-
duced. Their data types are assigned to virtualobject. These
parameters can exist in request or response. For example,
in annotated Flight Query API (Fig 11), there are
three virtual parameters in request (requestparas): a:ight,
a:endcityobj, a:startcityobj, and two virtual parameters in
response (responseparas): a:arrivalportobj, a:departportobj.
Relationships between virtual and real parameters are presented
in preconditions or effects. Specially, each literal in
preconditions or effects is a string including three components
(split by ``-''). The middle component represents an
object property from an ontology, and the rst and last components
respectively represent domain and range values of
this property.
FIGURE 12. An annotation fragment for Flight Cities Query API.
(4) Function type of a Web API without request will
be assigned dctionary service (rst element of attribute
function). In the API, some parameters are picked as query
keys, and an example is shown in Fig. 12. Here, attribute key
of each picked parameter is assigned to 1, e.g: a:cityname
and a:cityobj. The two parameters will be considered as input
parameters of the API, and other parameters with@id will be
as output parameters. Specially, a virtual parameter a:cityobj
is introduced to gather all real parameters for city features
together.
(5) Business exceptions (value of attribute errortype is
api) in attribute exceptions also are annotated. This can
help users to automatically handle business exceptions during
invocation. An exception annotation fragment is shown
in Fig. 13. Here,@type is used to specify exception semantics
of each exception.
FIGURE 13. An exception annotation fragment of Flight Cities Query API.
D. FUNCTIONAL SEMANTICS EXTRACTION
According to previous annotation specications, except
attribute inputs and outputs, other attributes in an
API-JSONLD document can be specied by current user.
Thus, P/E components in IOPE features of a Web API can
be directly obtained from attribute preconditions and effects.
Meanwhile, I/O components can be automatically extracted
from annotated request/response parameters. The generation
process is shown in Fig. 14.
FIGURE 14. Algorithm for extracting I/O parameters.
FIGURE 15. An example for extracted input and output parameters.
Firstly, the algorithm extracts request/response parameters
from a given API-JSONLD document (line 01). Only
those parameters with attribute @id and @type are picked.
Secondly, if current API is dictionary service, and then those
response parameters with attribute key will be considered
as request parameters (lines 02-05). Thirdly, it respectively
creates input and output parameters according to extracted
request/response parameters (lines 06-15). An example for
extracted input and output parameters is shown in Fig. 15.
VOLUME 8, 2020 197215
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
It is noticed that it is easily to convert IOPE data of an annotated
API-JSONLD document into specic formats required
by existing discovery and composition tools.
E. AUTOMATIC ONTOLOGY GENERATION
In practices, Web APIs are from various business domains.
Generally, few of suitable existing ontologies can be
used to provide semantics for all Web APIs. Therefore,
when no vocabularies from existing ontologies are suitable,
new vocabularies may be used during annotating a
Web API. To raise reuse rate of ontologies, it is necessary
to generate new ontologies or modify existing ontologies.
Here, an automatic ontology generation algorithm is
designed, and is shown in Fig. 16. It will extract semantic
vocabularies from an API-JSONLD document, and then
create new ontologies or add new vocabularies into existing
ontologies.
FIGURE 16. Algorithm for automatically generating ontology during
annotation.
The algorithm rstly parses ontologies, annotated parameters
in request/response, and literals in preconditions/effects
out of an API-JSONLD document (line 01). Then, it loads
all introduced ontologies in this document (line 02). Thirdly,
it parses semantic concepts out of parameters, and creates
new ontologies or adds new classes into existing ontologies
according to whether ontologies and semantic concepts for
parameters are new or not (lines 03-15). Lastly, it parses
object properties out of literals, and carries out the similar
process with the semantic concepts (lines 16-30).
The algorithm will be invoked when an API-JSONLD
document is saved. Thus, during annotation of followingWeb
APIs, these newly generated ontologies can be reused.
F. SEMI-AUTOMATIC BRIDGE RULE GENERATION
During annotation, a user can pick vocabularies from existing
ontologies, and also can create new vocabularies. Thus,
three main semantic conicts among two vocabularies from
different ontologies may occur. The rst is that the two
vocabularies from different ontologies have the same name
and meaning. However, they can't be considered as the same
vocabulary, because their name spaces are different. The second
is that the two vocabularies have the same name, but
different meanings. This means any two vocabularies with
the same name shouldn't be directly considered as the same
meaning. The third is that the two vocabularies have different
names, but the similar meaning. Judgement of the second and
third conicts needs users' assistance, that is, users need manually
to specify which two vocabularies the conict occurs
between. Also, for the third conict, further relationship
between the two vocabularies should be specied, such as
sub-class, super-class, or equality. In the following, the three
semantic conicts respectively are called semconict1, sem-
conict2, and semconict3.
To solve the conicts above, we use bridge rule technology
in our previous work [22] to declare real relationship
between two vocabularies. A bridge rule can dene relationship
between two vocabularies, and different rule types mean
different relationship meanings. For instance, rule hns1:Train,
intoc, ns2:Vehiclei means concept Train in ontology ns1 is a
sub-class of Vehicle in ontology ns2. Other rule types have
been introduced in section 2. Here, an automatic bridge rule
generation algorithm is designed to improve efciency of
bridge rule creation, and is shown in Fig. 2. Based on given
vocabulary information with semconict2 and semconict3
(parameter vacabwith2 and manualbrs), the algorithm can
automatically infer various new bridge rules implied by given
ontologies (parameter ontos) with the help of Jena ontology
tool kit.
The algorithm rstly loads all ontologies into an ontology
model, and extracts all concepts and properties from the
model (lines 01-03). Then, it automatically generates basic
bridge rules according to relationship declarations in existing
ontologies and situation in semconict1 (lines 04-19). Lastly,
based on the basic bridge rules and manual rules given by
users, all implied rules are obtained (line 20). Specially,
in this algorithm, three new operations are invoked: isEqualc
(line 06), isEqualr (line 14), generateImpBR (line 20).
Operation isEqualc/isEqualr is used to determine whether
two concepts/properties are equal or not. In isEqualc, two
197216 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
FIGURE 17. Algorithm for generating bridge rules among multiple
ontologies.
concepts are equal when one of two conditions in the following
is satised:
 They have the same local name and data type. Here, local
name means a name without name space.
 The equivalent relationship between them is declared
explicitly in ontologies.
In isEqualr, two properties are equal when three conditions
in the following all are satised:
 They have the same local name, or the equivalent relationship
between them is declared explicitly in ontologies.
 Their domains d1, d2 make isEqualc(d1, d2) true or rule
hd1, equalc, d2i exists.
 Their ranges r1, r2 make isEqualc(r1, r2) true or rule
hr1, equalc, r2i exists.
Operation generateImpBR is used to infer implied rules
according to the previous basic bridge rules and manual
bridge rules. The following steps show its inference process:
(1) Generate new bridge rules according to symmetry.
If hc1, rt, c2i exists, then hc2, inverseop(rt), c1i is created.
Here, rt means one of six rule types (intoc, ontoc, equalc,
intor, ontor, equalr), and operation inverseop is used to convert
rt into its inverse type. Specially the inverse type of
intoc/r is ontoc/r, and the inverse type of equalc/r is itself.
(2) Generate new bridge rules according to transitivity.
If hc1, rt, c2i and hc1', rt, c1i exist, then hc1', rt, c2i and
hc2, inverseop(rt), c1'i are created. And, if hc1, rt, c2i and
hc2, rt, c2'i exist, then hc1, rt, c2'i and hc2',inverseop(rt),c1i
exist.
(3 )Infer new bridge rules among rules with different
rule types. Here, the following four inference situations are
considered, where rt only represents intoc/r or ontoc/r:
 If hc1, rt, c2i and hc2, equalc/r, c2'i exist, then hc1, rt,
c2'i and hc2', inverseop(rt), c1i are created.
 If hc1, rt, c2i and hc1,equalc/r,c1'i exist, then hc1', rt,
c2i and hc2, inverseop(rt), c1'i are created.
 If hc1, equalc/r, c2i and hc1, rt, c1'i exist, then hc2, rt,
c1'i and hc1', inverseop(rt), c2i are created.
 If hc1, equalc/r, c2i and hc2, rt, c2'i exist, then hc1, rt,
c2'i and hc2', inverseop(rt),c1i are created.
It is noticed that generated bridge rules by this algorithm
declare various relationships between different two vocabularies
in given ontologies. These rules can effectively eliminate
semantic conicts among distributed knowledge.
VI. EXPERIMENT EVALUATION
In this section, a series of experiments are designed to evaluate
effectiveness and efciency of our semantic annotation
approach.
A. TEST CASE ILLUSTRATION
We crawl 183Web API descriptions from two open API platforms
(Jisu & Juhe), and 23 business domains are involved.
Main business domains and API numbers in them is shown
in Table 7. Four function types of APIs are involved: informa-
tion providing (134 APIs), world altering (1 APIs), dictionary
service (45 APIs), and value providing (3 APIs). It can be
seen that most APIs are information providing. Furthermore,
we store all interface description information into a database
including provider name, API type, API name, access URL,
return format, request method, request example, response
example, etc. Also, we assign an unique ID to every API.
TABLE 7. Main business domain details.
B. EXPERIMENT ENVIRONMENT
Based on JWASA, a semantic annotation tool is implemented
by means of JavaEE platform, and it adopts B/S
architecture to support simultaneous annotation by multiple
developers. Application server Tomcat8.0 is used to deploy
the tool. Jena3.8 is imported to implement reasoning and
VOLUME 8, 2020 197217
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
basic management operations about ontologies. Mysql5.1 is
picked as the tool's database to store original API description
information, generated bridge rules, and other information
about annotation. And the tool is installed on ThinkPad X1
(1.80GHz,1.99GHz, 16GRAM, Win10).
Based on JWASA, we design an experiment to complete
semantic annotation of allWeb APIs in the previous test case.
It includes the following ve steps:
 Step 1: Generate an API-JSON document for everyWeb
API according to its description crawled from Internet.
 Step 2: Generate an API-JSONLD template document
for every API-JSON document.
 Step 3: Manually add semantic vocabularies in every
template document, and save semantically annotated
API-JSONLD document.
 Step 4: Correct and improve ontologies generated in
Step 3.
 Step 5: Generate bridge rules among all used business
domain ontologies in annotation.
During annotation, three types of les are generated:
API-JSON, API-JSONLD, ontology. The rst two types of
documents all are saved in JSON format in les with sufx
.json and .jsonld. And the last are saved in OWL [25] format
in les with .owl sufx.
Furthermore, in following experiments, execution time of
an algorithm is the average of execution time of 5 runs under
the same environment.
TABLE 8. Details of parsed response parameters in part of business
domains.
C. EFFECTIVENESS AND EFFICIENCY
1) PARSING RESPONSE PARAMETERS AND GENERATING
UNITED API-JSON DOCUMENT
In Step 1 of the experiment, Algorithm 1 (ParseRespara)
is invoked to parse response parameters out of relevant
response example during generating every API-JSON document.
Finally, 183 API-JSON les are created. Table 8 shows
details of parsed response parameters in part of business
domains, including business domain (Domain), API number
(APInum), minimum of parsed parameters (Minimum),
and maximum of parsed parameters (Maximum). It can be
seen that response parameters are effectively parsed out of
response example with JSON format.
In Step 1, we also evaluate execution time of generating
API-JSON documents by an extra experiment. Based
on crawled API descriptions for all Web APIs in the test
case, we automatically create 183 API-JSON les at one
time. The creation process includes reading API descriptions
from Database, parsing response parameters from response
example, and saving to API-JSON les. The result shows
that it spent 5350 ms creating relevant 183 API-JSON
les. The most time is only 131ms for single Web API.
This means generation of an API-JSON document is very
fast.
2) JSON-LD BASED SEMANTIC ANNOTATION AND
FUNCTIONAL SEMANTICS EXTRACTION
It is noticed that many Web APIs have dozens of response
parameters. This makes annotation work tedious. To facilitate
the annotation work, JWASA provides user-friendly operation
interfaces to directly edit data in JSON format and to
retrieve vocabularies in existing ontologies.
Meanwhile, in Step 2 of the experiment, through adding
necessary attributes into API-JSON documents, 183 APIJSONLD
templates are created. Based on these templates,
we manually annotate 183 APIs in Step 3 of the experiment,
and nally generate 183 API-JSONLD documents.
Table 9 shows details of parameters in ve semantically
annotatedWeb APIs from ight domain, including API name,
the number of old request parameters (Reqpara), the number
of annotated request parameters(Areqpara), the number of
added virtual parameters in request (Reqvobj), the number
of old response parameters (Respara), the number of semantically
annotated response parameters (Arespara), the number
of added virtual parameters in response (Resvobj), and
function type (Functiontype). It is noticed that fewer parameters
are semantically annotated in request/response than
old parameters. Specially, those annotated parameters are
close to relevant business, and are distinguished from other
parameters with the annotator's experience. Also, except
API ``Flight No. Query'', for other four APIs, some virtual
parameters are introduced in their request or response
parameters.
In addition, for 183 API-JSONLD documents, we carry out
Algorithm 2 to set attribute inputs and outputs in each document.
Finally, the two attributes are set correctly according to
annotated request/response parameters and function type of
current document. Algorithm 2 is invoked when an annotated
API-JSONLD document is saved, and can be completed in
several milliseconds.
3) AUTOMATIC ONTOLOGY GENERATION
In Step 3 of the experiment, Algorithm 3 (OntologyGen-
eration) is invoked to generate ontologies used in an APIJSONLD
document, when this document is saved. During
annotation process of the 183 APIs, 14 business ontologies
are automatically generated and saved as OWL les. Details
of these ontologies are shown in Table 10, including domain,
concept number (CNum), object property number (PNum),
197218 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
TABLE 9. Details of five annotated APIs in flight domain.
TABLE 10. Details of generated ontologies.
and number of APIs using current ontology (APInum). It is
noticed that an ontology can be used by multiple APIs, such
as 60 APIs for ontology common, 87 APIs for ontology
book.
We also design an extra experiment to evaluate efciency
of ontology generation. In the experiment, we assume that
semantic vocabularies in all annotated API-JSONLD documents
are new vocabularies, and then, based on semantic
vocabularies from 183 annotated API-JSONLD documents,
we carry out Algorithm 3 to create all business ontologies
at one time. The creating process includes reading
API-JSONLD les, creating ontologies, and saving to OWL
les. The result shows that it spent 3172 ms creating all
14 business ontologies. Thus, for every API-JSONLD document,
the time spending in generating ontologies only is about
tens of milliseconds.
In Step 4 of the experiment, for those automatically generated
ontologies, we manually correct and improve fewer
part of concepts' comments, and add comments of all
object properties. Meanwhile, we add some abstract classes/
properties into ontology common, and they can be set super
class/property of those in concrete business ontologies. This
can make more relevant APIs be found. For example, Loca-
tion is a new class in ontology common, and its subclasses
include Address, GPSLocation, Station, Flightport in
other ontologies; property locationInCity is added into the
ontology, and it is the super-properties of some properties
in other ontologies. Furthermore, previous three semantic
conicts also exist among these ontologies. It is noticed
that there are 26 groups of concepts with the same name.
Specially, concept City appears in 6 different ontologies. City
in ontology weather and ight means a city object, but in
ontology common, vehicle, administrative division and hos-
pital only means city name.
4) AUTOMATIC BRIDGE RULE GENERATION
In Step 5 of the experiment, we carry out Algorithm 3
(BridgeRuleGeneration) to facilitate composition among
APIs, which can infer implied relationships and eliminate
various semantic conicts among concepts/properties
among ontologies. The concrete results under two situations
is shown in Table 11, including number of generated
bridge rules (BRnum), number of bridge rules for various
rule types (equalc, intoc, etc.), number of vocabularies that
have different meanings from vocabularies with the same
name (Diffvocab), and number of manually added bridge
rules (MBRnum).
TABLE 11. Details of generated bridge rules under two situations.
In the rst situation (row 1 in Table 11), there are no
vocabularies in diffvocab and no bridge rules in mBrnum,
and the total number of generated bridge rules is 272.
Here, equalc and equalr rules account for most of them,
because there are many vocabularies with the same name.
Specially, before running the algorithm, we manually set subclass
relationship between Location and Address in ontology
common. Thus, ve intoc and ve ontoc bridge rules
are inferred. In the second situation (row 2 in Table 11),
there are 3 vocabularies in diffvocab and 9 bridge rules are
in mBRnum, and 274 bridge rules are generated. Except
for equalc and equalr rules, other four types of rules also
are generated. It is noticed that, compared with the rst
situation, equalc rules are less, and intoc/r, ontoc/r rules
become more. This means the vocabularies in diffcocab and
manual bridge rules are considered during execution of the
algorithm.
In the second situation, we found it spent about 2521ms to
generate 274 bridge rules among 14 ontologies. The execution
time in seconds can be accepted in practice.
Furthermore, generated bridge rules include various relationships
between two vocabularies in two different ontologies
or in the same ontology. Therefore, these rules can play
VOLUME 8, 2020 197219
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
an important role in future API automatic discovery and
composition.
VII. CONCLUSION
In this article, a semi-automaticWeb API semantic annotation
approach is provided, namely JWASA. It adopts lightweight
JSON-LD format to implement semantic annotation of aWeb
API, and meanwhile, proposes a whole solution forWeb API
semantic annotation. In JWASA, two types of documents in
JSON format are designed: API-JSON and API-JSONLD,
and respectively describe Web APIs and semantic Web
APIs. Meanwhile, a common Web API description ontology
WebAPIOnto is designed to provide semantic vocabularies
for common features of Web APIs from different providers.
Furthermore, a semantic annotation specication and a series
of algorithms are designed to improve effectiveness and
efciency of annotation. These algorithms includes parsing
response parameters, extracting I/O parameters, automatic
domain ontology generation, and semi-automatic bridge rule
inference. Finally, for crawled Web APIs from Internet,
JWASA can generate three types of artifacts: API-JSONLD
documents, domain ontologies, and bridge rules. All of
them are crucial elements for following semantic-based Web
API manipulation, e.g: discovery [12] and composition [26].
Based on a prototype system of JWASA and realWeb APIs on
Internet, a series of experiments are carried out. Experiment
results show JWASA is effective and efcient.
JWASA mainly is used to semantically annotate features
related to function of Web APIs. Differences among description
format from different providers are efciently handled.
This can facilitate future API automatic composition.
However, picking semantic vocabulary is completed manually.
This requires annotators are professional for relevant
business domains. Therefore, in futher, we will improve
degree of automation of our JWASA through semantic recommendation
technologies [27]. Also, on artifacts of JWASA,
we will research automatic invocation, composition and
ecosystem evolution [28] of Web APIs.
ACKNOWLEDGMENT
Xianghui Wang thanks her colleagues from Shandong
Jianzhu University for their comments.
REFERENCES
[1] I. Nadareishvili, R. Mitra, M. Mclarty, and M. Amundsen, Microservice
Architecture: Aligning Princ., Practices, Culture. Newton, MA, USA:
O'Reilly Media, 2016.
[2] M. Maleshkova, C. Pedrinaci, and J. Domingue, ``Semantic annotation
of Web apis with sweet,'' in Proc. 6th Workshop Scripting
Develop. Semantic Web, Colocated, Heraklion, Crete, Greece, May 2010,
pp. 113.
[3] C. Luo, Z. Zheng, X. Wu, F. Yang, and Y. Zhao, ``Automated structural
semantic annotation for restful services,'' Int. J.Web Grid Services, vol. 12,
no. 1, pp. 2641, 2016.
[4] M. Garriga, C. Mateos, A. Flores, A. Cechich, and A. Zunino, ``RESTful
service composition at a glance:Asurvey,'' J. Netw. Comput. Appl., vol. 60,
pp. 3253, Jan. 2016.
[5] A. Ranabahu, A. Sheth, M. Panahiazar, and S. Wijeratne, Semantic Anno-
tation and Search for Resources in the Next Generation Web With Sa-Rest.
Pune, Italy: Knoesis, 2011.
[6] C. Bizer, K. Eckert, R. Meusel, H. Mãhleisen, M. Schuhmacher, J. Vãlker,
H. Alani, L. Kagal, A. Fokue, and P. Groth, ``Deployment of rdfa, microdata,
and microformats on the Web-a quantitative analysis,'' in Proc. Int.
Semantic Web Conf., 2013, pp. 1732.
[7] R. Verborgh, A. Harth, M. Maleshkova, S. Stadtmäller, T. Steiner,
M. Taheriyan, and R. V. deWalle, Survey of Semantic Description of REST
APIs. New York, NY, USA: Springer, 2014.
[8] M. N. Lucky, M. Cremaschi, B. Lodigiani, A. Menolascina, and
F. D. Paoli, ``Enriching api descriptions by adding api proles through
semantic annotation,'' in Proc. Int. Conf. Service-Oriented Comput., 2016,
pp. 780794.
[9] C. Peng and G. Bai, ``Using tag based semantic annotation to empower
client and REST service interaction,'' in Proc. 3rd Int. Conf. Complex.,
Future Inf. Syst. Risk, 2018, pp. 6471.
[10] C. Marco and D. P. Flavio, ``Toward automatic semantic api descriptions to
support services composition,'' in Proc. Service-Oriented Cloud Comput.,
vol. 10465, 2017, pp. 159167.
[11] J. Li, ``A fast semantic Web services matchmaker for owl-s services,''
J. Netw., vol. 8, no. 5, p. 1104, 2013.
[12] M. D. Wilkinson, B. Vandervalk, and L. McCarthy, ``The semantic automated
discovery and integration (SADI) Web service design-pattern, API
and reference implementation,'' J. Biomed. Semantics, vol. 2, no. 1,
p. 8, 2011.
[13] G.Kellogg, ``JSON-LD: JSON for linked data,'' in Proc. Semantic Technol.
Bus. Conf., 2012, pp. 14.
[14] S. M. Sohan, C. Anslow, and F. Maurer, ``SpyREST in action: An automated
RESTful API documentation tool,'' in Proc. 30th IEEE/ACM Int.
Conf. Automated Softw. Eng. (ASE), Nov. 2015, pp. 813818.
[15] D. Booth and K. L. Canyang, ``Web services description language (wsdl)
version 2.0 part 0: Primer,'' W3C Recommendation, vol. 26, pp. 3941,
Dec. 2007.
[16] W. A. Bernstein, ``Sawsdl-imatcher: A customizable and effective semanticWeb
service matchmaker,'' J.Web Semantics, vol. 9, no. 4, pp. 402417,
2011.
[17] M. D. L. Calache and C. R. G. D. Farias, ``Graphical and collaborative
annotation support for semantic Web services,'' in Proc. IEEE Int. Conf.
Softw. Archit. Companion (ICSA-C), Mar. 2020, pp. 210217.
[18] U. Lampe, S. Schulte, M. Siebenhaar, D. Schuller, and R. Steinmetz,
``Adaptive matchmaking for RESTful services based on hRESTS and
MicroWSMO,'' in Proc. 5th Int. Workshop Enhanced Web Service Tech-
nol., 2010, pp. 1017.
[19] D. Roman, J. Kopecky, T. Vitvar, J. Domingue, and D. Fensel, ``Wsmolite
and hrests: Lightweight semantic annotations for Web services and
restful apis,'' in Proc.Web Semantics Sci. Services AgentsWorldWideWeb,
vol. 31, 2015, pp. 3958.
[20] R. Alarcon, R. Safe, N. Bravo, and J. Cabello, RESTWeb Service Descrip-
tion for Graph-Based Service Discovery. Cham, Switzerland: Springer,
2015.
[21] C. Marco and D. P. Flavio, ``A practical approach to services composition
through light semantic descriptions,'' in Proc. Service-Oriented Cloud
Comput., vol. 11116, 2018, pp. 130145.
[22] X. Wang, Z. Feng, and K. Huang, ``D3L-based service
runtime self-adaptation using replanning,'' IEEE Access, vol. 6,
pp. 1497414995, 2018.
[23] X. Wang, Z. Feng, K. Huang, and W. Tan, ``An automatic self-adaptation
framework for service-based process based on exception handling,'' Con-
currency Comput., Pract. Exper., vol. 29, no. 5, p. e3984, Mar. 2017.
[24] A. Cheron, J. Bourcier, O. Barais, and A. Michel, ``Comparison matrices
of semantic restful apis technologies,'' in Proc. Int. Conf. Web Eng., 2019,
pp. 425440.
[25] Owl 2 Web Ontology Language Document Overview, W. W. W. Consortium,
Cambridge, MA, USA, 2012.
[26] X. Wang and Z. Feng, ``Semantic Web service composition considering
iope matching,'' J. Tianjin Univ., vol. 50, no. 9, pp. 984996, 2017.
[27] H. Zhang, D. Ge, and S. Zhang, ``Hybrid recommendation system based
on semantic interest community and trusted neighbors,'' Multimedia Tools
Appl., vol. 77, no. 4, pp. 41874202, Feb. 2018.
[28] X.Wang, Z. Feng, S. Chen, and K. Huang, ``DKEM: A distributed knowledge
based evolution model for service ecosystem,'' in Proc. IEEE Int.
Conf. Web Services (ICWS), Jul. 2018, pp. 18.
197220 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
XIANGHUI WANG (Member, IEEE) received the
B.S. and M.S. degrees from the School of Computer
Science and Technology, Shandong University,
China, in 2002 and 2005, respectively, and the
Ph.D. degree from the School of Computer Science
and Technology, Tianjin University, China,
in 2018. She is currently an Assistant Professor
with the School of Computer Science and Technology,
Shandong Jianzhu University, China. Her
research interests include knowledge engineering
and service computing.
QIAN SUN received the B.S. and M.S. degrees
from the School of Computer Science and Technology,
Tongji University, China, in 2004 and
2007, respectively. She is currently an Instructor
with the School of Computer Science and Technology,
Shandong Jianzhu University, China. Her
research interests include workow technology
and service computing.
JINLONG LIANG received the B.S. degree from
the School of Computer Science and Technology,
Shandong University, China, in 2006, and the M.S.
degree from the Qilu Software College, Shandong
University, in 2017. He is currently a Senior
Engineer with the Information Center, Shandong
Provincial Qianfoshan Hospital, First Afliated
Hospital of Shandong First Medical University,
China. His research interest includes enterprise
information integration.
VOLUME 8, 2020 197221
Using linked data to interpret tables?
Varish Mulwad, Tim Finin, Zareen Syed, and Anupam Joshi
Department of Computer Science and Electrical Engineering
University of Maryland, Baltimore County, Baltimore, MD USA 21250
fvarish1,nin,joshig@cs.umbc.edu, zareensyed@gmail.com
Abstract. Vast amounts of information is available in structured forms
like spreadsheets, database relations, and tables found in documents and
on the Web. We describe an approach that uses linked data to interpret
such tables and associate their components with nodes in a reference
linked data collection. Our proposed framework assigns a class (i.e. type)
to table columns, links table cells to entities, and inferred relations between
columns to properties. The resulting interpretation can be used
to annotate tables, conrm existing facts in the linked data collection,
and propose new facts to be added. Our implemented prototype uses
DBpedia as the linked data collection and Wikitology for background
knowledge. We evaluated its performance using a collection of tables
from Google Squared, Wikipedia and the Web.
Keywords: Semantic Web, linked data, human language technology,
entity linking, information retrieval
1 Introduction
Resources like Wikipedia and the Semantic Web's linked open data collection
[1] are now being integrated to provide experimental knowledge bases containing
both general purpose knowledge as well as a host of specic facts about signif-
icant people, places, organizations, events and many other entities of interest.
The results are nding immediate applications in many areas, including improv-
ing information retrieval, text mining, and information extraction. Still more
structured data is being extracted from text found on the web through several
new research programs [2, 3].
We describe a prototype system that automatically interprets and extracts
information from table found on the web. The system interprets such tables using
common linked data knowledge bases, in our case DBpedia, and Wikitology [4], a
custom hybrid knowledge base for background knowledge. To develop an overall
interpretation of the table, we assign a class to every table column and link every
table cell to an entity from the LOD cloud. We also present preliminary work in
identifying relations between table columns. This interpretation can be used for
variety of tasks; in this paper we describe the task of annotation of web tables
?
Research supported in part by a gift from Microsoft Research, a Fulbright fellowship, NSF award
IIS-0326460 and the Human Language Technology Center of Excellence.
2 Varish Mulwad, Tim Finin, Zareen Syed, Anupam Joshi
for the Semantic Web. We describe a template used to publish the annotations
as N3. Our implemented prototype was evaluated using a collection of tables
from Google Squared, Wikipedia and tables found on the Web.
2 Motivation and Related Work
While the availability of data on the Semantic Web has been progressing slowly,
the Web continues to grow at a rapid pace. In July 2008, Google announced that
they had indexed one trillion unique documents on the web1. And much of this
data on the Web is stored in HTML tables. Caferella et al. [5] estimated that
there are around 14.1 billion HTML tables, out of which 154 million contain
high quality relational data.
As a part of the Linked Open Data initiative US, UK and various other gov-
ernments have also shared publicly available government data in tabular form.
This represents a huge source of knowledge currently unavailable on the Se-
mantic Web. There is a need for systems that can automatically generate data
in suitable formats for the Semantic Web from existing sources, be it unstruc-
tured (e.g., free text), semi-structured (e.g., text embedded in forms or Wikis)
or structured (e.g., data in spreadsheets and databases).
Extracting and representing tabular data as RDF is not a new problem.
Signicant research has been done in the area of mapping relational databases
to RDF; various manual and semi-automatic approaches have been proposed(see
[6{10]). To standardize the mapping language, for mapping relational databases
to RDF and OWL, the W3C has formed a working group RDB2RDF2. On
June 8, 2010 the group published its rst working draft, capturing use-cases and
requirements to map Relational Databases to RDF [11].
The other research focus has been on mapping spreadsheets into RDF (see
[12, 13]). While existing systems like RFD123 [12] are practical and useful for
extracting knowledge from tables they suer from several shortcomings. Such
systems require human intervention, for e.g., requiring the users to choose classes
and properties from appropriate ontologies to be used in the annotations. These
systems do not oer any automated (or semi-automated) mechanisms for asso-
ciating the columns headers with known classes or linking the entities in spread-
sheets to known entities from the linked data cloud.
While these systems generate triples, since the columns and entities are not
linked, the triples are not much of use to other applications that want to exploit
this data. In certain cases the triplied data is as useless as raw data would have
been on the Semantic Web. Just triplifying the data may not be that useful.
While Han et al. [14] focused on the problem of associating possible types
with column headers, it did not focus on a complete interpretation of the table,
nor integrating the table with the linked open data cloud. Limaye et al. [15] do
the exact same sub-tasks as we do, however their goal is answering search queries
1 http://googleblog.blogspot.com/2008/07/we-knew-web-was-big.html
2 http://www.w3.org/2001/sw/rdb2rdf/
Using linked data to interpret tables 3
over web tables. The focus of this paper is an automatic framework for inter-
preting tables using existing linked data knowledge and using the interpretation
generating linked annotated RDF from web tables for the Semantic Web.
3 Interpreting a table
Consider the table shown in Fig-
Name Team Position
Michael Jordan Chicago Shooting guard
Allen Iverson Philadelphia Point guard
Yao Ming Houston Center
Tim Duncan San Antonio Power forward
Fig. 1. In this simple table about basketball
players, the column header represents the type
of data stored in columns; values in the columns
represent instances of that type.
ure 1. The column headers sug-
gest the type of information in
the columns: Name and Team -
might match classes in a target
ontology such as DBpedia [16];
Position could match properties
in the same or related ontologies.
Examining the data values, which
are initially just strings, provides
additional information that can
conrm some possibilities and disambiguate between possibilities for others. The
strings in column one can be recognized as entity mentions that are instances of
the dbpedia-owl:Person class and can be linked to known entities in the LOD.
Additional analysis can automatically generate a narrower description, such as
dbpedia-owl:BasketballPlayer.
However just examining the string values in the column may not be enough.
Consider the strings in column two. A initial examination of just the strings
would suggest that they may be instances of the dbpedia-owl:PopulatedPlace
class and that the strings should be linked to the respective cities. But in this
case, this analysis would be wrong, since they are referring to NBA basketball
teams.
Thus it is important to consider additional context evidence, provided by the
column header and rest of the row values. In this example, given the evidence
that values in column one are basketball players and values in column three are
their playing position, we would be able to infer correctly that values in column
two are basketball teams and not cities in the United States.
Identifying relations between columns will be important as well, since rela-
tions can help identify the columns which can be mapped as properties of some
other column in the table. For example, the values in column three are values
of the property dbpedia-owl:position which can be associated with the players in
column one.
Producing an overall interpretation of a table is a complex task that requires
developing an overall understanding of the intended meaning of the table as
well as attention to the details of choosing the right URIs to represent both the
schema as well as instances. We break down the process into following tasks:
{ assign every column a class label from an appropriate ontology
{ link table cell values to appropriate LD entities, if possible
4 Varish Mulwad, Tim Finin, Zareen Syed, Anupam Joshi
{ discover relationships between the table columns and link them to linked
data properties
In this paper we focus on the rst two tasks - associating type/class label
with a column header and linking table cell to entity.We also present preliminary
work on the discovering relations between columns. We also present how this
interpretation can be used to annotate webtables. The details of our approach
and its prototype implementation are described in Section 4 and the results of
the evaluation are described in Section 5.
4 Approach
Our approach comprises four steps: associating ontology classes with columns,
linking cell values to instances of those classes, discovering implicit relations
between columns in the table, and generating annotation output. We discuss
each step in turn.
4.1 Associating Classes with Columns
In a typical well formed table, each column contains data of a single syntactic
type (e.g., strings) that represent entities or values of a common semantic type
(e.g., people, yearly salary in US dollars). The column's header, if present, may
name or describe the semantic type or perhaps a relation in which the column
participates. Our initial goal is to predict a semantic class from among the pos-
sible classes in our linked data collection that best characterizes the column's
values. Our approach is to map each cell value to a ranked list of classes and
then to select the one which best characterizes the entire column. Algorithm 1
describes the steps involved in the process.
The algorithm rst determines the type or class of each string in the column,
by submitting a complex query to the Wikitology KB. The KB returns a ranked
list of top N instances for each string in the column and their class. Using the
classes of the instances returned by the KB, a set of possible class labels for a
column is generated. Each class label in this set is assigned a score based on
the weighted scoring technique described in algorithm 1. The class labels in the
set are paired with strings in the column and each pair gets scored. The score
is based on the highest ranked instance of the string matching the class being
scored. The score is a weighted sum of the instance's Wikitology rank for the
query and it's approximate page rank [17]. The class label that maximizes its
score over the entire column is chosen as the class label to be associated with
the column. We predict class labels from four vocabularies - DBpedia Ontology,
Freebase [18], WordNet [19], and Yago [20].
In the following sections we describe our knowledge base and our custom
query module, used to the query the knowledge base.
Using linked data to interpret tables 5
Algorithm 1 \PredictClassLabel" - An algorithm to pick the best class to be
associated with a column
1: Let S be the set of k strings in a table column.
2: For each s in S, query the Wikitology KB to get a ranked list of top N possible
Wikipedia instances along with their types or class labels and their predicted page
ranks.
3: From the k  N instances, generate a set of class labels that can be associated with
a column. Let C be the set of all associated classes for a column.
4: Create a matrix V [ci; sj ] of class label-string pairings where 0 < i < size of (C),
0 < j < size of (S)
5: Assign a score to each V [ci; sj ] based on the highest ranking instance that matches
ci. The instance's rank R and its predicted Page Rank is used to assign a weighted
score to V [ci; sj ] (we use w = 0.25):
Score = w  (1 / R) + (1 - w)  (PageRank)
6: If none of the instances for a string match the class label being evaluated assign
the pair V [ci; sj ] a score of 0.
7: Choose the class label ci which maximizes its score over the entire column (S) to
be associated with the column.
Input: Table Cell Value (String)
Table Row Data (RowData)
Table Column Header (ColumnHeader)
Output: Top \N" matching instances from KB (TopN)
Query = wikiTitle: String (or)
redirects: String (or)
rstSentence: String, ColumnHeader (or)
types: ColumnHeader (or)
categories: ColumnHeader (or)
contents: (String) ^ 4.0, RowData (or)
linkedConcepts: (String) ^ 4.0, RowData (or)
propertiesValues: RowData
Fig. 2. Description of the query to Wikitology for a table cell
Knowledge Base. We use DBpedia as our linked data knowledge base. We also
use Wikitology, a hybrid KB of structured and unstructured information ex-
tracted from from Wikipedia augmented with structured information from DB-
pedia, Freebase, WordNet and Yago. The interface to Wikitology is via a spe-
cialized information retrieval index implemented using Lucene [21] that allows
unstructured, structured as well as hybrid queries. Given the simple, yet power-
ful query mechanism augmented with the fact that the backbone of Wikitology is
Wikipedia, one of the most comprehensive collaborative encyclopedia, we think
Wikitology along with DBpedia are appropriate choices as KBs. The approach
we have described so far and the approaches we describe further are KB inde-
pendent, allowing the use of any appropriate and suitable linked data knowledge
bases as and when needed.
6 Varish Mulwad, Tim Finin, Zareen Syed, Anupam Joshi
Mapping table to Wikipedia. The table cell string that is being queried for along
with its row data and column header are mapped to the various elds of the
Wikitology index. The cell string is mapped to the title, redirects and the rst
sentence elds of the index. If there's a dierence in spelling between the string
in question and the title or a pseudo name is used, it may appear in the redirects.
The column header is mapped to the rst sentence, types and categories, since
the column header of a table often describes the type of instances present in the
column and the type is also likely to appear in the rst sentence as well.
The string (with a Lucene query weight boost of 4.0) along with the row
data is mapped to contents as well as the linked concepts elds. In a table the
data present in a given row are likely to have some kind of relation amongst
themselves, hence we map the row data to the linked concept elds which cap-
tures the linked concepts (article) to a given Wikipedia concept (article). The
row data (excluding the string) is mapped to property values eld, since the row
data can be values of a property associated with the string in question. Figure 2
describes the query. All the elds are\ored" with each other. The query returns
top N instances that the string in the query could be associated with, along with
their types, page length and their approximate PageRank.
Augmenting types from DBpedia. For every instance returned by Wikitology,
we also query DBpedia using its public SPARQL endpoint3 to fetch the types
associated with that instance on DBpedia. The types returned by Wikitology
are augmented with the types returned by DBpedia to the get a complete and
accurate set of types for a given instance.
4.2 Linking Table Cells to Entities
We have developed an algorithm \LinkTableCells" (see algorithm 2) to link table
cell strings to entities from the Linked Open Data cloud. For every string in the
table, the algorithm re-queries the KB using the predicted class labels for the
column to which the string belongs to, as additional evidence. The predicted class
labels are mapped to the typesRef eld of the Wikitology index and \anded" in
the query in Figure 2 , thus restricting the type of entities returned by the KB
to the predicted types (class labels).
For each of the top N entities returned by the KB, a feature vector is gener-
ated. The feature vector consists of the entity's index score, entity's Wikipedia
page length, entity's page rank, (all popularity measures) the Levenshtein dis-
tance [22] between the entity and the string in the query and the Dice score
[23] between the entity and the string (similarity measures). The Levenshtein
distance and the Dice score is calculated between the query string and all labels
(all possible names) for the entity. To obtain all other possible names, we query
DBpedia to get the values associated with the rdfs:label property of the entity.
The best Levenshtein distance (i.e. the smallest) and the best Dice score (i.e.
the largest) are selected as a part of the feature vector. We choose popularity
3 http://dbpedia.org/sparql
Using linked data to interpret tables 7
Algorithm 2 \LinkTableCells" - An algorithm to link table cell to entities
1: Let S be the set of strings in a table.
2: for all s in S do
3: Query the KB and get top N instances that the string can be linked to. Let I be
this set of instances for the string.
4: for all i in I do
5: Get all the other names associated with i. Let this set be O
6: Calculate the Levenshtein distance between s and all o 2 O
7: Choose the best (smallest) Levenshtein distance between s and any o 2 O
8: Similarly calculate the Dice score between s and all o 2 O
9: Choose the best (largest) Dice score
10: Create a feature vector for i. The vector includes the following features: i0s
Wikitology index score, i0s page rank, i0s page length, best Levenshtein distance
and best Dice score
11: end for
12: Input feature vectors of all i 2 I to a SVM Rank Classier. The Classier outputs
a ranked list of instances in I
13: Select the instance which is top ranked. Let it be topi
14: To feature vector of topi, append two new features - the SVM rank score for the
topi and the dierence of scores between the top two instances ranked by SVM
Rank
15: Input this vector to another classier which produces a label \yes" or \no" for
the given vector
16: If the classier labels the feature vector a \yes", link the string s to instance
topi else Link it to NIL.
17: end for
measures as a part of the feature vector because in cases where it is dicult
to disambiguate between entities, the most popular entity is often the correct
answer and choose similarity measures because the entity that will get linked to
query string will be similar if not same in terms of string comparison.
For each query string, a set of feature vectors is generated from the top N
instances returned as query results. A classier built using SVM-rank [24] ranks
the entities based on the feature vector set. A second classier is trained to
decide whether the evidence is strong enough to link to the top ranked entity
or not. The classier decides based on the feature vector of top ranked entity
which now include two additional features - the SVM-rank score of the entity
and the dierence in scores between the top two ranked entities by SVM-rank.
If the evidence is strong enough, the classier suggests to link to the top ranked
entity, else it suggests to link to \NIL". The above process is repeated for all the
strings in the table.
The second SVM classier was trained using Weka. In cases where linking to
the top ranked entity returned by SVM-rank based classier would be incorrect
for example, if the entity is not present in the KB, the second classier is useful to
determine to link the query string to the entity or to predict a link to \NIL".This
step is useful in discovery of new entities in a given table.
8 Varish Mulwad, Tim Finin, Zareen Syed, Anupam Joshi
@prex rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prex dbpedia: <http://dbpedia.org/resource/> .
@prex dbpedia-owl: <http://dbpedia.org/ontology/> .
@prex yago: <http://dbpedia.org/class/yago/> .
\Name"@en is rdfs:label of dbpedia-owl:BasketballPlayer .
\Team"@en is rdfs:label of yago:NationalBasketballAssociationTeams .
\Michael Jordan"@en is rdfs:label of dbpedia:Michael Jordan .
dbpedia:Michael Jordan a dbpedia-owl:BasketballPlayer .
\Chicago Bulls"@en is rdfs:label of dbpedia:Chicago Bulls .
dbpedia:Chicago Bulls a yago:NationalBasketballAssociationTeams .
Fig. 3. A example of N3 representation of a table as linked RDF
4.3 Relation identication
We have developed a preliminary approach for identifying relations between table
columns. The algorithm generates a set of candidate relations from the relations
that exist between the concepts associated with the strings in each row of the
two columns. To identify relation between the pair of strings, we query DBpedia
using its public SPARQL endpoint.
Each candidate relation is scored as follows - each pair of strings in the two
columns vote for the candidate relation with a score of 1, if the candidate relation
appears in the set of relations between the the pair of strings. The sum of score of
each of the candidate relation is normalized by the number of rows in the table.
The relation with the highest score is selected to represent relation between the
two columns. Our work on relations identication is pretty preliminary and we
have still have to develop approach to identify columns that can be mapped as
properties of some other column.
4.4 Annotating the webtable
In the previous section (sections 4.1, 4.2 , 4.3) we described approaches that help
us develop an overall interpretation of the table. We now describe how this can
be used for annotating a webtable. We have developed a template for annotating
and representing tables as linked RDF. We choose N3 because it is compact as
well as human readable. Figure 3 shows an example of a N3 representation of
a webtable. To associate the column header with its predicted class label, the
rdfs:label property from RDF Schema is used. The rdfs:label property is also
used to associate the table cell string with its associated entity from DBpedia.
To associate the table string with its type (i.e. class label of the column header),
the rdf:type property is used.
Using linked data to interpret tables 9
# of Tables 15
# of Rows 199
# of Columns 56 (52)
# of Entities 639 (611)
(a)
Category # of Columns (%) # of Entities (%)
Place 40 45
Person 25 20
Organization 12 10
Other types 23 25
(b)
Fig. 4. (a) provides a summary of the data set. (b) presents the distribution of columns
and entities across the four categories.
Mean Average Precision columns
m = 1 11.53%
0 < m < 1 69.23%
m = 0 19.24%
(a)
Recall columns
r = 1 46.15%
0 < r < 1 34.61%
r = 0 19.24%
(b)
Fig. 5. The percentage of columns with various MAP (see a) and recall (see b) scores.
5 Evaluation
Our implemented prototype was evaluated against 15 tables obtained from Google
Squared, Wikipedia and from a collection of tables extracted from the Web4. We
consider simple regular tables with column headers and tables where the number
of cells is equal to the product of number rows and columns. We do not consider
tables which have been used for formatting. The task of assigning class label
to column header was evaluated against 52 columns; linking the table cell to
entity against 611 entities. The distribution of the columns and entities across
the four categories - Persons, Places, Organizations and Other (movies, songs,
nationality etc.) is as shown in Figure 4(b)
5.1 Class label prediction for columns
We used human judgments to evaluate the correctness of the class labels pre-
dicted by our approach.We evaluated the class label predicted from the DBpedia
ontology, since it would have been fairly easy for our evaluators to browse the
DBpedia ontology. In the rst evaluation of the algorithm for assigning class
labels to columns, we compared the ranked list of possible class labels generated
by the system against the list of possible class labels ranked by the evaluators.
As shown in Figure 5 for 80.76% of the columns the Mean Average Precision
(MAP) [25] between the system and evaluators list is greater than 0 which in-
dicates that there was at least one relevant label in the top three of the system
ranked list. For 75% of the columns, the recall of the algorithm was greater than
or equal to 0.6. A high recall value shows that there is a high match between
the labels in the top three of the system as compared to the top three list of the
evaluators5.
4
Set of tables available online at www.cs.umbc.edu/varish1/t2ld-tables/
5
While the top three from the system and evaluator's list were compared; the total length of the
list varied between 5 and 11 which depended upon the set of possible class labels for every column
10 Varish Mulwad, Tim Finin, Zareen Syed, Anupam Joshi
Fig. 6. Category wise accuracy for \column correctness" is shown in (a) and for entity
linking in (b)
In the nal evaluation, we tried to assess whether our predicted class labels
were reasonable based on the judgment of human evaluators. Even though a
more accurate class label may exist for a given column, the evaluators needed to
determine whether the predicted class was reasonable. For example, for a column
of cities, a human might judge dbpedia-owl:City as the most appropriate class,
consider dbpedia-owl:PopulatedPlace and dbpedia-owl:Place as acceptable, and
consider other classes as unacceptable (e.g., dbpedia-owl:AdministrativeRegion,
owl:Thing, etc). 76.92% of the class labels predicted were considered correct by
the evaluators. The accuracy in each of the four categories is shown in Figure
6. We enjoyed moderate success in assigning class labels for Organizations and
Other types of data probably because of sparseness of data in the KB about
these types of entities.
5.2 Linking table cells to entities
For the evaluation of linking table cells to entities, we manually hand-labeled
the 611 table cells to their appropriate Wikipedia / DBpedia pages. The system
generated links were compared against the expected links. 66.12% of the table
cell strings were correctly linked. A look at the breakdown of accuracy based
on the categories (Figure 6) shows that we had the highest accuracy in linking
Persons (83.05%) followed by linking Places (80.43%).We have moderate success
in linking Organization (61.90%), but we fare poorly in linking other types of
data like movies, nationality, songs, types of business and industry etc. with an
accuracy of just 29.22% probably because of sparseness of data in the KB about
these types of entities.
Our dataset had 24 entities which were unknown to the KB and in all the
24 cases, the system was able to predict correctly that the table cell should be
linked to \NIL". Comparing the entity linking results against our previous work
where we used a heuristic based method for linking table cells to entity [17], we
have improved our accuracy in linking places by a good margin (18.79 %) and
Using linked data to interpret tables 11
accuracy for linking persons and organizations slightly decreased (by 7.71 % and
4.77 % respectively). However this would not be that fair a comparison since the
initial results from the previous method are for a small subset6 of the current
data set.
5.3 Relation identication
We did a preliminary evaluation for identication of relation between columns.
We asked human evaluators to identify pairs of columns in a table between which
a relation may exist and compared that against the pairs of columns identied
by the system. For ve tables, used in this evaluation, in 25% of the cases, the
system was able to identify the correct pairs of columns.
6 Conclusion
We presented an automated framework for interpreting data in a table using ex-
isting Linked Data KBs. Using the interpretation of the table we generate linked
RDF from webtables. Evaluations show that we have been fairly successful in
generating correct interpretation of webtables. Our current work is focused on
improving relationship discovery and generating new facts and knowledge from
tables that contain entities not present in the LOD knowledge bases. To deal
with web scale analytics, we plan to focus on adapting our algorithms for paral-
lelization using Hadoop or Azure type frameworks. We are also exploring ways
to apply this work to create an automated (or semi-automated / human in the
loop) framework for interpreting and representing public government datasets
as linked data.
References
1. Bizer, C.: The emerging web of linked data. IEEE Intelligent Systems 24 (2009)
87{92
2. Etzioni, O., Banko, M., Cafarella, M.: Machine reading. In: Proceedings of the
National Conference on Articial Intelligence. Volume 21., Menlo Park, CA; Cambridge,
MA; London; AAAI Press; MIT Press; 1999 (2006) 1517
3. McNamee, P., Dang, H.: Overview of the TAC 2009 knowledge base population
track. In: Proceedings of the 2009 Text Analysis Conference. (2009)
4. Finin, T., Syed, Z.: Creating and Exploiting a Web of Semantic Data. In: Proc.
2nd International Conference on Agents and Articial Intelligence, Springer (2010)
5. Cafarella, M.J., Halevy, A.Y.,Wang, Z.D.,Wu, E., Zhang, Y.: Webtables: exploring
the power of tables on the web. PVLDB 1 (2008) 538{549
6. Barrasa, J., Corcho, O., Gomez-perez, A.: R2o, an extensible and semantically
based database-to-ontology mapping language. In: Proc. 2nd Workshop on Semantic
Web and Databases(SWDB2004). Volume 3372. (2004) 1069{1070
6 The subset had 171 entities to link
12 Varish Mulwad, Tim Finin, Zareen Syed, Anupam Joshi
7. Hu, W., Qu, Y.: Discovering simple mappings between relational database schemas
and ontologies. In Aberer, K., Choi, K.S., Noy, N.F., Allemang, D., Lee, K.I.,
Nixon, L.J.B., Golbeck, J., Mika, P., Maynard, D., Mizoguchi, R., Schreiber, G.,
Cudre-Mauroux, P., eds.: ISWC/ASWC. Volume 4825 of Lecture Notes in Computer
Science., Springer (2007) 225{238
8. Papapanagiotou, P., Katsiouli, P., Tsetsos, V., Anagnostopoulos, C., Hadjiefthymiades,
S.: Ronto: Relational to ontology schema matching. In: AIS SIGSEMIS
BULLETIN. (2006)
9. Lawrence, E.D.: Composing mappings between schemas using a reference ontology.
In: Proceedings of International Conference on Ontologies, Databases and
Application of Semantics (ODBASE), Springer (2004) 783{800
10. Sahoo, S.S., Halb, W., Hellmann, S., Idehen, K., Thibodeau Jr, T., Auer, S., Sequeda,
J., Ezzat, A.: A survey of current approaches for mapping of relational
databases to rdf. Technical report, W3C (2009)
11. Auer, S., Feigenbaum, L., Miranker, D., Fogarolli, A., Sequeda, J.: Use cases
and requirements for mapping relational databases to RDF, W3C working draft.
Technical report (2010)
12. Han, L., Finin, T., Parr, C., Sachs, J., Joshi, A.: RDF123: from Spreadsheets to
RDF. In: Seventh International Semantic Web Conference, Springer (2008)
13. Langegger, A., Wob, W.: Xlwrap - querying and integrating arbitrary spreadsheets
with sparql. In: 8th International Semantic Web Conference (ISWC2009). (2009)
14. Han, L., Finin, T., Yesha, Y.: Finding Semantic Web Ontology Terms from Words.
In: Proceedings of the Eigth International Semantic Web Conference, Springer
(2009) (poster paper).
15. Limaye, G., Sarawagi, S., Chakrabarti, S.: Annotating and searching web tables
using entities, types and relationships. In: Proc. of the 36th Int'l Conference on
Very Large Databases (VLDB). (2010)
16. Bizer, C., Lehmann, J., Kobilarov, G., Auer, S., Becker, C., Cyganiak, R., Hellmann,
S.: Dbpedia - a crystallization point for the web of data. Journal of Web
Semantics 7 (2009) 154{165
17. Syed, Z., Finin, T., Mulwad, V., Joshi, A.: Exploiting a Web of Semantic Data for
Interpreting Tables. In: Proc. Second Web Science Conference. (2010)
18. Bollacker, K., Evans, C., Paritosh, P., Sturge, T., Taylor, J.: Freebase: a collaboratively
created graph database for structuring human knowledge. In: Proceedings
of the 2008 ACM SIGMOD international conference on Management of data. SIGMOD
'08, New York, NY, USA, ACM (2008) 1247{1250
19. Miller, G.A.: Wordnet: a lexical database for english. Commun. ACM 38 (1995)
39{41
20. Suchanek, F.M., Kasneci, G., Weikum, G.: Yago: A Core of Semantic Knowledge.
In: 16th Int. World Wide Web Conf., New York, ACM Press (2007)
21. Hatcher, E., Gospodnetic, O.: Lucene in Action (In Action series). Manning
Publications (2004)
22. Levenshtein, V.I.: Binary codes capable of correcting deletions, insertions, and
reversals. Technical Report 8 (1966)
23. Salton, G., Mcgill, M.J.: Introduction to Modern Information Retrieval. McGraw-
Hill, Inc., New York, NY, USA (1986)
24. Joachims, T.: Training linear svms in linear time. In: Proceedings of the 12th
ACM SIGKDD international conference on Knowledge discovery and data mining.
KDD '06, New York, NY, USA, ACM (2006) 217{226
25. Manning, C.D., Raghavan, P., Schutze, H.: Introduction to Information Retrieval.
1 edn. Cambridge University Press (2008)
Semantic Gateway as a Service architecture for IoT
Interoperability
Pratikkumar Desai
SeerLabs,
pratik@knoesis.org
Amit Sheth and Pramod Anantharam
Ohio Center of Excellence in
Knowledge-enabled Computing (Kno.e.sis),
Wright State University
Dayton, OH
amit@knoesis.org, pramod@knoesis.org
Abstract—The Internet of Things (IoT) is set to occupy a
substantial component of future Internet. The IoT connects sensors
and devices that record physical observations to applications
and services of the Internet[1]. As a successor to technologies
such as RFID and Wireless Sensor Networks (WSN), the IoT
has stumbled into vertical silos of proprietary systems, providing
little or no interoperability with similar systems. As the IoT
represents future state of the Internet, an intelligent and scalable
architecture is required to provide connectivity between these
silos, enabling discovery of physical sensors and interpretation of
messages between the things. This paper proposes a gateway and
Semantic Web enabled IoT architecture to provide interoperability
between systems, which utilizes established communication
and data standards. The Semantic Gateway as Service (SGS)
allows translation between messaging protocols such as XMPP,
CoAP and MQTT via a multi-protocol proxy architecture. Utilization
of broadly accepted specifications such as W3Cs Semantic
Sensor Network (SSN) ontology for semantic annotations of
sensor data provide semantic interoperability between messages
and support semantic reasoning to obtain higher-level actionable
knowledge from low-level sensor data.
I. IOT INTEROPERABILITY CRISIS
In the initial momentum of IoT, smart grid, smart appliances,
and wearable device powered health and fitness
are emerging as major application domains but with varying
architecture and data models. Figure 1 shows vertical silos for
these domains with examples including physical sensors to the
Internet service. In health care domain, the Fitbit, an activitymonitoring
device, provides complete sets of IoT components
creating its close silo. It provides graphical interface and uses
representational state transfer (REST) application interface to
connect the sensor to their cloud service. Similarly, a user can
connect and monitor his health by analyzing data from sensors
such as heart rate, glucose, weighing scale using any popular
open hardware platform such as Raspberry Pi or Arduino as
a gateway node. An IoT service such as Xively, previously
known as Pachube, can provide graphical interface for sensor
data aggregated from this gateway node. The current state of
IoT infrastructure lacks methods to provide interconnectivity,
for example between the Fitbit and the Xively silos, at each
of these layers: Network, Messaging and Data model.
A. Network layer interoperability
The power constrained sink nodes, connected to the physical
world objects, require efficient networking protocols. The
Fig. 1. Vertical silos of IoT service deployment
IoT domain is scattered between various low power networking
protocols (ZigBee, ZWave, and Bluetooth), traditional
networking protocols (Ethernet, WiFi) and even hardwired
connections. These protocols are designed for domain specific
applications with distinctive features. Solving interoperability
issue at this level requires standardization at the hardware level.
Various commercial products have been developed to support
multiple networking protocols by assembling the required
hardware components together. This paper reports on the
research on solving the interoperability problem at the application
level, bypassing the networking protocol interoperability
challenge.
B. Interoperability between messaging protocol
In contemporary IoT applications, multiple competing application
level protocols such as CoAP (Constrained Application
Protocol), MQTT (Message Queue Telemetry Transport)
and XMPP (Extensible Messaging and Presence Protocol) are
proposed by various organizations to become the de facto
standards to provide communication interoperability[2], [3],
[4]. Each of the protocol possesses unique characteristics
and messaging architecture helpful for different types of IoT
applications, which require effective utilization of limited processing
power and energy. However, a scalable IoT architecture
should be independent of messaging protocol standards, while
2015 IEEE International Conference on Mobile Services
978-1-4673-7284-8/15 $31.00 © 2015 IEEE
DOI 10.1109/MS.2015.51
Semantic Gateway as a Service architecture for IoT
Interoperability
Pratikkumar Desai1, Amit Sheth, Pramod Anantharam
Ohio Center of Excellence in Knowledge-enabled Computing (Kno.e.sis),
Wright State University
Abstract
The Internet of Things (IoT) is set to occupy a substantial component of future Internet. The IoT
connects sensors and devices that record physical observations to applications and services of the
Internet[1]. As a successor to technologies such as RFID and Wireless Sensor Networks (WSN),
the IoT has stumbled into vertical silos of proprietary systems, providing little or no
interoperability with similar systems. As the IoT represents future state of the Internet, an
intelligent and scalable architecture is required to provide connectivity between these silos,
enabling discovery of physical sensors and interpretation of messages between the things. This
paper proposes a gateway and Semantic Web enabled IoT architecture to provide interoperability
between systems, which utilizes established communication and data standards. The Semantic
Gateway as Service (SGS) allows translation between messaging protocols such as XMPP,
CoAP and MQTT via a multi-protocol proxy architecture. Utilization of broadly accepted
specifications such as W3C’s Semantic Sensor Network (SSN) ontology for semantic
annotations of sensor data provide semantic interoperability between messages and support
semantic reasoning to obtain higher-level actionable knowledge from low-level sensor data.
Note to the reviewers: Unlike traditional academic journal publications, IEEE IC has a preference to limit
number of references, so we welcome any suggestions on removing references, especially if additional
references are suggested for inclusions. We have also included some introductions to communication
technologies and an overview on current IoT ecosystem to make this manuscript as self contained as
possible, especially for IC’s wider audience. However, if needed, some of these can be removed if we
want to assume that readers will be; actionable suggestions and recommendations on these matters will
be valuable.
1. IoT Interoperability crisis
In the initial momentum of IoT, smart grid, smart appliances, and wearable device powered
health and fitness are emerging as major application domains but with varying architecture and
data models. Figure 1 shows vertical silos for these domains with examples including physical
sensors to the Internet service. In health care domain, the Fitbit, an activity-monitoring device,
provides complete sets of IoT components creating its close silo. It provides graphical interface
and uses representational state transfer (REST) application interface to connect the sensor to
their cloud service. Similarly, a user can connect and monitor his health by analyzing data from
1 Pratikkumar Desai is now with SeerLabs, an IoT startup.
sensors such as heart rate, glucose, weighing scale using any popular open hardware platform
such as Raspberry Pi or Arduino as a gateway node. An IoT service such as Xively, previously
known as Pachube, can provide graphical interface for sensor data aggregated from this gateway
node. The current state of IoT infrastructure lacks methods to provide interconnectivity, for
example between the Fitbit and the Xively silos, at each of these layers: Network, Messaging and
Data model.
Figure 1: Vertical silos of IoT service deployment
1.1 Network layer interoperability
The power constrained sink nodes, connected to the physical world objects, require efficient
networking protocols. The IoT domain is scattered between various low power networking
protocols (ZigBee, ZWave, and Bluetooth), traditional networking protocols (Ethernet, WiFi)
and even hardwired connections. Figure 2 shows IoT networking protocols with traditional
devices associated with them. These protocols are designed for domain specific applications with
distinctive features. Solving interoperability issue at this level requires standardization at the
hardware level. Various commercial products have been developed to support multiple
networking protocols by assembling the required hardware components together. This paper
reports on the research on solving the interoperability problem at the application level, bypassing
the networking protocol interoperability challenge.
Figure 2: Present state of IoT network architecture
1.2 Interoperability between messaging protocol
In contemporary IoT applications, multiple competing application level protocols such as CoAP
(Constrained Application Protocol), MQTT (Message Queue Telemetry Transport) and XMPP
(Extensible Messaging and Presence Protocol) are proposed by various organization to become
the de facto standard to provide communication interoperability[2]–[4]. Each of the protocol
possesses unique characteristics and messaging architecture helpful for different types of IoT
applications, which require effective utilization of limited processing power and energy.
However, a scalable IoT architecture should be independent of messaging protocol standards,
while also providing integration and translation between various popular messaging protocols.
Figure 3 shows an example of REST based messages transfer between CoAP client and server,
while the Figure 4 shows publisher/subscriber based message delivery for MQTT protocol.
Figure 3: An example of CoAP message transfer
Figure 4: An example of publisher-subscriber based message transfer
We describe a semantic IoT architecture where the gateway, located between physical level
sensors and cloud-based services, provides translation between widely used CoAP, MQTT and
XMPP protocols, making their semantic integration possible and seamless.
1.3 Interoperability at data annotation level
The traditional paradigm of the IoT service model provides raw sensor data to the software
agent, captured from the heterogeneous sink nodes. This raw sensor data do not contain any
semantic annotation and requires extensive manual effort in order to build practical applications.
An IoT service can provide raw sensor data with added metadata but due to absence of
annotation standards, it cannot be exploited by other services. Typically IoT applications are
deployed in a bottom-up (sensors, gateways, service and application) manner from a common
provider. These providers control the sensor data and data structures, which help them to create
intelligent application on top of it. Due to the proprietary approach employed by these providers,
the IoT domain has turned into a domain of vertical silos of various IoT applications with no
horizontal connectivity between them. This lack of interoperability with independent services
currently endangers the wide acceptability and adoption of the IoT domain, especially for
applications that can benefit from multiple devices.
2. Background
IoT interconnects physical world “Things” by utilizing software and networking technologies.
Due to its roots in traditional sensor networks, connected physical objects are resourceconstrained
devices, and require competent communication protocol for energy efficiency.
First wave of IoT application in smart city domain emphasized on connecting sensor interfacing
with physical-world using lightweight protocols such as CoAP and XMPP [5][6]. In later stages,
traditional Internet state transfer protocol such as REST is used for similar applications, where
event-centric frameworks had been implemented to reduce number of messages transmitted [7].
The ‘Smart-Object’ devices with domain specific intelligence are rapidly replacing first wave of
IoT devices [8]. Although these devices do not utilize semantic technologies, they provide
higher-level of awareness from the sensor than just plain raw sensor data.
The IoT domain has been started getting congested with heterogeneous applications using
different communication protocols and data models [9]. Various organizations such as the
OpenIoT alliance, AllSeen alliance, and IPSO alliance are working on standardization of
communication protocols to provide interoperability between various vendors silos [10][11][12].
Organization such as Internet Engineering Task Force (IETF) and XMPP standards foundation
are trying to scale their messaging protocols, CoAP and XMPP, respectively, to align with other
protocols. These efforts are scattered and largely focus on solving problems around one protocol
instead of providing integration solution.
In Web-centric infrastructure, acquisition of contextual information from raw sensor data
requires annotation of sensor data with semantic metadata. Key standardization efforts that have
sought to establish sensor data models for sensors to be accessible and controllable via the Web
include:
• OGC Sensor Web Enablement (SWE)
The SWE efforts established by the Open Geospatial Consortium include following
important specifications: Observation & Measurement (O&M), Sensor Model Language
(SensorML) and Sensor Observation Service (SOS)[13]. The O&M and SensorML
contain standard model and XML schema for observations/measurements and
sensors/processes respectively. The SOS is a standard service model, which provides
mechanism for querying observation and sensor metadata.
• Semantic Sensor Network (SSN) ontology
The SSN ontology, developed by W3C provides a standard for modeling sensor devices,
sensor platforms, knowledge of the environment and observations[14] [15]. The SSN
provides a foundation in the direction of achieving interoperability between the
interconnected IoT Silos.
• Semantic Sensor Observation Service (SemSOS)
The Semantic Web enabled implementation of SOS, SemSOS, provides a rich semantic
backend (knowledge base) while retaining the standard SOS specifications/service
interactions. A semantically intelligent client can utilize this capability of SemSOS to
derive higher level abstractions from the annotated sensor data [16] by implementing a
semantic reasoning service acting on the knowledge base. SemSOS is the principal
component of Semantic Sensor Web [17].
Although the utilization of these standards provide integration of Semantic Web with sensor
applications, the interoperability challenges on IoT is far from being solved and a semantic IoT
architecture is required to provide interoperability between connected IoT systems. This
architecture should support multiple IoT protocols and severe resource and energy constrains.
One of the major initiatives, which utilizing Semantic Web for IoT architecture, includes the
OpenIoT project, funded by Europe Union’s framework program. The OpenIoT focuses on
developing open source middleware for IoT interoperability using linked sensor data[10].
In standard IoT applications the sink nodes are energy-constrained devices and utilizes minimum
resources to conserve the energy. Various proposals seek to optimize the resources and provide
translation between application layer protocol via the gateway devices[9][6]. These approaches
fail in achieving interoperability at defining sensor annotation model, which is required to
provide service level interoperability between IoT systems.
3. Semantic IoT Architecture
In the present IoT ecosystem, various IoT components can be broadly categorized into three
classes: sink nodes, gateway nodes, and IoT services. Typical sink nodes consist of household
appliances or sensors observing the physical environment, which possess low computational
resources, stringent energy constraints and limited communication resources. The gateway node
works as a sensor data aggregator and provides connectivity with other sink nodes and service
providers. The gateway nodes have more computing resources compared to the sink nodes and
occasionally provide replacement for the sink nodes. The IoT services collect data from the
various gateway nodes and provide user or event specific services using a graphics interface, a
notification or application.
Although they consist of each components mentioned above, the current IoT silos only provide
end-to-end message delivery and lacks accessibility to semantic data. Organizations such as
IETF, which manages CoAP standards, and XMPP are working on standardizing sensor data
models as steps toward semantic data annotation[18]. In process of solving the data model
interoperability problem in IoT silos, these efforts are advancing in direction of creating silos
around these protocols, where these data models are protocol centric and incompatible with other
data models.
Semantic annotation of sensor data by utilizing a standard mechanism and vocabulary can
provide interoperability between IoT vertical silos. Semantic Web community has created and
optimized standard ontologies for sensor observation, description, discovery and services via
O&M, SensorML, SOS and SSN. By integrating these annotated data and providing Semantic
Web enabled messaging interface, a third party service can convert heterogeneous sensor
observations to higher level abstractions[19].
Figure 5: Proposed IoT architecture with Semantic Gateway.
Because gateway nodes have sufficient computational resources, we can implement necessary
technologies to provide interoperability. Similarly, utilizing semantic technologies at the service
level can also enable interconnection between them. We propose the concept of Semantic
Gateway as Service (SGS) as a bridge between sink nodes and IoT services. In the proposed
semantic IoT architecture, the gateway acts as the center of data communication between the
physical-world and the Cloud. This architecture can be categorized as a Semantic Service
Oriented Architecture (SSOA) for IoT systems as it fulfills technical requirements such as
service-oriented architecture, standard based design, and semantic-based computing leveraging
application agents to autonomously interpret sensor data and interact mutually [20][21].
The sink nodes can be connected to each other in a mesh or a hierarchical topology with wired or
wireless connection. A node in the topology acts as the endpoint and connects to the gateway
using CoAP, XMPP or MQTT protocol. Due to the lower processing capabilities of the sink
nodes, they can be only utilized as clients. The CoAP protocol provides data in JSON or XML
format while the MQTT only support XML. The data transferred from the sink nodes to the
gateway is in raw format without any semantic annotations. As described in Figure 5, the SGS
provides interfaces to Application services via REST and publisher/subscriber based protocols.
The data is semantically annotated at the gateway and hence these services can exploit the sensor
information for further analysis.
This architecture is well suited to addresses privacy issues by allowing the users to control sensor
data at the gateway, and hence may make it more acceptable. The gateway also implements high
security standards by letting user specify the public and private sensor features, where private
sensor features are only accessible after secure authorization using OAuth.
4. Semantic Gateway as Service (SGS)
The heart of the semantic IoT architecture is the SGS, which bridges low level raw sensor
information with knowledge centric application services by facilitating interoperability at
messaging protocol and data modeling level. The description below is complemented by Open
Source code available at https://github.com/chheplo/node-sgs which is further being enhanced and
evaluated in the context of CityPulse (http://www.ict-citypulse.eu/), a large multi-institutional EU FP7
supported project along with an effort for additional community engagement and development.
Figure 6: SGS architecture.
The SGS has three core components as described in Figure 6: (1) multi-protocol proxy, (2)
semantic annotation service, and (3) gateway service interface. The SGS also has components for
required capabilities such as message store and topics router, which assist multi-protocol proxy
and gateway service interface in translation between messaging protocol. At a high level, SGS
architecture connects external sink nodes to the gateway component using primitive client
agents, which support MQTT, XMPP or CoAP. In contrast, the gateway service interface
connects cloud services or other SGSs via REST or pubsub protocol. Before raw sensor data is
forwarded from proxy to gateway interface, it is annotated using SSN and domain specific
ontologies. Although the semantically annotated data is in RDF format at the multi-protocol
proxy, the gateway interface converts the data into JSON, specifically linked data (JSON-LD)
format to support RESTful protocols.
5. Multi-protocol proxy
Figure 7: Multi-protocol proxy, communicating with sensor nodes.
The multi-protocol proxy is the SGS component facing the physical-world. Due to computation
capability constrains, the sink level sensor nodes can support messaging protocols only as clients
with limited support. CoAP is an optimized REST protocol for sensor applications, which
supports request/response and resource/observer architecture. MQTT is a telemetry protocol and
uses the publisher/subscriber (pubsub) model, where publisher manages list of resources also
known as ‘topics’ and subscriber can register to ‘topics’ to obtain information when an event
occurs. Similarly, XMPP is extended to implements pubsub model, which implements resources
as ‘nodes’ instead of topics[22]. The SGS architecture provides interfaces to all sink level
clients, by supporting these protocols via multi-protocol proxy. Similarly on the other side, the
multi-protocol proxy is connected to the gateways as service, which is the Internet facing
component of the SGS.
The translation of messages between sink nodes and Internet services is not required when ends,
where data is produced and where data is consumed, implement identical messaging mechanism,
either REST or pubsub. In cases where the client and server devices have different messaging
mechanism, the translation of the message is mandatory at the gateway. The multi-protocol
proxy solves the message translation problem via introducing two additional components,
message stores and topic router. Each meaningful state of sensor information or resources are
described as topics and managed by the topic router, which also tracks publisher and subscriber
of the topic.
Figure 8 shows message translation between a CoAP client and an MQTT subscriber. When the
sensor generates a data or changes its state, the CoAP client sends that change to the SGS as a
POST message, which gets captured by the multi-protocol proxy. The proxy aligns that resource
with appropriate topic from the topic router and fetches the list of subscriber. The proxy then
forwards that message to these subscribers after passing through semantic annotation block.
Figure 8: Message translation from CoAP client to MQTT service.
Figure 9 shows the translation of messages between a MQTT publisher and REST interface. In
this translation process, the message store component is used to buffer the latest message from
the publisher to supplement GET request received from the REST interface. The multi-protocol
proxy thus solves one of the major interoperability problems at messaging level.
The modular approach of the framework leads to an extensibility, providing interoperability for
other IoT protocols such as Advanced Message Queuing Protocol (AMQP) and Data Distribution
Service (DDS).
Figure 9: Message translation from MQTT publisher to REST interface
6. Semantic data annotation
Figure 10: Semantic data annotation of sensor messages
The semantic annotation service component process each sensor message received from the sink
node before forwarding it further to gateway interface. The annotation process provides
standardization at three levels: (1) service description and discovery, (2) sensor and observation
description, and (3) domain specific descriptions.
The services based on SOS utilize O&M and SensorML data annotation standards for service
description. The SGS annotates the raw sensor data using these OGC standards. This annotation
is required for service-oriented systems and for systems to be dynamically discovered by other
services. The annotation using OGC standards is optional where number of resources being used
are known and well defined.
The semantic sensor and observation description are provided using SSN ontology after
annotated with OGC standards. As the primary data model of the proposed architecture, each
message is annotated with sensor description using SSN ontology. The semantic sensor
description helps other software agents to operate at the level of semantic abstraction, further
enabling processing and reasoning over the data[23]. Figure 11 shows a graph describing a
temperature sensor observation using various components of SSN ontology.
Figure 11: An example of resource graph for single instance of temperature reading
For various domain specific applications such as health care, farming, and environmental
monitoring, the SGS can be equipped with optional domain specific ontologies. These ontologies
describe domain specific concepts to service elements. In a system, which utilizes domain
specific ontologies, the SGS is required to communicate those specific ontologies to participating
service or other SGSs.
7. Gateway service interface
Figure 12: Gateway as service architecture
The gateway service is the primary component of the SGS concept as it establishes gateway as
the center of the semantic IoT architecture. This component provides service level
interoperability for vertical silos of IoT applications keeping physical level implementation
independent of cloud based service architecture. The SGS provides endpoint to services using a
resource interface via REST and publisher/subscriber mechanism. The MQTT and XMPP
protocols are supported via implementing a micro broker in the resource interface. Thus various
services can implement response/request and publisher/subscriber mechanism via the SGS
component to obtain semantically annotated sensor data. The SGS also provides a layer security
via implementing OAuth 2.0 authentication server, which let user decide the private and public
resources. Figure 12 shows the gateway service component of the overall SGS architecture,
which establishes connectivity between the SGS and higher-level cloud based IoT services.
The cloud based IoT services can be used to provide higher-level knowledge abstractions from
the raw sensor data. Various services such as Xively and ThingSpeak provide data analysis and
visualization over the collected sensor data but lack implementation of any semantic standards.
The semantic annotation of the sensor data obtained from the SGS assists the IoT services to
implement analysis and reasoning algorithms. One of the examples of semantic service is the
SemSOS implementation, which models sensor and sensor observations utilizing OGC
standards[16] with a semantic backend. The SemSOS utilize SSN ontology SSN ontology to
model sensors and their observations allowing the implementation of a Semantic reasoner.
Figure 13 shows implementation of SemSOS service connected with multiple SGS gateways via
Internet. The figure also shows extended version of SemSOS implementation, which includes
SSN and domain ontologies to infer sensor description, obtained from SGS implementations.
The extended SemSOS can subscribe to the semantic gateways for specific sensor information
via selected topics.
Figure 13: Higher-level IoT service - SemSOS.
The semantic annotation using SSN standardizes sensor data making it machine interpretable and
thus enabling Machine-to-Machine (M2M) communication. Once data is semantically annotated,
various Semantic Web tools can also enable reasoning and higher-level knowledge discovery
over sensor data. As the SGS implemented OGC schemas before annotating the sensor data with
SSN, the SGS can also provides resource discovery and descriptions/specification for services
such as SemSOS. In summary, the sensor data obtained from the multiple SGS is annotated with
the standard ontologies enabling service level interoperability.
8. Conclusion
Interoperability is one of the major challenges in achieving the vision of Internet of Things. The
SGS provides intelligent solution by integrating Semantic Web technologies with existing sensor
and services standards. The SGS also provides mechanism to integrate popular IoT application
protocol, CoAP and MQTT, to co-exist in a single gateway system. The SGS is integrated with
semantic service such as SemSOS to further elevate interoperability at service level. Such a
semantic IoT infrastructure can better enable realization of applications spanning the physical
world (as observed by IoT), cyberworld (with its rapidly growing data and knowledge about
everything in the world, spanning community created Wikipedia to Linked Open Data and
repositories of ontologies, as well as its ability to collect and interoperate with all forms of data),
and the social world (supporting activities and needs of a person to collective social actions)
[24].
Acknowledgements: We acknowledge collaboration with and inputs from the members of EU
FP7 project CityPulse http://www.ict-citypulse.eu/ .
References
[1] D. Lake, A. Rayes, and M. Morrow, “The Internet of Things,” Internet Protoc. J., vol. 15, no. 3,
Dec. 2012.
[2] C. Bormann, “Coap: An application protocol for billions of tiny internet nodes,” Internet Comput.
IEEE, 2012.
[3] M. Kirsche and R. Klauck, “Unify to bridge gaps: Bringing XMPP into the Internet of Things,”
2012 IEEE Int. Conf. Pervasive Comput. Commun. Work., no. March, pp. 455–458, Mar. 2012.
[4] U. Hunkeler, H. L. Truong, and A. Stanford-Clark, “MQTT-S — A publish/subscribe protocol for
Wireless Sensor Networks,” 2008 3rd Int. Conf. Commun. Syst. Softw. Middlew. Work.
(COMSWARE ’08), pp. 791–798, Jan. 2008.
[5] Robert L. Szabo and K. Farkas, “Publish/Subscribe Communication for Crowd-sourcing Based
Smart City Applications,” in ICTIC - Proceedings in Conference of Informatics and Management
Sciences, 2013, no. 1.
[6] O. Bergmann, K. T. Hillmann, and S. Gerdes, “A CoAP-gateway for smart homes,” 2012 Int.
Conf. Comput. Netw. Commun., pp. 446–450, Jan. 2012.
[7] R. Pillai, S. Elias, S. Shivashankar, and P. Manoj, “A REST Based Design for Web of Things In
Smart Environments Department of Information Technology,” in 2012 2nd IEEE International
Conference on Parallel, Distributed and Grid Computing, 2012, no. i, pp. 337–342.
[8] G. Kortuem, F. Kawsar, D. Fitton, and V. Sundramoorthy, “Smart objects as building blocks for
the Internet of things,” IEEE Internet Comput., vol. 14, no. 1, pp. 44–51, Jan. 2010.
[9] S. Bandyopadhyay and A. Bhattacharyya, “Lightweight Internet protocols for web enablement of
sensors using constrained gateway devices,” 2013 Int. Conf. Comput. Netw. Commun., pp. 334–
340, Jan. 2013.
[10] OpenIoT, “http://www.openiot.eu/.” .
[11] Allseen Alliance, “https://www.allseenalliance.org.” .
[12] IPSO Alliance, “http://www.ipso-alliance.org.” .
[13] G. Percivall, C. Reed, and J. Davidson, “OGC Sensor Web Enablement : Overview And High
Level Architecture,” OGC White Pap., no. December, pp. 1–14, 2007.
[14] K. eds. Lefort, L., Henson, C., and Taylor, “Semantic Sensor Network XG Final Report,” 2011.
[Online]. Available: http://www.w3.org/2005/Incubator/ssn/XGR-ssn/.
[15] M. Compton, P. Barnaghi, L. Bermudez, R. García-Castro, O. Corcho, S. Cox, J. Graybeal, M.
Hauswirth, C. Henson, A. Herzog, V. Huang, K. Janowicz, W. D. Kelsey, D. Le Phuoc, L. Lefort,
M. Leggieri, H. Neuhaus, A. Nikolov, K. Page, A. Passant, A. Sheth, and K. Taylor, “The SSN
ontology of the W3C semantic sensor network incubator group,” Web Semant. Sci. Serv. Agents
World Wide Web, vol. 17, pp. 25–32, Dec. 2012.
[16] C. a. Henson, J. K. Pschorr, A. P. Sheth, and K. Thirunarayan, “SemSOS: Semantic sensor
Observation Service,” 2009 Int. Symp. Collab. Technol. Syst., pp. 44–53, 2009.
[17] A. Sheth, C. Henson, and S. S. Sahoo, “Semantic Sensor Web,” IEEE Internet Comput., vol. 12,
no. 4, pp. 78–83, Jul. 2008.
[18] P. Waher, “XEP-xxxx: Sensor Data Interchange over XMPP.” [Online]. Available:
http://xmpp.org/extensions/inbox/sensor-data.html.
[19] H. Patni, C. Henson, and A. Sheth, “Linked sensor data,” 2010 Int. Symp. Collab. Technol. Syst.,
pp. 362–370, 2010.
[20] M. Deriaz and G. Serugendo, “Semantic service oriented architecture,” Switz. Univ. Geneva, 2004.
[21] A. Haller, J. M. Gomez, and C. Bussler, “Exposing Semantic Web Service principles in SOA to
solve EAI scenarios.”
[22] P. Millard, P. Saint-Andre, and R. Meijer, “XMPP Extension XEP-0060: Publish-Subscribe.”
XMPP Standards Foundation, 12-Jul-2010.
[23] C. Henson, A. Sheth, and K. Thirunarayan, “Semantic Perception: Converting Sensory
Observations to Abstractions,” IEEE Internet Comput., vol. 16, no. 2, pp. 26–34, Mar. 2012.
[24] A. Sheth, P. Anantharam, and C. Henson, “Physical-Cyber-Social Computing: An Early 21st
Century Approach,” IEEE Intell. Syst., vol. 28, no. 1, pp. 78–82, Jan. 2013.
DOI: 10.4018/IJBAN.2020100101
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
﻿
Copyright © 2020, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.
﻿
1
Semantic Annotation of Web of
Things Using Entity Linking
Ismail Nadim, Ibn Tofail University, Faculty of Sciences, Kenitra, Morocco
https://orcid.org/0000-0002-2208-3375
Yassine El Ghayam, SMARTiLab, EMSI Rabat Honoris Universities, Morocco
Abdelalim Sadiq, Ibn Tofail University, Faculty of Sciences, Kenitra, Morocco
https://orcid.org/0000-0003-1478-8807
ABSTRACT
The web of things (WoT) improves syntactic interoperability between internet of things (IoT) devices
by leveraging web standards. However, the lack of a unified WoT data model remains a challenge
for the semantic interoperability. Fortunately, semantic web technologies are taking this challenge
over by offering numerous semantic vocabularies like the semantic sensor networks (SSN) ontology.
Although it enables the semantic interoperability between heterogeneous devices, the manual
annotation hinders the scalability of the WoT. As a result, the automation of the semantic annotation
of WoT devices becomes a prior issue for researchers. This paper proposes a method to improve the
semi-automatic semantic annotation of web of things (WoT) using the entity linking task and the
well-known ontologies, mainly the SSN.
Keywords
Dbpedia, Disambiguation, Internet of Things, IoT, Knowledge Base, Ontology, Probabilistic Model, Sensor, SSN
INTROD UCTION
The Internet of Things (IoT) can be viewed as the extension of the current Internet to more things and
places in the physical world. The efficient connection of these things facilitates the creation of useful
applications and services in numerous domains such as: transport and logistics, health, agriculture
etc.However, the IoT is facing numerous challenges such as the interoperability which means that the
integration of data and services from various devices- on a large scale- is extremely complex and costly.
In order to improve the interoperability between Internet of Things (IoT) devices, the Web of
Things (WoT) publishes the devices capabilities on the Web in form of Web APIs. Indeed, connecting
heterogeneous devices to the web makes the integration across systems and applications much simpler.
This Web of Things vision allows a syntactic interoperability between devices and make easy the
consumption of WoT services. However, the ambiguity of WoT data and the lack of a standardized
and unified machine readable and clear semantics model hinder the semantic interoperability
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
2
(Guinard, Trifa, Mattern, & Wilde, 2011). In addition to this, the WoT provides the interoperability
at only the hardware and communication protocol level and does not add intelligence to the things or
facilitate unambiguous interpretation of their data (De, Zhou, & Moessner, 2017). In contrast, service
description, common practices, standards and discovery mechanisms should be interoperable to allow
interactions between different objects (Elkhodr, Shahrestani, & Cheung, 2017). Thus, the semantic
interoperability is essential to build a scalable WoT network because applications have to easily find
and understand the WoT devices just by using their URLs. To reach this goal, the different WoT
devices have to share - not only a unified syntactic form like Json or Xml- but a unified vocabulary
with clear semantics as well. The process of describing WoT devices with such vocabulary is known
by the semantic annotation.
The Web semantic technologies like RDF and OWL offer a framework to represent rich and
complex knowledge about things, groups of things, and relations between things in a machine
understandable form. These technologies have simplified a lot the sharing of semantic vocabularies
like the vocabulary described by the Semantic Sensor Network (SSN) ontology (Compton et al.,
2012). However, a large domain like the Web of Things needs to be open on a large knowledge from
different domains. As a result, automating the semantic annotation process becomes a common goal
for researchers to keep up the permanent development of WoT knowledge.
The automatic semantic annotation is usually preceded by the famous Entity linking (EL) task.
EL task consists in linking a piece of data called mention from a source document to the entity it
represents in a knowledge base (KB) through three steps. Given a source document, the first step is
the detection of the mentions to be annotated. Once the mentions are defined, the second step consists
in generating a set of candidate entities for each mention. Finally, to be able of selecting the correct
entity of a mention a third step is necessary: the disambiguation. The disambiguation consists in
ranking the discovered candidate sets using some features (Shen, Wang, & Han, 2015) in order to
map each mention to the entity it represents the best in the KB.
In this paper, the authors focus on the disambiguation task. Specifically, they propose a collective
disambiguation approach through a probabilistic graphical model which takes advantage of different
types of features (in particular the semantic relatedness between candidate entities) in order to improve
both the accuracy and the efficiency of the semantic annotation of WoT data. The approach aims to
annotate a WoT table that is to say WoT data stored in form of Web table (header and cells).
The remaining of this paper is organized as follows: Section 2 presents the problem description
and the requirements. Section 3 presents some related works. Section 4 details and discusses the
proposed approach and Section 5 concludes this paper.
PROBLEM DESCRIPTION AND REQUIREMENTS
Within this first section, the authors explains formally the entity linking task and shed light, particularly,
on the importance of the features it uses. Formally, given a text document D, a knowledge base KB
and N mentions M={m1 , m2 ,...,mN }, M⊂ D. The EL task consists in identifying a set of entities
E ={ e1 , e2 ,..., eN }, E ⊂ KB such as: ei represents the referent entity of the mention mi , i∈[1,N].
In general, for a given mention, several candidate entities may be generated when querying the
KB. Fortunately, there are a set of features (statistics) that could be used for the disambiguation task
such as:
• String similarity: indicates how similar is the query mention to the title of the candidate entity.
• Prior Popularity: indicates how “famous” is a candidate entity in the KB.
• Entity Type: indicates the coherence between the mention and the candidate entity types (location,
person, etc..).
• Context: indicates how similar is the contextual texts of the mention and the candidate entity.
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
3
• Semantic coherence: measures the semantic relatedness between the candidate’s entities
The features above can be categorized in three categories: (1) the context-independent features
which rely basically on the surface form of the mention and the candidate entities, (2) the local
context-dependent features which take into consideration the local context in which the mention
appears and (3) the global context-dependent features which means the semantic relatedness between
entities. Many disambiguation approaches have been proposed, as will be mentioned on the related
works section. However, only few initiatives have combined these three types. Two disambiguation
approaches are worth noting here:
• Local disambiguation: this approach ranks the candidate entities using some context-independent
features as well as some local context features. After that, the best ranked entities are mapped to
their corresponding mentions. However, this approach doesn’t consider the interdependencies
between the candidate entities.
• Global or collective disambiguation: considers that the correct disambiguation entities are not only
the most similar to their corresponding mentions but further are the most “coherent” concepts. In
most cases, this approach leverages the local and the global context-dependent features without
considering the context-independent ones.
Accordingly, the collective disambiguation approach can be used to improve the accuracy of the
entity linking task on Web tables. Indeed, considering the global context of the mentions - which means
the semantic relatedness between their candidate entities- may increase the likelihood of choosing the
correct mapping entities, especially because relational data tend to be semantically related. However,
the local approach is still providing a baseline which is very hard to beat (Ratinov, Roth, Downey, &
Anderson, 2011). The combination between these two approaches seems to be a promising solution.
In addition, the context independent features like surface form similarities, entity popularity and
entity type are also significantly important for the EL task, Shen et al. (2015) reported that a naive
candidate ranking method only based on the Web popularity can achieve 71% accuracy. The surface
form similarity and the entity type features are also important since they help to capture the most
probable entities to link the mention while maintaining a small set of candidates. Despite this, the
authors have noted that few initiatives take this type of features into account during the collective
disambiguation. Consequently, the main aim of this paper is to improve the EL task accuracy through
a collective disambiguation method that takes advantage of different types of features. This early
work toward the development of a semantic knowledge base framework is guided by similar works
on EL task and knowledge engineering. In what follows some of these works are stated.
RELATED WORK
The ultime goal behind using the Entity Linking task is to automate the process of the semantic
annotation. This automation should however take into account the choice of the best features to ensure
the accuracy of the task. Besides, it should consider the computation time and the convergence of the
EL task algorithms. In this section, the authors focus on giving some related works.
During the last years, alternative approaches for semantic annotation using the Entity Linking
task and the collective disambiguation were proposed. For intance, Han et al. (2011) have proposed a
global interdependence model to link mentions from text document. The proposed method leveraged
the local context features, then the semantic relation between entities. Similarly, Rong et al. (2016)
have used three features in their graphical model: the local similarities, the semantic relatedness and
the prior popularity of a candidate entity. Although, they have added this context-independent feature
to reinforce the collective disambiguation, the authors have used the Normalized Google Distance
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
4
(Cilibrasi, & Vitanyi, 2007) to measure the semantic coherence just between entities and the remaining
name mentions in the same document and not between each pair entities. This consideration which
can save a large amount of calculation, may affect the final accuracy of the EL task. Ganea et al.
(2016) have conducted a probabilistic approach which consists in learning a conditional probability
model from data and employing approximate probabilistic inference in order to find the maximum
a posteriori (MAP) assignment (Koller, & Friedman, 2009). The authors have not considered any
additional context-independent feature. Ratinov et al. (2011) have conducted both a local and global
disambiguation to Wikipedia articles. The authors have leveraged a relatedness measure to calculate
the semantic relatedness between Wikipedia entities. However, they have not mentioned the use of
the context independent features in their approach.
As far as the tables annotation is concerned, Limaye et al. (2010) have used a probabilistic method
to annotate web table columns and cells values with entities (persons, organizations, locations, etc.).
In addition, they have used the table content (headers and data rows), and also some amount of
textual context around table as a context feature. Recently, Wu et al. (2016) have provided a unified
WoT Knowledge Base construction framework, and used it to annotate two types of data: plain and
formatted. They have leveraged semi-automatic annotation to annotate web tables. The EL framework
they have proposed, annotates entities, types and relations using features from (Mulwad, Finin, Syed,
& Joshi, 2010). The authors (Mulwad et al., 2010) have used a probabilistic graphical model to manage
a collective disambiguation. To infer the best disambiguation entities, they have finally adopted an
iterative message passing algorithm from (Mulwad, Finin, & Joshi, 2013).
According the aforementioned related works, a categorization and reorganization of the features
used by the entity task seems necessary to take the most of them. In addition to this, the semantic
annotation of a formatted document may help to improve the task accuracy. Therefore, the authors
assume that the WoT data to be annotated are presentable as a two-dimensional table.
PROPOSED APPROACH
In this section, the authors present their collective disambiguation approach. Firstly, the approach
combines both local context-dependent and context-independent features in a local disambiguation.
Secondly, the outputs of this local disambiguation is combined with a semantic relatedness measures
to perform a global disambiguation. The approach is applied to a simple WoT table modeled as a
probabilistic graph. An inference method is finally used to select the mapping entities leveraging a
loopy message passing algorithm.
Schema Annotation
The WoT devices data can be represented as WoT tables. The approach proposes a manual annotation
of the header (schema or keys) and an automatic annotation of the cells (values).
The manual annotation of the header is based on two assumptions: (1) the manual annotation is
not anymore a tedious task when the number of the data to be annotated is reasonable (2) the manual
annotation is safer when the data to be annotated are used as an important context to annotate other
data. For example: the location (place), the type (sensor, actuator), the property observed or acts on,
the unit of measurement, the value of properties for a given WoT device are important contextual
data. The complete manual annotation of these data may guarantee a well construction of the KB, and
helps in search and mash ups (Mulwad et al., 2010). For the moment, the first step is to determine
the semantic vocabulary to use for annotating WoT devices.
Numerous conceptual models have been proposed to model devices using generic vocabularies,
but no standard is yet defined: Hachey et al. (2013) grouped high-level concepts and their relations
that describes three examples of real devices. CG1: Actuator, Sensor, System, CG2: Global and Local
Coordinates, CG3: Communication Endpoint, CG4: Observations, Features of Interest, Units, and
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
5
Dimensions, CG5: Vendor, Version, Deployment Time. Mulwad et al. (2010) formalized that typical
semantic triples in IoT scenarios as: Sensor- observes Observation, Observation-Generates-Event,
Actuator-Triggers-Action, Action-Changes-Observation (State), Object Locates-Location and Ownerowns-
Object. Guinard et al. (2011) proposed the web of things model which is a conceptual model
of a web Thing that can describe the resources of a web Thing using a set of well-known concepts.
The authors specified four resources to describe a web thing: Model, Properties, Actions and Things.
As can be noted, the ontology modelling efforts have largely concentrated on the WoT objects
like sensors while other important elements like actuators, produced data, services, localization and
domain ontologies should require also the same attention. Besides, the existence of different ontologies
modelling the same knowledge domain like units of measurement or localization require alignment
techniques to determine the correspondences between the concepts in these ontologies. For simplicity
purposes, the authors propose a four components to model a WoT device.
In general, the key elements of a WoT device can be formalized as follows: System which is
The WoT device and its meta-data, Sensors which are the sensors of the system and its meta-data
and Actuators which represent the actuators of the system and its meta-data. And service which is
the service offered by the device.
The components in Figure 1 summarizes the key concept of WoT devices:
• System: System is used here to represent the WoT device which may have subsystems mainly
sensors and actuators. A system has several meta-data (name, description, manufacturer, owner
…) which can be considered as a product meta-data from schema.org/Product. A system has also
a location which indicates simply its deployment place or its Geo-coordinates.
• Sensor: is a subsystem of a System that can observes some property.
• Actuator: is a subsystem of a System that can acts on some property.
• Service: the service offered by the device. The service allows the control and the monitoring of
the devices by capturing the sensing data or submitting actuating actions.
Figure 1. Key concepts of a WoT device
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
6
The manual annotation can be performed using a predefined mapping file which contains the
mapping between the different concepts to annotate and their corresponding concepts from ontologies
(SSN, SAN, Schema.org...). The data of these four elements can be stored in form of WoT tables
(columns and cells). An example of such table is shown in Figure 2.
After annotating the WoT schema (table header) manually with the appropriate entities and
properties from ontologies (e.g. “Location” which means the location of the device is annotated
manally by the entity type “http://dbpedia.org/ontology/Place”). The next step is to annotate the
content of the cells. As already mentioned, the authors use the Entity Linking task to automate this
process because of the huge number of WoT data contained in the WoT tables. For this end, they first
query the knowledge base (Dbpedia, …) to generate initial candidate entities sets. After that, they
rank in a local disambiguation the generated sets using some features. Finally, they use - through a
global disambiguation - a probabilistic graphical model to infer the best combinations of the candidate
entities. In what follows, these two disambiguation methods are described.
Local Disambiguation
The search or the candidate entity generation is the process of generating a set of candidate KB entities
for a mention. According to Hachey et al. (2013), this process is as important as the disambiguation
task since it should capture the most probable entities to link the mention while maintaining a small
set of candidates.
To improve the search task, the authors generate the initial sets of candidate entities for each cell
mention by performing a string comparison between the surface form of the entity mention and the
Figure 2. A WoT device in form of WoT table
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
7
name of the entity existing in the KB. Then, by using the table header which is already annotated as
context when querying the KB.
The example bellow (Table 1) shows the result of a Sparql query against Dbpedia to generate
20 top candidate entities to the mention “Rabat”. The example uses the surface form, the entity type
“Place” and the entity popularity to have better results.
The use of these three features is explained below:
• The surface form: the individuals of the knowledge base Dbpedia which contain the string
“Rabat” will be chosen.
• The entity type: the individuals which have the entity type “http://dbpedia.org/ontology/Place”
will be privilegied.
• The entity popularity: the filtred individuals and which are the best ranked -in terms of presence
in the knowledge base- will be chosen. For example, the candidate “http://dbpedia.org/resource/
Rabat” having the rank 41.0279 has more chance to be the reference entity of the mention “Rabat”
than the candidate “http://dbpedia.org/resource/Victoria,_Gozo” which has only the rank 4.6521.
Once the candidate entities set is generated for each mention, these initial lists are ranked using
the following features:
• By measuring the surface form similarity between the mention and the entity, using features
from (Mulwad et al., 2010).
• By measuring the context similarity between the mention and the candidate entities. For that, a
relevant context is created for the mention from the text surrounding it, and from the description
of the column headers. The context of each candidate entity is extracted from its text description.
Then, the bag of words model can be used to represent the contexts as vectors. Finally, the cosine
similarity (Equation 1) is used to measure the similarity between these vectors.
cosine(m,e) =
m e
m e
*
*
(1)
Table 1. Example of Sparql query and its result
PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>﻿
PREFIX dbo:<http://dbpedia.org/ontology/>﻿
PREFIX vrank:<http://purl.org/voc/vrank#>﻿
SELECT ?p ?c ﻿
FROM <http://dbpedia.org> ﻿
FROM <http://people.aifb.kit.edu/ath/#DBpedia_PageRank> ﻿
WHERE {﻿
?p rdf:type dbo:Place.﻿
?p vrank:hasRank/vrank:rankValue ?c.﻿
?p rdfs:label ?x .﻿
?x bif:contains “(Rabat)” .﻿
Filter regex (str(?p),”resource”).﻿
}﻿
ORDER BY DESC(?c) LIMIT 20
http://dbpedia.org/resource/Rabat 41.0279﻿
http://dbpedia.org/resource/Rabat 41.0279﻿
http://dbpedia.org/resource/Rabat 41.0279﻿
http://dbpedia.org/resource/Rabat 41.0279﻿
http://dbpedia.org/resource/Rabat 41.0279﻿
http://dbpedia.org/resource/Rabat 41.0279﻿
http://dbpedia.org/resource/Rabat 41.0279﻿
http://dbpedia.org/resource/Rabat 41.0279﻿
http://dbpedia.org/resource/Victoria,_Gozo 4.6521﻿
http://dbpedia.org/resource/Victoria,_Gozo 4.6521﻿
http://dbpedia.org/resource/Victoria,_Gozo 4.6521﻿
http://dbpedia.org/resource/Rabat,_Malta 4.23087﻿
….
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
8
where the mention m and the entity e are represented as vectors of their context. Alternatively, some
frameworks can be used like Word2Vec which is able to guess the similarity between two words
based on their contexts, or Wiki2Vec that generates vectors for DBpedia entities via Word2Vec and
Wikipedia Dumps.
• By considering the popularity of each entity for example the entity PageRank.
These features are computed for each candidate entity and a SVM (Support vector machine)
classifier is used to rank the candidate entities for a given mention. The final result of the local
disambiguation is a set of ranked candidate entities. The different steps of this process are summarized
in the algorithm (Table 2) below:
Global Disambiguation
As mentioned before, the main goal of the local disambiguation process is to take the most of the
context-independent features as well as the local context ones in order to get the most relevant sets
of candidate entities. However, only one candidate entity should be chosen in each candidate set.
Consequently an inference process should be done which is the global disambiguation.
The author’s approach consists in using a global disambiguation through a probabilistic graphical
model (Koller et al., 2009). The idea behind using a collective disambiguation is that the entities in
a given row or column of a table tend to be related. This relation can be represented mathematically
through a probabilistic graphical models. For this reason, the authors represent the table cells as a
Markov Network Graph (MNG) (Koller et al., 2009) such as the cells mentions represent the variable
nodes and the relatedness between them represent the graph edges. To capture the dependency between
a variable node (circle) and its neighbors a factor node (square) ψ is defined.
Table 2. Local disambiguation algorithm
Algorithm 1: Local disambiguation
Input: M= m ,m ...,m the KB 1 2 N { , },
Output: Indexed and ranked entities list L .
1: Let SVM be a SVM classifier.﻿
2: For each m M do
3: Query KB to get an initial, not null, candidate entities set Im for the mention m.
4: For each I ∈ Im do
5: Create a feature vector VI .
6: Calculate and store features (surface form, popularity, context similarity etc.) in VI .
7: Input VI to SVM.
8: End For﻿
9: GetLm : the SVM output list.
10: AddLm to L .
11: End For
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
9
In Figure 3, the circles represent the variables and the squares represent the factor nodes of
the MNG.
• ψ estimation
The ψ function can be defined as the product of two functions: R(a,b) representing the score
of two candidate entities a and b in the local disambiguation, and SR(a,b) measuring the semantic
relatedness between a and b.
• R(a,b): as previously seen, the output of the local disambiguation algorithm (Table 2) is a list
of indexed and ranked entities.
Let Ra and Rb be the respective rank scores of the candidate entities a and b. The authors define
the rank score of a and b as the average of their rank scores: R(a,b)=
Ra b +R
2
.
• SR(a,b): The Milne and Witten (equation 2) (Milne et al., 2008) equation is leveraged to measure
the semantic relatedness.
SR(a,b)=1-
log max log
log log min
A B A B
W A B
,
,
( ( ))− (  )
( )− ( ( )) (2)
where a and b are two Wikipedia (or Dbpedia) entities, A and B are the sets of all entities that link to
a and b in Wikipedia (or Dbpedia) respectively, and W is the entire Wikipedia (or Dbpedia) entities.
Consequently, the function ψ can be defined as follows: ψ(a,b)= R(a,b) x SR(a,b)
And the set of mapping entities E can be determined by equation 3:
Figure 3. WoT table represented as a Factor Graph
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
10
j=1,
,e
j i
N
i j e

 ( ), i∈ [1, N] (3)
• Graph inference
After defining the aim of the graph (equation 3), the problem to face is a computation one. Usually,
to face the inference problem of high connected graphs the message passing algorithm - which is an
approximate algorithm for graphs with loops -is used. The approach adopts a variation of this algorithm
used by Mulwad et al. (2013) to avoid the pre-computation of the probability distribution tables
which is costly. A brief description of the global disambiguation algorithm is given below (Table 3).
Table 3. Global disambiguation algorithm
Algorithm 2: Global disambiguation
Input: The list L (Output of Algorithm 1), A maximum of iterations MaxIter, An agreement threshold T, A factor graph
G(X,F) where:X x x xN = { } 1 2 , ,..., is the set of variable nodes and F is the set of factor nodes.
Output: E e e eN = { } 1 2 , ,...,
# Initialize the variable nodes of the graph with candidate entities from the list L: ei,R , i is the mention index, R is the
first ranked candidate score and R-1 is the second ranked candidate score etc.﻿
1. for each x X i  do x e i = i,R end for
2. converge = False, count=0﻿
3. While (converge = False and count < MaxIter) do﻿
4. for each x X i  do
xi sends its current value to all the factors is connected to.
5. end for﻿
6. for all the Factors nodes do﻿
7. If  x T i j ( ,x )  Send a no-change message to nodes xi and xj .
8. Else Send a change message to these nodes.﻿
end for﻿
9. converge = True﻿
10. for each x X i  do
11. Let Msg be the set of messages received by xi .
12. If all m ∈ Msg are no-change do nothing﻿
13. Else x e i = i,R−1 , converge = False
14. end for﻿
15. count = count +1﻿
16. end While﻿
17. If (converge = True) ﻿
18. for each i   N



1, do e x i i = end for
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
11
First the variable nodes of the graph are initialized with the top ranked candidate entities from
the list L. After that, the variable nodes in the graph send their current assignment to the factor nodes
they are connected to. Once the factors receive the values of their neighboring variable nodes, they
calculate the agreement between the received values using the function ψ. To decide if two values
agree or not the result of the function ψ is compared to a threshold T. the value of T can be adjusted
during the implementation of the approach (the higher this threshold is, the better the results after
convergence are). If the value of ψ is higher than the threshold T the variable nodes values are accepted
else, they are rejected and the variables receive a change message to update their assignments. The
algorithm converges when no variable node receives a change message.
DISCUSSION
The authors approach combines both local context-dependent and context-independent features in a
local disambiguation. After that, the outputs of this local disambiguation is combined with a semantic
relatedness measures. An inference method is finally used to select the mapping entities leveraging a
loopy message passing algorithm. The main advantage of this three steps approach is on one hand to
ensure the quality of candidate entities. Effectively, using different features in to generate and rank the
sets of candidate entities increase the probability to get better Entity Linking final result. In addition
to this, the number of the candidate entities can be reduced to a reasonable number (e.g. 20 entries)
without impacting the results quality. Moreover, this small number will decrease the computation
task. However, some remarks are worth to mention here: (1) While the authors justified the use of the
SVM classifier by the small number of entries (just dozens of entries.), the SVM classifier has proven
the ability to handle large dimensions (i.e. high variables). (2) On the other hand, the approach allows
the use of the relation between the cells in a table. For this end, the inference algorithm uses two
thresholds which are the maximum of iterations and the convergence thresholds that must be given as
inputs. While the first threshold can be chosen quit high, the second threshold should be well quantified
because it may affect the convergence of the algorithm. For these remarks, the implementation of the
approach is necessary to validate its efficiency. Moreover, the implementation should be preceded
by a bench-marking study concerning: text processing tools, data Models, knowledge bases, training
data-sets, ranking algorithms, graphical models, test data-sets, baselines, etc. This prior study will
pave the path to an experiment study and a comparative evaluation of the approach.
CONCLUSION
Among the factors that improve significantly the entity linking accuracy, the authors have shed the light
on the involvement of different types of features which are: the context-independent, the local contextdependent
and the global context-dependent features. In this paper, they have proposed a method to
combine these three types of features. First, the authors have conducted a local disambiguation in
which they have reduced the contribution of the used features to a simple ranking score. After that the
authors have combined this ranking score with a semantic relatedness measure in order to perform a
global disambiguation through a probabilistic graphical model. Finally, they have proposed the use
of a loopy message passing algorithm to infer the mapping entities.
This work is a first step towards the construction of a semantic knowledge base framework, the
future step is to perform an experiment study and a comparative evaluation to prove the validity of
the approach.
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
12
REFERENCES
Cilibrasi, R. L., & Vitanyi, P. M. (2007). The google similarity distance. IEEE Transactions on Knowledge and
Data Engineering, 19(3), 370–383. doi:10.1109/TKDE.2007.48
Compton, M., Barnaghi, P., Bermudez, L., Garcca-Castro, R., Corcho, O., Cox, S., … Taylor, K. (2012). The
SSN Ontology of the W3C Semantic Sensor Network Incubator Group. SSRN Electronic Journal.
De, S., Zhou, Y., & Moessner, K. (2017). Ontologies and context modeling for the Web of Things. In Managing
the Web of Things (pp. 3–36). Morgan Kaufmann. doi:10.1016/B978-0-12-809764-9.00002-0
Elkhodr, M., Shahrestani, S., & Cheung, H. (2017). Internet of things research challenges. In Security solutions
for hyperconnectivity and the internet of things (pp. 13–36). IGI Global. doi:10.4018/978-1-5225-0741-3.ch002
Ganea, O.-E., Ganea, M., Lucchi, A., Eickhoff, C., & Hofmann, T. (2016). Probabilistic Bag-Of-Hyperlinks
Model for Entity Linking. Proceedings of the 25th International Conference on World Wide Web - WWW ’16.
doi:10.1145/2872427.2882988
Guinard, D., Trifa, V., Mattern, F., & Wilde, E. (2011). From the Internet of Things to the Web of Things:
Resource-oriented Architecture and Best Practices. Architecting the Internet of Things, 97–129.
Hachey, B., Radford, W., Nothman, J., Honnibal, M., & Curran, J. R. (2013). Evaluating entity linking with
Wikipedia. Artificial Intelligence, 194, 130–150. doi:10.1016/j.artint.2012.04.005
Han, X., Sun, L., & Zhao, J. (2011). Collective entity linking in web text. Proceedings of the 34th International
ACM SIGIR Conference on Research and Development in Information - SIGIR ’11. doi:10.1145/2009916.2010019
Kolchin, M., Klimov, N., Andreev, A., Shilin, I., Garayzuev, D., Mouromtsev, D., & Zakoldaev, D. (2015,
September). Ontologies for Web of things: a pragmatic review. In International Conference on Knowledge
Engineering and the Semantic Web (pp. 102-116). Springer International Publishing. doi:10.1007/978-3-319-
24543-0_8
Koller, D., & Friedman, N. (2009). Probabilistic graphical models: principles and techniques. MIT Press.
Limaye, G., Sarawagi, S., & Chakrabarti, S. (2010). Annotating and searching web tables using entities, types
and relationships. Proceedings of the VLDB Endowment International Conference on Very Large Data Bases,
3(1-2), 1338–1347. doi:10.14778/1920841.1921005
Mulwad, V., Finin, T., & Joshi, A. (2013, October). Semantic message passing for generating linked data from
tables. In International Semantic Web Conference (pp. 363-378). Springer. doi:10.1007/978-3-642-41335-3_23
Mulwad, V., Finin, T., Syed, Z., & Joshi, A. (2010, November). Using linked data to interpret tables. In Proceedings
of the First International Conference on Consuming Linked Data-Volume 665 (pp. 109-120). Academic Press.
Ratinov, L., Roth, D., Downey, D., & Anderson, M. (2011, June). Local and global algorithms for disambiguation
to wikipedia. In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics:
Human Language Technologies-Volume 1 (pp. 1375-1384). Association for Computational Linguistics.
Rong, S., & Iwaihara, M. (2016). A collective approach to ranking entities for mentions. 2016 IEEE/ACIS 15th
International Conference on Computer and Information Science (ICIS).
Shen, W., Wang, J., & Han, J. (2015). Entity Linking with a Knowledge Base: Issues, Techniques, and Solutions.
IEEE Transactions on Knowledge and Data Engineering, 27(2), 443–460. doi:10.1109/TKDE.2014.2327028
Wu, Z., Xu, Y., Zhang, C., Yang, Y., & Ji, Y. (2016). Towards Semantic Web of Things: From Manual to
Semi-automatic Semantic Annotation on Web of Things. Lecture Notes in Computer Science, 9784, 295–308.
doi:10.1007/978-3-319-42553-5_25
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
13
Ismail Nadim obtained his Bachelor’s Degree on mathematical sciences in 2007 from Sijilmassa High School,
Errachidia, Morocco. He is an engineer in computer sciences from the National School of Mineral Industry of Rabat,
Morocco. He graduated in 2013 and continues his studies in the doctoral cycle at the Ibn Toufail University of
Kénitra. He is a professor of Computer Sciences in Engineering School (EMSI-Rabat) where he teaches relational
databases and programming. His domain of study is Web semantic, Internet of Things, Web of Things, data
sciences as well as artificial intelligence. Ismail is also a senior SQL Server and Oracle database administrator.
Yassine El Ghayam currently works at the SMARTiLab, EMSI-RABAT. Yassine did research in Software Engineering
and Artificial Intelligence. He obtained a PhD degree in 2011 in the subject of Teleconferencing systems in a mobile
environment, from National School of Computer Science and Systems Analysis (ENSIAS) of Rabat, Morocco.
He is a professor of Computer Sciences in Engineering School (EMSI-Rabat) where he teaches programming,
databases, information systems modelisation, etc. His domain of study is Web semantic, Internet of Things, Web
of Things, data sciences as well as artificial intelligence. Yassine has numerous publications and contributions,
namely in intelligent systems and Internet of Things.
Abdelalim Sadiq was born in Errachidia, Morocco. He received a B.S in software engineering from Sciences and
technologies Faculty Moulay Ismail University - Errachidia in 1999, and DESA degree in computer network and
telecommunication from National School of Computer Science and Systems Analysis (ENSIAS) Mohammed V
University - Rabat Morocco in 2002 and Ph.D. degree in Computer Science from ENSIAS, Mohammed V University
- Rabat, Morocco, in 2007. He is currently an Associate Professor in computer science Department of Sciences
Faculty, Ibn Tofail University - Kenitra, Morocco and Team Leader Information System and Multimedia (SIM). His
research interests include multimedia information retrieval and processing, sentiments analysis, IoT and data
science. He has served as a reviewer for several international conferences and journals.
Semi-automatic Semantic Annotation of Images 551
Annotated
Images
Intelligent Annotation Tool
USER
Raw Images
Keywords Schema Ontology
Fig. 1. Intelligent image annotation tool: conceptual diagram
metadata schemas and structures for very large media databases. Our research
addresses this topic and suggests an intelligent, user-assisted, semi-automatic
solution for annotating (potentially huge) repositories of raw images, and storing
the result (e.g., in XML-formatted RDF-schema) in an ‘annotated image’
repository (Figure 1). The resulting annotated image archive would then be
available for queries by visual content (giving an image as an example) and/or
keywords as well as for data exchange with other Web-based applications.
In addition to its primary goals – consistent, cost-effective, fast, intelligent
annotation of visual data – the method proposed in this paper also aims at
improving the performance of subsequent image query and retrieval operations
on the annotated image repository. The image retrieval problem has not been
successfully solved yet, despite almost a decade of work [24] and dozens of research
prototypes and commercial products developed as a result. The use of
keywords only does not provide satisfactory results (as anyone who has used the
‘Images’ option in GoogleTM [8] knows), mostly because the correlation between
the keywords used in the query and the desired image file has to be established
by unreliable, vague, not always available metadata, in the form of surrounding
text and/or HTML tags, such as the contents of the alt attribute of the img element
in the HTML document. Pure content-based image retrieval (CBIR) also
falls short of providing an adequate solution to the problem, mostly due to the
limitations of current computer vision techniques in bridging the gap between
visual features and their semantic meaning. There is a clear need to cleverly
combine the two in order to yield a better solution, and several researchers (e.g.,
[21]) have been working on techniques that combine textual and visual cues to
improve retrieval results.
Read our thank you message
€ 9.2M
✕
Open thank you message
Internet of things
From Wikipedia, the free encyclopedia
Jump to navigationJump to search
The Internet of things (IoT) describes physical objects (or groups of such objects) that are embedded with sensors, processing ability, software, and other technologies that connect and exchange data with other devices and systems over the Internet or other communications networks.[1][2][3][4]

The field has evolved due to the convergence of multiple technologies, including ubiquitous computing, commodity sensors, increasingly powerful embedded systems, and machine learning.[1] Traditional fields of embedded systems, wireless sensor networks, control systems, automation (including home and building automation), independently and collectively enable the Internet of things. In the consumer market, IoT technology is most synonymous with products pertaining to the concept of the "smart home", including devices and appliances (such as lighting fixtures, thermostats, home security systems and cameras, and other home appliances) that support one or more common ecosystems, and can be controlled via devices associated with that ecosystem, such as smartphones and smart speakers. The IoT can also be used in healthcare systems.[5]

There are a number of concerns about the risks in the growth of IoT technologies and products, especially in the areas of privacy and security, and consequently, industry and governmental moves to address these concerns have begun, including the development of international and local standards, guidelines, and regulatory frameworks.[6]


Contents
1	History
2	Applications
2.1	Consumer applications
2.1.1	Smart home
2.1.2	Elder care
2.2	Organizational applications
2.2.1	Medical and healthcare
2.2.2	Transportation
2.2.3	V2X communications
2.2.4	Building and home automation
2.3	Industrial applications
2.3.1	Manufacturing
2.3.2	Agriculture
2.3.3	Maritime
2.4	Infrastructure applications
2.4.1	Metropolitan scale deployments
2.4.2	Energy management
2.4.3	Environmental monitoring
2.5	Military applications
2.5.1	Internet of Battlefield Things
2.5.2	Ocean of Things
2.6	Product digitalization
3	Trends and characteristics
3.1	Intelligence
3.2	Architecture
3.2.1	Network architecture
3.2.1.1	Decentralized IoT
3.3	Complexity
3.4	Size considerations
3.5	Space considerations
3.6	A solution to "basket of remotes"
3.7	Social Internet of things
3.7.1	Social Network for IoT Devices (Not Human)
3.7.2	How SIoT different from IoT?
3.7.3	How SIoT Works?
3.7.4	Social IoT Examples
3.7.5	Social IoT Challenges
4	Enabling technologies for IoT
4.1	Addressability
4.2	Application Layer
4.3	Short-range wireless
4.4	Medium-range wireless
4.5	Long-range wireless
4.6	Wired
4.7	Standards and standards organizations
5	Politics and civic engagement
6	Government regulation on IoT
7	Criticism, problems and controversies
7.1	Platform fragmentation
7.2	Privacy, autonomy, and control
7.3	Data storage
7.4	Security
7.5	Safety
7.6	Design
7.7	Environmental sustainability impact
7.8	Intentional obsolescence of devices
7.9	Confusing terminology
8	IoT adoption barriers
8.1	Lack of interoperability and unclear value propositions
8.2	Privacy and security concerns
8.3	Traditional governance structure
8.4	Business planning and project management
9	See also
10	References
11	Bibliography
History
The main concept of a network of smart devices was discussed as early as 1982, with a modified Coca-Cola vending machine at Carnegie Mellon University becoming the first ARPANET-connected appliance,[7] able to report its inventory and whether newly loaded drinks were cold or not.[8] Mark Weiser's 1991 paper on ubiquitous computing, "The Computer of the 21st Century", as well as academic venues such as UbiComp and PerCom produced the contemporary vision of the IOT.[9][10] In 1994, Reza Raji described the concept in IEEE Spectrum as "[moving] small packets of data to a large set of nodes, so as to integrate and automate everything from home appliances to entire factories".[11] Between 1993 and 1997, several companies proposed solutions like Microsoft's at Work or Novell's NEST. The field gained momentum when Bill Joy envisioned device-to-device communication as a part of his "Six Webs" framework, presented at the World Economic Forum at Davos in 1999.[12]

The concept of the "Internet of things" and the term itself, first appeared in a speech by Peter T. Lewis, to the Congressional Black Caucus Foundation 15th Annual Legislative Weekend in Washington, D.C, published in September 1985.[13] According to Lewis, "The Internet of Things, or IoT, is the integration of people, processes and technology with connectable devices and sensors to enable remote monitoring, status, manipulation and evaluation of trends of such devices."

The term "Internet of things" was coined independently by Kevin Ashton of Procter & Gamble, later MIT's Auto-ID Center, in 1999,[14] though he prefers the phrase "Internet for things".[15] At that point, he viewed radio-frequency identification (RFID) as essential to the Internet of things,[16] which would allow computers to manage all individual things.[17][18][19] The main theme of the Internet of things is to embed short-range mobile transceivers in various gadgets and daily necessities to enable new forms of communication between people and things, and between things themselves.[20]

Defining the Internet of things as "simply the point in time when more 'things or objects' were connected to the Internet than people", Cisco Systems estimated that the IoT was "born" between 2008 and 2009, with the things/people ratio growing from 0.08 in 2003 to 1.84 in 2010.[21]

Applications
The extensive set of applications for IoT devices[22] is often divided into consumer, commercial, industrial, and infrastructure spaces.[23][24]

Consumer applications
A growing portion of IoT devices are created for consumer use, including connected vehicles, home automation, wearable technology, connected health, and appliances with remote monitoring capabilities.[25]

Smart home
IoT devices are a part of the larger concept of home automation, which can include lighting, heating and air conditioning, media and security systems and camera systems.[26][27] Long-term benefits could include energy savings by automatically ensuring lights and electronics are turned off or by making the residents in the home aware of usage.[28]


A smart toilet seat that measures blood pressure, weight, pulse and oxygen levels.
A smart home or automated home could be based on a platform or hubs that control smart devices and appliances.[29] For instance, using Apple's HomeKit, manufacturers can have their home products and accessories controlled by an application in iOS devices such as the iPhone and the Apple Watch.[30][31] This could be a dedicated app or iOS native applications such as Siri.[32] This can be demonstrated in the case of Lenovo's Smart Home Essentials, which is a line of smart home devices that are controlled through Apple's Home app or Siri without the need for a Wi-Fi bridge.[32] There are also dedicated smart home hubs that are offered as standalone platforms to connect different smart home products and these include the Amazon Echo, Google Home, Apple's HomePod, and Samsung's SmartThings Hub.[33] In addition to the commercial systems, there are many non-proprietary, open source ecosystems; including Home Assistant, OpenHAB and Domoticz.[34][35]

Elder care
One key application of a smart home is to provide assistance for those with disabilities and elderly individuals. These home systems use assistive technology to accommodate an owner's specific disabilities.[36] Voice control can assist users with sight and mobility limitations while alert systems can be connected directly to cochlear implants worn by hearing-impaired users.[37] They can also be equipped with additional safety features. These features can include sensors that monitor for medical emergencies such as falls or seizures.[38] Smart home technology applied in this way can provide users with more freedom and a higher quality of life.[36]

The term "Enterprise IoT" refers to devices used in business and corporate settings. By 2019, it is estimated that the EIoT will account for 9.1 billion devices.[23]

Organizational applications
Medical and healthcare
The Internet of Medical Things (IoMT) is an application of the IoT for medical and health related purposes, data collection and analysis for research, and monitoring.[39][40][41][42][43] The IoMT has been referenced as "Smart Healthcare",[44] as the technology for creating a digitized healthcare system, connecting available medical resources and healthcare services.[45][46]

IoT devices can be used to enable remote health monitoring and emergency notification systems. These health monitoring devices can range from blood pressure and heart rate monitors to advanced devices capable of monitoring specialized implants, such as pacemakers, Fitbit electronic wristbands, or advanced hearing aids.[47] Some hospitals have begun implementing "smart beds" that can detect when they are occupied and when a patient is attempting to get up. It can also adjust itself to ensure appropriate pressure and support is applied to the patient without the manual interaction of nurses.[39] A 2015 Goldman Sachs report indicated that healthcare IoT devices "can save the United States more than $300 billion in annual healthcare expenditures by increasing revenue and decreasing cost."[48] Moreover, the use of mobile devices to support medical follow-up led to the creation of 'm-health', used analyzed health statistics."[49]

Specialized sensors can also be equipped within living spaces to monitor the health and general well-being of senior citizens, while also ensuring that proper treatment is being administered and assisting people to regain lost mobility via therapy as well.[50] These sensors create a network of intelligent sensors that are able to collect, process, transfer, and analyze valuable information in different environments, such as connecting in-home monitoring devices to hospital-based systems.[44] Other consumer devices to encourage healthy living, such as connected scales or wearable heart monitors, are also a possibility with the IoT.[51] End-to-end health monitoring IoT platforms are also available for antenatal and chronic patients, helping one manage health vitals and recurring medication requirements.[52]

Advances in plastic and fabric electronics fabrication methods have enabled ultra-low cost, use-and-throw IoMT sensors. These sensors, along with the required RFID electronics, can be fabricated on paper or e-textiles for wireless powered disposable sensing devices.[53] Applications have been established for point-of-care medical diagnostics, where portability and low system-complexity is essential.[54]

As of 2018 IoMT was not only being applied in the clinical laboratory industry,[41] but also in the healthcare and health insurance industries. IoMT in the healthcare industry is now permitting doctors, patients, and others, such as guardians of patients, nurses, families, and similar, to be part of a system, where patient records are saved in a database, allowing doctors and the rest of the medical staff to have access to patient information.[55] Moreover, IoT-based systems are patient-centered, which involves being flexible to the patient's medical conditions.[citation needed] IoMT in the insurance industry provides access to better and new types of dynamic information. This includes sensor-based solutions such as biosensors, wearables, connected health devices, and mobile apps to track customer behavior. This can lead to more accurate underwriting and new pricing models.[56]

The application of the IoT in healthcare plays a fundamental role in managing chronic diseases and in disease prevention and control. Remote monitoring is made possible through the connection of powerful wireless solutions. The connectivity enables health practitioners to capture patient's data and applying complex algorithms in health data analysis.[57]

Transportation

Digital variable speed-limit sign
The IoT can assist in the integration of communications, control, and information processing across various transportation systems. Application of the IoT extends to all aspects of transportation systems (i.e. the vehicle,[58] the infrastructure, and the driver or user). Dynamic interaction between these components of a transport system enables inter- and intra-vehicular communication,[59] smart traffic control, smart parking, electronic toll collection systems, logistics and fleet management, vehicle control, safety, and road assistance.[47][60]

V2X communications
Main article: V2X
In vehicular communication systems, vehicle-to-everything communication (V2X), consists of three main components: vehicle to vehicle communication (V2V), vehicle to infrastructure communication (V2I) and vehicle to pedestrian communications (V2P). V2X is the first step to autonomous driving and connected road infrastructure.[citation needed]

Building and home automation
IoT devices can be used to monitor and control the mechanical, electrical and electronic systems used in various types of buildings (e.g., public and private, industrial, institutions, or residential)[47] in home automation and building automation systems. In this context, three main areas are being covered in literature:[61]

The integration of the Internet with building energy management systems in order to create energy-efficient and IOT-driven "smart buildings".[61]
The possible means of real-time monitoring for reducing energy consumption[28] and monitoring occupant behaviors.[61]
The integration of smart devices in the built environment and how they might be used in future applications.[61]
Industrial applications
Main article: Industrial internet of things
Also known as IIoT, industrial IoT devices acquire and analyze data from connected equipment, operational technology (OT), locations, and people. Combined with operational technology (OT) monitoring devices, IIoT helps regulate and monitor industrial systems. Also, the same implementation can be carried out for automated record updates of asset placement in industrial storage units as the size of the assets can vary from a small screw to the whole motor spare part, and misplacement of such assets can cause a percentile loss of manpower time and money.

Manufacturing
The IoT can connect various manufacturing devices equipped with sensing, identification, processing, communication, actuation, and networking capabilities.[62] Network control and management of manufacturing equipment, asset and situation management, or manufacturing process control allow IoT to be used for industrial applications and smart manufacturing.[63] IoT intelligent systems enable rapid manufacturing and optimization of new products, and rapid response to product demands.[47]

Digital control systems to automate process controls, operator tools and service information systems to optimize plant safety and security are within the purview of the IIoT.[64] IoT can also be applied to asset management via predictive maintenance, statistical evaluation, and measurements to maximize reliability.[65] Industrial management systems can be integrated with smart grids, enabling energy optimization. Measurements, automated controls, plant optimization, health and safety management, and other functions are provided by networked sensors.[47]

In addition to general manufacturing, IoT is also used for processes in the industrialization of construction.[66]

Agriculture
There are numerous IoT applications in farming[67] such as collecting data on temperature, rainfall, humidity, wind speed, pest infestation, and soil content. This data can be used to automate farming techniques, take informed decisions to improve quality and quantity, minimize risk and waste, and reduce the effort required to manage crops. For example, farmers can now monitor soil temperature and moisture from afar, and even apply IoT-acquired data to precision fertilization programs.[68] The overall goal is that data from sensors, coupled with the farmer's knowledge and intuition about his or her farm, can help increase farm productivity, and also help reduce costs.

In August 2018, Toyota Tsusho began a partnership with Microsoft to create fish farming tools using the Microsoft Azure application suite for IoT technologies related to water management. Developed in part by researchers from Kindai University, the water pump mechanisms use artificial intelligence to count the number of fish on a conveyor belt, analyze the number of fish, and deduce the effectiveness of water flow from the data the fish provide.[69] The FarmBeats project[70] from Microsoft Research that uses TV white space to connect farms is also a part of the Azure Marketplace now.[71]

Maritime
IoT devices are in use monitoring the environments and systems of boats and yachts.[72] Many pleasure boats are left unattended for days in summer, and months in winter so such devices provide valuable early alerts of boat flooding, fire, and deep discharge of batteries. The use of global internet data networks such as Sigfox, combined with long-life batteries, and microelectronics allows the engine rooms, bilge, and batteries to be constantly monitored and reported to a connected Android & Apple applications for example.

Infrastructure applications
Monitoring and controlling operations of sustainable urban and rural infrastructures like bridges, railway tracks and on- and offshore wind-farms is a key application of the IoT.[64] The IoT infrastructure can be used for monitoring any events or changes in structural conditions that can compromise safety and increase risk. The IoT can benefit the construction industry by cost-saving, time reduction, better quality workday, paperless workflow and increase in productivity. It can help in taking faster decisions and save money with Real-Time Data Analytics. It can also be used for scheduling repair and maintenance activities in an efficient manner, by coordinating tasks between different service providers and users of these facilities.[47] IoT devices can also be used to control critical infrastructure like bridges to provide access to ships. Usage of IoT devices for monitoring and operating infrastructure is likely to improve incident management and emergency response coordination, and quality of service, up-times and reduce costs of operation in all infrastructure related areas.[73] Even areas such as waste management can benefit[74] from automation and optimization that could be brought in by the IoT.[citation needed]

Metropolitan scale deployments
There are several planned or ongoing large-scale deployments of the IoT, to enable better management of cities and systems. For example, Songdo, South Korea, the first of its kind fully equipped and wired smart city, is gradually being built, with approximately 70 percent of the business district completed as of June 2018. Much of the city is planned to be wired and automated, with little or no human intervention.[75]

Another application is currently undergoing a project in Santander, Spain. For this deployment, two approaches have been adopted. This city of 180,000 inhabitants has already seen 18,000 downloads of its city smartphone app. The app is connected to 10,000 sensors that enable services like parking search, environmental monitoring, digital city agenda, and more. City context information is used in this deployment so as to benefit merchants through a spark deals mechanism based on city behavior that aims at maximizing the impact of each notification.[76]

Other examples of large-scale deployments underway include the Sino-Singapore Guangzhou Knowledge City;[77] work on improving air and water quality, reducing noise pollution, and increasing transportation efficiency in San Jose, California;[78] and smart traffic management in western Singapore.[79] Using its RPMA (Random Phase Multiple Access) technology, San Diego-based Ingenu has built a nationwide public network[80] for low-bandwidth data transmissions using the same unlicensed 2.4 gigahertz spectrum as Wi-Fi. Ingenu's "Machine Network" covers more than a third of the US population across 35 major cities including San Diego and Dallas.[81] French company, Sigfox, commenced building an Ultra Narrowband wireless data network in the San Francisco Bay Area in 2014, the first business to achieve such a deployment in the U.S.[82][83] It subsequently announced it would set up a total of 4000 base stations to cover a total of 30 cities in the U.S. by the end of 2016, making it the largest IoT network coverage provider in the country thus far.[84][85] Cisco also participates in smart cities projects. Cisco has started deploying technologies for Smart Wi-Fi, Smart Safety & Security, Smart Lighting, Smart Parking, Smart Transports, Smart Bus Stops, Smart Kiosks, Remote Expert for Government Services (REGS) and Smart Education in the five km area in the city of Vijaywada.[86]

Another example of a large deployment is the one completed by New York Waterways in New York City to connect all the city's vessels and be able to monitor them live 24/7. The network was designed and engineered by Fluidmesh Networks, a Chicago-based company developing wireless networks for critical applications. The NYWW network is currently providing coverage on the Hudson River, East River, and Upper New York Bay. With the wireless network in place, NY Waterway is able to take control of its fleet and passengers in a way that was not previously possible. New applications can include security, energy and fleet management, digital signage, public Wi-Fi, paperless ticketing and others.[87]

Energy management
Significant numbers of energy-consuming devices (e.g. lamps, household appliances, motors, pumps, etc.) already integrate Internet connectivity, which can allow them to communicate with utilities not only to balance power generation but also helps optimize the energy consumption as a whole.[47] These devices allow for remote control by users, or central management via a cloud-based interface, and enable functions like scheduling (e.g., remotely powering on or off heating systems, controlling ovens, changing lighting conditions etc.).[47] The smart grid is a utility-side IoT application; systems gather and act on energy and power-related information to improve the efficiency of the production and distribution of electricity.[88] Using advanced metering infrastructure (AMI) Internet-connected devices, electric utilities not only collect data from end-users, but also manage distribution automation devices like transformers.[47]

Environmental monitoring
Environmental monitoring applications of the IoT typically use sensors to assist in environmental protection[89] by monitoring air or water quality,[90] atmospheric or soil conditions,[91] and can even include areas like monitoring the movements of wildlife and their habitats.[92] Development of resource-constrained devices connected to the Internet also means that other applications like earthquake or tsunami early-warning systems can also be used by emergency services to provide more effective aid. IoT devices in this application typically span a large geographic area and can also be mobile.[47] It has been argued that the standardization that IoT brings to wireless sensing will revolutionize this area.[93]

Living Lab

Another example of integrating the IoT is Living Lab which integrates and combines research and innovation processes, establishing within a public-private-people-partnership.[94] There are currently 320 Living Labs that use the IoT to collaborate and share knowledge between stakeholders to co-create innovative and technological products. For companies to implement and develop IoT services for smart cities, they need to have incentives. The governments play key roles in smart city projects as changes in policies will help cities to implement the IoT which provides effectiveness, efficiency, and accuracy of the resources that are being used. For instance, the government provides tax incentives and cheap rent, improves public transports, and offers an environment where start-up companies, creative industries, and multinationals may co-create, share a common infrastructure and labor markets, and take advantage of locally embedded technologies, production process, and transaction costs.[94] The relationship between the technology developers and governments who manage the city's assets, is key to provide open access to resources to users in an efficient way.

Military applications
Main article: Internet of Military Things
The Internet of Military Things (IoMT) is the application of IoT technologies in the military domain for the purposes of reconnaissance, surveillance, and other combat-related objectives. It is heavily influenced by the future prospects of warfare in an urban environment and involves the use of sensors, munitions, vehicles, robots, human-wearable biometrics, and other smart technology that is relevant on the battlefield.[95]

Internet of Battlefield Things
The Internet of Battlefield Things (IoBT) is a project initiated and executed by the U.S. Army Research Laboratory (ARL) that focuses on the basic science related to the IoT that enhance the capabilities of Army soldiers.[96] In 2017, ARL launched the Internet of Battlefield Things Collaborative Research Alliance (IoBT-CRA), establishing a working collaboration between industry, university, and Army researchers to advance the theoretical foundations of IoT technologies and their applications to Army operations.[97][98]

Ocean of Things
The Ocean of Things project is a DARPA-led program designed to establish an Internet of things across large ocean areas for the purposes of collecting, monitoring, and analyzing environmental and vessel activity data. The project entails the deployment of about 50,000 floats that house a passive sensor suite that autonomously detect and track military and commercial vessels as part of a cloud-based network.[99]

Product digitalization
There are several applications of smart or active packaging in which a QR code or NFC tag is affixed on a product or its packaging. The tag itself is passive, however, it contains a unique identifier (typically a URL) which enables a user to access digital content about the product via a smartphone.[100] Strictly speaking, such passive items are not part of the Internet of things, but they can be seen as enablers of digital interactions.[101] The term "Internet of Packaging" has been coined to describe applications in which unique identifiers are used, to automate supply chains, and are scanned on large scale by consumers to access digital content.[102] Authentication of the unique identifiers, and thereby of the product itself, is possible via a copy-sensitive digital watermark or copy detection pattern for scanning when scanning a QR code,[103] while NFC tags can encrypt communication.[104]

Trends and characteristics
The IoT's major significant trend in recent years is the explosive growth of devices connected and controlled by the Internet.[105] The wide range of applications for IoT technology mean that the specifics can be very different from one device to the next but there are basic characteristics shared by most.

The IoT creates opportunities for more direct integration of the physical world into computer-based systems, resulting in efficiency improvements, economic benefits, and reduced human exertions.[106][107][108][109]

The number of IoT devices increased 31% year-over-year to 8.4 billion in the year 2017[110] and it is estimated that there will be 30 billion devices by 2020.[105] The global market value of the IoT is projected to reach $7.1 trillion by 2020.[111]

Intelligence
Ambient intelligence and autonomous control are not part of the original concept of the Internet of things. Ambient intelligence and autonomous control do not necessarily require Internet structures, either. However, there is a shift in research (by companies such as Intel) to integrate the concepts of the IoT and autonomous control, with initial outcomes towards this direction considering objects as the driving force for autonomous IoT.[112] A promising approach in this context is deep reinforcement learning where most of IoT systems provide a dynamic and interactive environment.[113] Training an agent (i.e., IoT device) to behave smartly in such an environment cannot be addressed by conventional machine learning algorithms such as supervised learning. By reinforcement learning approach, a learning agent can sense the environment's state (e.g., sensing home temperature), perform actions (e.g., turn HVAC on or off) and learn through the maximizing accumulated rewards it receives in long term.

IoT intelligence can be offered at three levels: IoT devices, Edge/Fog nodes, and Cloud computing.[114] The need for intelligent control and decision at each level depends on the time sensitiveness of the IoT application. For example, an autonomous vehicle's camera needs to make real-time obstacle detection to avoid an accident. This fast decision making would not be possible through transferring data from the vehicle to cloud instances and return the predictions back to the vehicle. Instead, all the operation should be performed locally in the vehicle. Integrating advanced machine learning algorithms including deep learning into IoT devices is an active research area to make smart objects closer to reality. Moreover, it is possible to get the most value out of IoT deployments through analyzing IoT data, extracting hidden information, and predicting control decisions. A wide variety of machine learning techniques have been used in IoT domain ranging from traditional methods such as regression, support vector machine, and random forest to advanced ones such as convolutional neural networks, LSTM, and variational autoencoder.[115][114]

In the future, the Internet of things may be a non-deterministic and open network in which auto-organized or intelligent entities (web services, SOA components) and virtual objects (avatars) will be interoperable and able to act independently (pursuing their own objectives or shared ones) depending on the context, circumstances or environments. Autonomous behavior through the collection and reasoning of context information as well as the object's ability to detect changes in the environment (faults affecting sensors) and introduce suitable mitigation measures constitutes a major research trend,[116] clearly needed to provide credibility to the IoT technology. Modern IoT products and solutions in the marketplace use a variety of different technologies to support such context-aware automation, but more sophisticated forms of intelligence are requested to permit sensor units and intelligent cyber-physical systems to be deployed in real environments.[117]

Architecture

This section needs attention from an expert in technology. The specific problem is: The information is partially outdated, unclear, and uncited. Requires more details, but not so technical that others won't understand it.. WikiProject Technology may be able to help recruit an expert. (July 2018)
IoT system architecture, in its simplistic view, consists of three tiers: Tier 1: Devices, Tier 2: the Edge Gateway, and Tier 3: the Cloud.[118] Devices include networked things, such as the sensors and actuators found in IoT equipment, particularly those that use protocols such as Modbus, Bluetooth, Zigbee, or proprietary protocols, to connect to an Edge Gateway.[118] The Edge Gateway layer consists of sensor data aggregation systems called Edge Gateways that provide functionality, such as pre-processing of the data, securing connectivity to cloud, using systems such as WebSockets, the event hub, and, even in some cases, edge analytics or fog computing.[118] Edge Gateway layer is also required to give a common view of the devices to the upper layers to facilitate in easier management. The final tier includes the cloud application built for IoT using the microservices architecture, which are usually polyglot and inherently secure in nature using HTTPS/OAuth. It includes various database systems that store sensor data, such as time series databases or asset stores using backend data storage systems (e.g. Cassandra, PostgreSQL).[118] The cloud tier in most cloud-based IoT system features event queuing and messaging system that handles communication that transpires in all tiers.[119] Some experts classified the three-tiers in the IoT system as edge, platform, and enterprise and these are connected by proximity network, access network, and service network, respectively.[120]

Building on the Internet of things, the web of things is an architecture for the application layer of the Internet of things looking at the convergence of data from IoT devices into Web applications to create innovative use-cases. In order to program and control the flow of information in the Internet of things, a predicted architectural direction is being called BPM Everywhere which is a blending of traditional process management with process mining and special capabilities to automate the control of large numbers of coordinated devices.[citation needed]

Network architecture
The Internet of things requires huge scalability in the network space to handle the surge of devices.[121] IETF 6LoWPAN would be used to connect devices to IP networks. With billions of devices[122] being added to the Internet space, IPv6 will play a major role in handling the network layer scalability. IETF's Constrained Application Protocol, ZeroMQ, and MQTT would provide lightweight data transport.

Fog computing is a viable alternative to prevent such a large burst of data flow through the Internet.[123] The edge devices' computation power to analyse and process data is extremely limited. Limited processing power is a key attribute of IoT devices as their purpose is to supply data about physical objects while remaining autonomous. Heavy processing requirements use more battery power harming IoT's ability to operate. Scalability is easy because IoT devices simply supply data through the internet to a server with sufficient processing power.[124]

Decentralized IoT
Decentralized Internet of things, or decentralized IoT, is a modified IoT. It utilizes Fog Computing to handle and balance requests of connected IoT devices in order to reduce loading on the cloud servers, and improve responsiveness for latency-sensitive IoT applications like vital signs monitoring of patients, vehicle-to-vehicle communication of autonomous driving, and critical failure detection of industrial devices.[125]

Conventional IoT is connected via a mesh network and led by a major head node (centralized controller).[126] The head node decides how a data is created, stored, and transmitted.[127] In contrast, decentralized IoT attempts to divide IoT systems into smaller divisions.[128] The head node authorizes partial decision making power to lower level sub-nodes under mutual agreed policy.[129] Performance is improved, especially for huge IoT systems with millions of nodes.[130]

Decentralized IoT attempts to address the limited bandwidth and hashing capacity of battery-powered or wireless IoT devices via lightweight blockchain.[131][132][133]

Cyberattack identification can be done through early detection and mitigation at the edge nodes with traffic monitoring and evaluation.[134]

Complexity
In semi-open or closed loops (i.e. value chains, whenever a global finality can be settled) the IoT will often be considered and studied as a complex system[135] due to the huge number of different links, interactions between autonomous actors, and its capacity to integrate new actors. At the overall stage (full open loop) it will likely be seen as a chaotic environment (since systems always have finality). As a practical approach, not all elements in the Internet of things run in a global, public space. Subsystems are often implemented to mitigate the risks of privacy, control and reliability. For example, domestic robotics (domotics) running inside a smart home might only share data within and be available via a local network.[136] Managing and controlling a high dynamic ad hoc IoT things/devices network is a tough task with the traditional networks architecture, Software Defined Networking (SDN) provides the agile dynamic solution that can cope with the special requirements of the diversity of innovative IoT applications.[137][138]

Size considerations
The Internet of things would encode 50 to 100 trillion objects, and be able to follow the movement of those objects. Human beings in surveyed urban environments are each surrounded by 1000 to 5000 trackable objects.[139] In 2015 there were already 83 million smart devices in people's homes. This number is expected to grow to 193 million devices by 2020.[27][140]

The figure of online capable devices grew 31% from 2016 to 2017 to reach 8.4 billion.[110]

Space considerations
In the Internet of things, the precise geographic location of a thing—and also the precise geographic dimensions of a thing—will be critical.[141] Therefore, facts about a thing, such as its location in time and space, have been less critical to track because the person processing the information can decide whether or not that information was important to the action being taken, and if so, add the missing information (or decide to not take the action). (Note that some things in the Internet of things will be sensors, and sensor location is usually important.[142]) The GeoWeb and Digital Earth are promising applications that become possible when things can become organized and connected by location. However, the challenges that remain include the constraints of variable spatial scales, the need to handle massive amounts of data, and an indexing for fast search and neighbour operations. In the Internet of things, if things are able to take actions on their own initiative, this human-centric mediation role is eliminated. Thus, the time-space context that we as humans take for granted must be given a central role in this information ecosystem. Just as standards play a key role in the Internet and the Web, geo-spatial standards will play a key role in the Internet of things.[143][144]

A solution to "basket of remotes"
Many IoT devices have the potential to take a piece of this market. Jean-Louis Gassée (Apple initial alumni team, and BeOS co-founder) has addressed this topic in an article on Monday Note,[145] where he predicts that the most likely problem will be what he calls the "basket of remotes" problem, where we'll have hundreds of applications to interface with hundreds of devices that don't share protocols for speaking with one another.[145] For improved user interaction, some technology leaders are joining forces to create standards for communication between devices to solve this problem. Others are turning to the concept of predictive interaction of devices, "where collected data is used to predict and trigger actions on the specific devices" while making them work together.[146]

Social Internet of things
Social Internet of things (SIoT) is a new kind of IoT that focuses the importance of social interaction and relationship between IoT devices.[147] SIoT is a pattern of how cross-domain IoT devices enabling application to application communication and collaboration without human intervention in order to serve their owners with autonomous services,[148] and this only can be realized when gained low-level architecture support from both IoT software and hardware engineering.[149]

Social Network for IoT Devices (Not Human)
IoT defines a device with an identity like a citizen in a community, and connect them to the internet to provide services to its users.[150] SIoT defines a social network for IoT devices only to interact with each other for different goals that to serve human.[151]

How SIoT different from IoT?
SIoT is different from the original IoT in terms of the collaboration characteristics. IoT is passive, it was set to serve for dedicated purposes with existing IoT devices in predetermined system. SIoT is active, it was programmed and managed by AI to serve for unplanned purposes with mix and match of potential IoT devices from different systems that benefit its users.[152]

How SIoT Works?
IoT devices built-in with sociability will broadcast their abilities or functionalities, and at the same time discovers, navigates and groups with other IoT devices in the same or nearby network for useful service compositions in order to help its users proactively in every day's life especially during emergency.[153]

Social IoT Examples
IoT-based smart home technology monitors health data of patients or aging adults by analyzing their physiological parameters and prompt the nearby health facilities when emergency medical services needed.[154] In case emergency, automatically, ambulance of a nearest available hospital will be called with pickup location provided, ward assigned, patient's health data will be transmitted to the emergency department, and display on the doctor's computer immediately for further action.[155]
IoT sensors on the vehicles, road and traffic lights monitor the conditions of the vehicles and drivers and alert when attention needed and also coordinate themselves automatically to ensure autonomous driving is working normally. Unfortunately if an accident happens, IoT camera will inform the nearest hospital and police station for help.[156]
Social IoT Challenges
Internet of things is multifaceted and complicated.[157] One of the main factors that hindering people from adopting and use Internet of things (IoT) based products and services is its complexity.[158] Installation and setup is a challenge to people, therefore, there is a need for IoT devices to mix match and configure themselves automatically to provide different services at different situation.[159]
System security always a concern for any technology, and it is more crucial for SIoT as not only security of oneself need to be considered but also the mutual trust mechanism between collaborative IoT devices from time to time, from place to place.[149]
Another critical challenge for SIoT is the accuracy and reliability of the sensors. At most of the circumstances, IoT sensors would need to respond in nanoseconds to avoid accidents, injury, and loss of life.[149]
Enabling technologies for IoT
There are many technologies that enable the IoT. Crucial to the field is the network used to communicate between devices of an IoT installation, a role that several wireless or wired technologies may fulfill:[160][161][162]

Addressability
The original idea of the Auto-ID Center is based on RFID-tags and distinct identification through the Electronic Product Code. This has evolved into objects having an IP address or URI.[163] An alternative view, from the world of the Semantic Web[164] focuses instead on making all things (not just those electronic, smart, or RFID-enabled) addressable by the existing naming protocols, such as URI. The objects themselves do not converse, but they may now be referred to by other agents, such as powerful centralised servers acting for their human owners.[165] Integration with the Internet implies that devices will use an IP address as a distinct identifier. Due to the limited address space of IPv4 (which allows for 4.3 billion different addresses), objects in the IoT will have to use the next generation of the Internet protocol (IPv6) to scale to the extremely large address space required.[166][167][168] Internet-of-things devices additionally will benefit from the stateless address auto-configuration present in IPv6,[169] as it reduces the configuration overhead on the hosts,[167] and the IETF 6LoWPAN header compression. To a large extent, the future of the Internet of things will not be possible without the support of IPv6; and consequently, the global adoption of IPv6 in the coming years will be critical for the successful development of the IoT in the future.[168]

Application Layer
ADRC[170] defines an application layer protocol and supporting framework for implementing IoT applications.
Short-range wireless
Bluetooth mesh networking – Specification providing a mesh networking variant to Bluetooth low energy (BLE) with an increased number of nodes and standardized application layer (Models).
Light-Fidelity (Li-Fi) – Wireless communication technology similar to the Wi-Fi standard, but using visible light communication for increased bandwidth.
Near-field communication (NFC) – Communication protocols enabling two electronic devices to communicate within a 4 cm range.
Radio-frequency identification (RFID) – Technology using electromagnetic fields to read data stored in tags embedded in other items.
Wi-Fi – Technology for local area networking based on the IEEE 802.11 standard, where devices may communicate through a shared access point or directly between individual devices.
ZigBee – Communication protocols for personal area networking based on the IEEE 802.15.4 standard, providing low power consumption, low data rate, low cost, and high throughput.
Z-Wave – Wireless communications protocol used primarily for home automation and security applications
Medium-range wireless
LTE-Advanced – High-speed communication specification for mobile networks. Provides enhancements to the LTE standard with extended coverage, higher throughput, and lower latency.
5G - 5G wireless networks can be used to achieve the high communication requirements of the IoT and connect a large number of IoT devices, even when they are on the move.[171]
Long-range wireless
Low-power wide-area networking (LPWAN) – Wireless networks designed to allow long-range communication at a low data rate, reducing power and cost for transmission. Available LPWAN technologies and protocols: LoRaWan, Sigfox, NB-IoT, Weightless, RPMA.
Very small aperture terminal (VSAT) – Satellite communication technology using small dish antennas for narrowband and broadband data.
Wired
Ethernet – General purpose networking standard using twisted pair and fiber optic links in conjunction with hubs or switches.
Power-line communication (PLC) – Communication technology using electrical wiring to carry power and data. Specifications such as HomePlug or G.hn utilize PLC for networking IoT devices.
Standards and standards organizations
[icon]	
This section needs expansion. You can help by adding to it. (September 2016)
This is a list of technical standards for the IoT, most of which are open standards, and the standards organizations that aspire to successfully setting them.[172][173]

Short name	Long name	Standards under development	Other notes
Auto-ID Labs	Auto Identification Center	Networked RFID (radiofrequency identification) and emerging sensing technologies	
Connected Home over IP	Project Connected Home over IP	Connected Home over IP (or Project Connected Home over IP) is an open-sourced, royalty-free home automation connectivity standard project which features compatibility among different smart home and Internet of things (IoT) products and software	The Connected Home over IP project group was launched and introduced by Amazon, Apple, Google,[174] Comcast and the Zigbee Alliance on December 18, 2019.[175] The project is backed by big companies and by being based on proven Internet design principles and protocols it aims to unify the currently fragmented systems.[176]
EPCglobal	Electronic Product code Technology	Standards for adoption of EPC (Electronic Product Code) technology	
FDA	U.S. Food and Drug Administration	UDI (Unique Device Identification) system for distinct identifiers for medical devices	
GS1	Global Standards One	Standards for UIDs ("unique" identifiers) and RFID of fast-moving consumer goods (consumer packaged goods), health care supplies, and other things
The GS1 digital link standard,[177] first released in August 2018, allows the use QR Codes, GS1 Datamatrix, RFID and NFC to enable various types of business-to-business, as well as business-to-consumers interactions.

Parent organization comprises member organizations such as GS1 US
IEEE	Institute of Electrical and Electronics Engineers	Underlying communication technology standards such as IEEE 802.15.4, IEEE P1451-99[178] (IoT Harmonization), and IEEE P1931.1 (ROOF Computing).	
IETF	Internet Engineering Task Force	Standards that comprise TCP/IP (the Internet protocol suite)	
MTConnect Institute	—	MTConnect is a manufacturing industry standard for data exchange with machine tools and related industrial equipment. It is important to the IIoT subset of the IoT.	
O-DF	Open Data Format	O-DF is a standard published by the Internet of Things Work Group of The Open Group in 2014, which specifies a generic information model structure that is meant to be applicable for describing any "Thing", as well as for publishing, updating and querying information when used together with O-MI (Open Messaging Interface).	
O-MI	Open Messaging Interface	O-MI is a standard published by the Internet of Things Work Group of The Open Group in 2014, which specifies a limited set of key operations needed in IoT systems, notably different kinds of subscription mechanisms based on the Observer pattern.	
OCF	Open Connectivity Foundation	Standards for simple devices using CoAP (Constrained Application Protocol)	OCF (Open Connectivity Foundation) supersedes OIC (Open Interconnect Consortium)
OMA	Open Mobile Alliance	OMA DM and OMA LWM2M for IoT device management, as well as GotAPI, which provides a secure framework for IoT applications	
XSF	XMPP Standards Foundation	Protocol extensions of XMPP (Extensible Messaging and Presence Protocol), the open standard of instant messaging	
W3C	World Wide Web Consortium	Standards for bringing interoperability between different IoT protocols and platforms such as Thing Description, Discovery , Scripting API and Architecture that explains how they work together.	Homepage of the Web of Things activity at the W3C at https://www.w3.org/WoT/
Politics and civic engagement
Some scholars and activists argue that the IoT can be used to create new models of civic engagement if device networks can be open to user control and inter-operable platforms. Philip N. Howard, a professor and author, writes that political life in both democracies and authoritarian regimes will be shaped by the way the IoT will be used for civic engagement. For that to happen, he argues that any connected device should be able to divulge a list of the "ultimate beneficiaries" of its sensor data and that individual citizens should be able to add new organisations to the beneficiary list. In addition, he argues that civil society groups need to start developing their IoT strategy for making use of data and engaging with the public.[179]

Government regulation on IoT
One of the key drivers of the IoT is data. The success of the idea of connecting devices to make them more efficient is dependent upon access to and storage & processing of data. For this purpose, companies working on the IoT collect data from multiple sources and store it in their cloud network for further processing. This leaves the door wide open for privacy and security dangers and single point vulnerability of multiple systems.[180] The other issues pertain to consumer choice and ownership of data[181] and how it is used. Though still in their infancy, regulations and governance regarding these issues of privacy, security, and data ownership continue to develop.[182][183][184] IoT regulation depends on the country. Some examples of legislation that is relevant to privacy and data collection are: the US Privacy Act of 1974, OECD Guidelines on the Protection of Privacy and Transborder Flows of Personal Data of 1980, and the EU Directive 95/46/EC of 1995.[185]

Current regulatory environment:

A report published by the Federal Trade Commission (FTC) in January 2015 made the following three recommendations:[186]

Data security – At the time of designing IoT companies should ensure that data collection, storage and processing would be secure at all times. Companies should adopt a "defense in depth" approach and encrypt data at each stage.[187]
Data consent – users should have a choice as to what data they share with IoT companies and the users must be informed if their data gets exposed.
Data minimisation – IoT companies should collect only the data they need and retain the collected information only for a limited time.
However, the FTC stopped at just making recommendations for now. According to an FTC analysis, the existing framework, consisting of the FTC Act, the Fair Credit Reporting Act, and the Children's Online Privacy Protection Act, along with developing consumer education and business guidance, participation in multi-stakeholder efforts and advocacy to other agencies at the federal, state and local level, is sufficient to protect consumer rights.[188]

A resolution passed by the Senate in March 2015, is already being considered by the Congress.[189] This resolution recognized the need for formulating a National Policy on IoT and the matter of privacy, security and spectrum. Furthermore, to provide an impetus to the IoT ecosystem, in March 2016, a bipartisan group of four Senators proposed a bill, The Developing Innovation and Growing the Internet of Things (DIGIT) Act, to direct the Federal Communications Commission to assess the need for more spectrum to connect IoT devices.

Approved on 28 September 2018, Senate Bill No. 327[190] goes into effect on 1 January 2020. The bill requires "a manufacturer of a connected device, as those terms are defined, to equip the device with a reasonable security feature or features that are appropriate to the nature and function of the device, appropriate to the information it may collect, contain, or transmit, and designed to protect the device and any information contained therein from unauthorized access, destruction, use, modification, or disclosure,"

Several standards for the IoT industry are actually being established relating to automobiles because most concerns arising from use of connected cars apply to healthcare devices as well. In fact, the National Highway Traffic Safety Administration (NHTSA) is preparing cybersecurity guidelines and a database of best practices to make automotive computer systems more secure.[191]

A recent report from the World Bank examines the challenges and opportunities in government adoption of IoT.[192] These include –

Still early days for the IoT in government 
Underdeveloped policy and regulatory frameworks 
Unclear business models, despite strong value proposition 
Clear institutional and capacity gap in government AND the private sector 
Inconsistent data valuation and management 
Infrastructure a major barrier 
Government as an enabler 
Most successful pilots share common characteristics (public-private partnership, local, leadership)
In early December 2021, the U.K. government introduced the Product Security and Telecommunications Infrastructure bill (PST), an effort to legislate IoT distributors, manufacturers, and importers to meet certain cybersecurity standards. The bill also seeks to improve the security credentials of consumer IoT devices.[193]

Criticism, problems and controversies
Platform fragmentation
The IoT suffers from platform fragmentation, lack of interoperability and common technical standards[194][195][196][197][198][199][200][excessive citations] a situation where the variety of IoT devices, in terms of both hardware variations and differences in the software running on them, makes the task of developing applications that work consistently between different inconsistent technology ecosystems hard.[1] For example, wireless connectivity for IoT devices can be done using Bluetooth, Zigbee, Z-Wave, LoRa, NB-IoT, Cat M1 as well as completely custom proprietary radios – each with its own advantages and disadvantages; and unique support ecosystem.[201]

The IoT's amorphous computing nature is also a problem for security, since patches to bugs found in the core operating system often do not reach users of older and lower-price devices.[202][203][204] One set of researchers say that the failure of vendors to support older devices with patches and updates leaves more than 87% of active Android devices vulnerable.[205][206]

Privacy, autonomy, and control
Philip N. Howard, a professor and author, writes that the Internet of things offers immense potential for empowering citizens, making government transparent, and broadening information access. Howard cautions, however, that privacy threats are enormous, as is the potential for social control and political manipulation.[207]

Concerns about privacy have led many to consider the possibility that big data infrastructures such as the Internet of things and data mining are inherently incompatible with privacy.[208] Key challenges of increased digitalization in the water, transport or energy sector are related to privacy and cybersecurity which necessitate an adequate response from research and policymakers alike.[209]

Writer Adam Greenfield claims that IoT technologies are not only an invasion of public space but are also being used to perpetuate normative behavior, citing an instance of billboards with hidden cameras that tracked the demographics of passersby who stopped to read the advertisement.

The Internet of Things Council compared the increased prevalence of digital surveillance due to the Internet of things to the conceptual panopticon described by Jeremy Bentham in the 18th Century.[210] The assertion was defended by the works of French philosophers Michel Foucault and Gilles Deleuze. In Discipline and Punish: The Birth of the Prison Foucault asserts that the panopticon was a central element of the discipline society developed during the Industrial Era.[211] Foucault also argued that the discipline systems established in factories and school reflected Bentham's vision of panopticism.[211] In his 1992 paper "Postscripts on the Societies of Control," Deleuze wrote that the discipline society had transitioned into a control society, with the computer replacing the panopticon as an instrument of discipline and control while still maintaining the qualities similar to that of panopticism.[212]

Peter-Paul Verbeek, a professor of philosophy of technology at the University of Twente, Netherlands, writes that technology already influences our moral decision making, which in turn affects human agency, privacy and autonomy. He cautions against viewing technology merely as a human tool and advocates instead to consider it as an active agent.[213]

Justin Brookman, of the Center for Democracy and Technology, expressed concern regarding the impact of the IoT on consumer privacy, saying that "There are some people in the commercial space who say, 'Oh, big data – well, let's collect everything, keep it around forever, we'll pay for somebody to think about security later.' The question is whether we want to have some sort of policy framework in place to limit that."[214]

Tim O'Reilly believes that the way companies sell the IoT devices on consumers are misplaced, disputing the notion that the IoT is about gaining efficiency from putting all kinds of devices online and postulating that the "IoT is really about human augmentation. The applications are profoundly different when you have sensors and data driving the decision-making."[215]

Editorials at WIRED have also expressed concern, one stating "What you're about to lose is your privacy. Actually, it's worse than that. You aren't just going to lose your privacy, you're going to have to watch the very concept of privacy be rewritten under your nose."[216]

The American Civil Liberties Union (ACLU) expressed concern regarding the ability of IoT to erode people's control over their own lives. The ACLU wrote that "There's simply no way to forecast how these immense powers – disproportionately accumulating in the hands of corporations seeking financial advantage and governments craving ever more control – will be used. Chances are big data and the Internet of Things will make it harder for us to control our own lives, as we grow increasingly transparent to powerful corporations and government institutions that are becoming more opaque to us."[217]

In response to rising concerns about privacy and smart technology, in 2007 the British Government stated it would follow formal Privacy by Design principles when implementing their smart metering program. The program would lead to replacement of traditional power meters with smart power meters, which could track and manage energy usage more accurately.[218] However the British Computer Society is doubtful these principles were ever actually implemented.[219] In 2009 the Dutch Parliament rejected a similar smart metering program, basing their decision on privacy concerns. The Dutch program later revised and passed in 2011.[219]

Data storage
A challenge for producers of IoT applications is to clean, process and interpret the vast amount of data which is gathered by the sensors. There is a solution proposed for the analytics of the information referred to as Wireless Sensor Networks.[220] These networks share data among sensor nodes that are sent to a distributed system for the analytics of the sensory data.[221]

Another challenge is the storage of this bulk data. Depending on the application, there could be high data acquisition requirements, which in turn lead to high storage requirements. Currently the Internet is already responsible for 5% of the total energy generated,[220] and a "daunting challenge to power" IoT devices to collect and even store data still remains.[222]

Security
Security is the biggest concern in adopting Internet of things technology,[223] with concerns that rapid development is happening without appropriate consideration of the profound security challenges involved[224] and the regulatory changes that might be necessary.[225][226]

Most of the technical security concerns are similar to those of conventional servers, workstations and smartphones.[227] These concerns include using weak authentication, forgetting to change default credentials, unencrypted messages sent between devices, SQL injections, Man-in-the-middle attacks, and poor handling of security updates.[228][229] However, many IoT devices have severe operational limitations on the computational power available to them. These constraints often make them unable to directly use basic security measures such as implementing firewalls or using strong cryptosystems to encrypt their communications with other devices[230] - and the low price and consumer focus of many devices makes a robust security patching system uncommon.[231]

Rather than conventional security vulnerabilities, fault injection attacks are on the rise and targeting IoT devices. A fault injection attack is a physical attack on a device to purposefully introduce faults in the system to change the intended behavior. Faults might happen unintentionally by environmental noises and electromagnetic fields. There are ideas stemmed from control-flow integrity (CFI) to prevent fault injection attacks and system recovery to a healthy state before the fault.[232]

Internet of things devices also have access to new areas of data, and can often control physical devices,[233] so that even by 2014 it was possible to say that many Internet-connected appliances could already "spy on people in their own homes" including televisions, kitchen appliances,[234] cameras, and thermostats.[235] Computer-controlled devices in automobiles such as brakes, engine, locks, hood and trunk releases, horn, heat, and dashboard have been shown to be vulnerable to attackers who have access to the on-board network. In some cases, vehicle computer systems are Internet-connected, allowing them to be exploited remotely.[236] By 2008 security researchers had shown the ability to remotely control pacemakers without authority. Later hackers demonstrated remote control of insulin pumps[237] and implantable cardioverter defibrillators.[238]

Poorly secured Internet-accessible IoT devices can also be subverted to attack others. In 2016, a distributed denial of service attack powered by Internet of things devices running the Mirai malware took down a DNS provider and major web sites.[239] The Mirai Botnet had infected roughly 65,000 IoT devices within the first 20 hours.[240] Eventually the infections increased to around 200,000 to 300,000 infections.[240] Brazil, Colombia and Vietnam made up of 41.5% of the infections.[240] The Mirai Botnet had singled out specific IoT devices that consisted of DVRs, IP cameras, routers and printers.[240] Top vendors that contained the most infected devices were identified as Dahua, Huawei, ZTE, Cisco, ZyXEL and MikroTik.[240] In May 2017, Junade Ali, a Computer Scientist at Cloudflare noted that native DDoS vulnerabilities exist in IoT devices due to a poor implementation of the Publish–subscribe pattern.[241][242] These sorts of attacks have caused security experts to view IoT as a real threat to Internet services.[243]

The U.S. National Intelligence Council in an unclassified report maintains that it would be hard to deny "access to networks of sensors and remotely-controlled objects by enemies of the United States, criminals, and mischief makers... An open market for aggregated sensor data could serve the interests of commerce and security no less than it helps criminals and spies identify vulnerable targets. Thus, massively parallel sensor fusion may undermine social cohesion, if it proves to be fundamentally incompatible with Fourth-Amendment guarantees against unreasonable search."[244] In general, the intelligence community views the Internet of things as a rich source of data.[245]

On 31 January 2019, the Washington Post wrote an article regarding the security and ethical challenges that can occur with IoT doorbells and cameras: "Last month, Ring got caught allowing its team in Ukraine to view and annotate certain user videos; the company says it only looks at publicly shared videos and those from Ring owners who provide consent. Just last week, a California family's Nest camera let a hacker take over and broadcast fake audio warnings about a missile attack, not to mention peer in on them, when they used a weak password"[246]

There have been a range of responses to concerns over security. The Internet of Things Security Foundation (IoTSF) was launched on 23 September 2015 with a mission to secure the Internet of things by promoting knowledge and best practice. Its founding board is made from technology providers and telecommunications companies. In addition, large IT companies are continually developing innovative solutions to ensure the security of IoT devices. In 2017, Mozilla launched Project Things, which allows to route IoT devices through a safe Web of Things gateway.[247] As per the estimates from KBV Research,[248] the overall IoT security market[249] would grow at 27.9% rate during 2016–2022 as a result of growing infrastructural concerns and diversified usage of Internet of things.[250][251]

Governmental regulation is argued by some to be necessary to secure IoT devices and the wider Internet – as market incentives to secure IoT devices is insufficient.[252][225][226] It was found that due to the nature of most of the IoT development boards, they generate predictable and weak keys which make it easy to be utilized by Man-in-the-middle attack. However, various hardening approaches were proposed by many researchers to resolve the issue of SSH weak implementation and weak keys.[253]

Safety
IoT systems are typically controlled by event-driven smart apps that take as input either sensed data, user inputs, or other external triggers (from the Internet) and command one or more actuators towards providing different forms of automation.[254] Examples of sensors include smoke detectors, motion sensors, and contact sensors. Examples of actuators include smart locks, smart power outlets, and door controls. Popular control platforms on which third-party developers can build smart apps that interact wirelessly with these sensors and actuators include Samsung's SmartThings,[255] Apple's HomeKit,[256] and Amazon's Alexa,[257] among others.

A problem specific to IoT systems is that buggy apps, unforeseen bad app interactions, or device/communication failures, can cause unsafe and dangerous physical states, e.g., "unlock the entrance door when no one is at home" or "turn off the heater when the temperature is below 0 degrees Celsius and people are sleeping at night".[254] Detecting flaws that lead to such states, requires a holistic view of installed apps, component devices, their configurations, and more importantly, how they interact. Recently, researchers from the University of California Riverside have proposed IotSan, a novel practical system that uses model checking as a building block to reveal "interaction-level" flaws by identifying events that can lead the system to unsafe states.[254] They have evaluated IotSan on the Samsung SmartThings platform. From 76 manually configured systems, IotSan detects 147 vulnerabilities (i.e., violations of safe physical states/properties).

Design
Given widespread recognition of the evolving nature of the design and management of the Internet of things, sustainable and secure deployment of IoT solutions must design for "anarchic scalability."[258] Application of the concept of anarchic scalability can be extended to physical systems (i.e. controlled real-world objects), by virtue of those systems being designed to account for uncertain management futures. This hard anarchic scalability thus provides a pathway forward to fully realize the potential of Internet-of-things solutions by selectively constraining physical systems to allow for all management regimes without risking physical failure.[258]

Brown University computer scientist Michael Littman has argued that successful execution of the Internet of things requires consideration of the interface's usability as well as the technology itself. These interfaces need to be not only more user-friendly but also better integrated: "If users need to learn different interfaces for their vacuums, their locks, their sprinklers, their lights, and their coffeemakers, it's tough to say that their lives have been made any easier."[259]

Environmental sustainability impact
A concern regarding Internet-of-things technologies pertains to the environmental impacts of the manufacture, use, and eventual disposal of all these semiconductor-rich devices.[260] Modern electronics are replete with a wide variety of heavy metals and rare-earth metals, as well as highly toxic synthetic chemicals. This makes them extremely difficult to properly recycle. Electronic components are often incinerated or placed in regular landfills. Furthermore, the human and environmental cost of mining the rare-earth metals that are integral to modern electronic components continues to grow. This leads to societal questions concerning the environmental impacts of IoT devices over their lifetime.[261]

Intentional obsolescence of devices
The Electronic Frontier Foundation has raised concerns that companies can use the technologies necessary to support connected devices to intentionally disable or "brick" their customers' devices via a remote software update or by disabling a service necessary to the operation of the device. In one example, home automation devices sold with the promise of a "Lifetime Subscription" were rendered useless after Nest Labs acquired Revolv and made the decision to shut down the central servers the Revolv devices had used to operate.[262] As Nest is a company owned by Alphabet (Google's parent company), the EFF argues this sets a "terrible precedent for a company with ambitions to sell self-driving cars, medical devices, and other high-end gadgets that may be essential to a person's livelihood or physical safety."[263]

Owners should be free to point their devices to a different server or collaborate on improved software. But such action violates the United States DMCA section 1201, which only has an exemption for "local use". This forces tinkerers who want to keep using their own equipment into a legal grey area. EFF thinks buyers should refuse electronics and software that prioritize the manufacturer's wishes above their own.[263]

Examples of post-sale manipulations include Google Nest Revolv, disabled privacy settings on Android, Sony disabling Linux on PlayStation 3, enforced EULA on Wii U.[263]

Confusing terminology
Kevin Lonergan at Information Age, a business technology magazine, has referred to the terms surrounding the IoT as a "terminology zoo".[264] The lack of clear terminology is not "useful from a practical point of view" and a "source of confusion for the end user".[264] A company operating in the IoT space could be working in anything related to sensor technology, networking, embedded systems, or analytics.[264] According to Lonergan, the term IoT was coined before smart phones, tablets, and devices as we know them today existed, and there is a long list of terms with varying degrees of overlap and technological convergence: Internet of things, Internet of everything (IoE), Internet of goods (supply chain), industrial Internet, pervasive computing, pervasive sensing, ubiquitous computing, cyber-physical systems (CPS), wireless sensor networks (WSN), smart objects, digital twin, cyberobjects or avatars,[135] cooperating objects, machine to machine (M2M), ambient intelligence (AmI), Operational technology (OT), and information technology (IT).[264] Regarding IIoT, an industrial sub-field of IoT, the Industrial Internet Consortium's Vocabulary Task Group has created a "common and reusable vocabulary of terms"[265] to ensure "consistent terminology"[265][266] across publications issued by the Industrial Internet Consortium. IoT One has created an IoT Terms Database including a New Term Alert[267] to be notified when a new term is published. As of March 2020, this database aggregates 807 IoT-related terms, while keeping material "transparent and comprehensive."[268][269]

IoT adoption barriers

GE Digital CEO William Ruh speaking about GE's attempts to gain a foothold in the market for IoT services at the first IEEE Computer Society TechIgnite conference
Lack of interoperability and unclear value propositions
Despite a shared belief in the potential of the IoT, industry leaders and consumers are facing barriers to adopt IoT technology more widely. Mike Farley argued in Forbes that while IoT solutions appeal to early adopters, they either lack interoperability or a clear use case for end-users.[270] A study by Ericsson regarding the adoption of IoT among Danish companies suggests that many struggle "to pinpoint exactly where the value of IoT lies for them".[271]

Privacy and security concerns
As for IoT, especially in regards to consumer IoT, information about a user's daily routine is collected so that the “things” around the user can cooperate to provide better services that fulfill personal preference.[272] When the collected information which describes a user in detail travels through multiple hops in a network, due to a diverse integration of services, devices and network, the information stored on a device is vulnerable to privacy violation by compromising nodes existing in an IoT network.[273]

For example, on 21 October 2016, a multiple distributed denial of service (DDoS) attacks systems operated by domain name system provider Dyn, which caused the inaccessibility of several websites, such as GitHub, Twitter, and others. This attack is executed through a botnet consisting of a large number of IoT devices including IP cameras, gateways, and even baby monitors.[274]

Fundamentally there are 4 security objectives that the IOT system requires: (1) data confidentiality: unauthorized parties cannot have access to the transmitted and stored data; (2) data integrity: intentional and unintentional corruption of transmitted and stored data must be detected; (3) non-repudiation: the sender cannot deny having sent a given message; (4) data availability: the transmitted and stored data should be available to authorized parties even with the denial-of-service (DOS) attacks.[275]

Information privacy regulations also require organizations to practice "reasonable security". California's SB-327 Information privacy: connected devices "would require a manufacturer of a connected device, as those terms are defined, to equip the device with a reasonable security feature or features that are appropriate to the nature and function of the device, appropriate to the information it may collect, contain, or transmit, and designed to protect the device and any information contained therein from unauthorized access, destruction, use, modification, or disclosure, as specified."[276] As each organization's environment is unique, it can prove challenging to demonstrate what "reasonable security" is and what potential risks could be involved for the business. Oregon's HB 2395 also "requires [a] person that manufactures, sells or offers to sell connected device] manufacturer to equip connected device with reasonable security features that protect connected device and information that connected device collects, contains, stores or transmits] stores from access, destruction, modification, use or disclosure that consumer does not authorize."[277]

According to antivirus provider Kaspersky, there were 639 million data breaches of IoT devices in 2020 and 1.5 billion breaches in the first six months of 2021.[193]

Traditional governance structure

Town of Internet of Things in Hangzhou, China
A study issued by Ericsson regarding the adoption of Internet of things among Danish companies identified a "clash between IoT and companies' traditional governance structures, as IoT still presents both uncertainties and a lack of historical precedence."[271] Among the respondents interviewed, 60 percent stated that they "do not believe they have the organizational capabilities, and three of four do not believe they have the processes needed, to capture the IoT opportunity."[271] This has led to a need to understand organizational culture in order to facilitate organizational design processes and to test new innovation management practices. A lack of digital leadership in the age of digital transformation has also stifled innovation and IoT adoption to a degree that many companies, in the face of uncertainty, "were waiting for the market dynamics to play out",[271] or further action in regards to IoT "was pending competitor moves, customer pull, or regulatory requirements."[271] Some of these companies risk being "kodaked" – "Kodak was a market leader until digital disruption eclipsed film photography with digital photos" – failing to "see the disruptive forces affecting their industry"[278] and "to truly embrace the new business models the disruptive change opens up."[278] Scott Anthony has written in Harvard Business Review that Kodak "created a digital camera, invested in the technology, and even understood that photos would be shared online"[278] but ultimately failed to realize that "online photo sharing was the new business, not just a way to expand the printing business."[278]

Business planning and project management
According to 2018 study, 70–75% of IoT deployments were stuck in the pilot or prototype stage, unable to reach scale due in part to a lack of business planning.[279][page needed][280]

Even though scientists, engineers, and managers across the world are continuously working to create and exploit the benefits of IoT products, there are some flaws in the governance, management and implementation of such projects. Despite tremendous forward momentum in the field of information and other underlying technologies, IoT still remains a complex area and the problem of how IoT projects are managed still needs to be addressed. IoT projects must be run differently than simple and traditional IT, manufacturing or construction projects. Because IoT projects have longer project timelines, a lack of skilled resources and several security/legal issues, there is a need for new and specifically designed project processes. The following management techniques should improve the success rate of IoT projects:[281]

A separate research and development phase 
A Proof-of-Concept/Prototype before the actual project begins 
Project managers with interdisciplinary technical knowledge 
Universally defined business and technical jargon
See also
5G
Artificial intelligence of things
Automotive security
Big Data
Cloud manufacturing
Cyber-physical system
Data Distribution Service
Digital object memory
Digital twin
Edge computing
Four-dimensional product
Home automation
Indoor positioning system
Industry 4.0
Internet of Military Things
IoT Cloud
IoT Simulation
Open Interconnect Consortium
OpenWSN
Quantified self
Responsive computer-aided design
Smart grid
Web of things
References
 Gillis, Alexander (2021). "What is internet of things (IoT)?". IOT Agenda. Retrieved 17 August 2021.
 Brown, Eric (20 September 2016). "21 Open Source Projects for IoT". Linux.com. Retrieved 23 October 2016.
 "Internet of Things Global Standards Initiative". ITU. Retrieved 26 June 2015.
 Hendricks, Drew. "The Trouble with the Internet of Things". London Datastore. Greater London Authority. Retrieved 10 August 2015.
 Laplante, Phillip A.; Kassab, Mohamad; Laplante, Nancy L.; Voas, Jeffrey M. (2018). "Building Caring Healthcare Systems in the Internet of Things". IEEE Systems Journal. 12 (3): 3030–3037. Bibcode:2018ISysJ..12.3030L. doi:10.1109/JSYST.2017.2662602. ISSN 1932-8184. PMC 6506834. PMID 31080541.
 "The New York City Internet of Things Strategy". www1.nyc.gov. Retrieved 6 September 2021.
 "The "Only" Coke Machine on the Internet". Carnegie Mellon University. Retrieved 10 November 2014.
 "Internet of Things Done Wrong Stifles Innovation". InformationWeek. 7 July 2014. Retrieved 10 November 2014.
 Mattern, Friedemann; Floerkemeier, Christian (2010). "From the Internet of Computer to the Internet of Things" (PDF). Informatik-Spektrum. 33 (2): 107–121. Bibcode:2009InfSp..32..496H. doi:10.1007/s00287-010-0417-7. hdl:20.500.11850/159645. S2CID 29563772. Retrieved 3 February 2014.
 Weiser, Mark (1991). "The Computer for the 21st Century" (PDF). Scientific American. 265 (3): 94–104. Bibcode:1991SciAm.265c..94W. doi:10.1038/scientificamerican0991-94. Archived from the original (PDF) on 11 March 2015. Retrieved 5 November 2014.
 Raji, R.S. (1994). "Smart networks for control". IEEE Spectrum. 31 (6): 49–55. doi:10.1109/6.284793. S2CID 42364553.
 Pontin, Jason (29 September 2005). "ETC: Bill Joy's Six Webs". MIT Technology Review. Retrieved 17 November 2013.
 "CORRECTING THE IOT HISTORY". CHETAN SHARMA. 14 March 2016. Retrieved 1 June 2021.
 Ashton, K. (22 June 2009). "That 'Internet of Things' Thing". Retrieved 9 May 2017.
 "Peter Day's World of Business". BBC World Service. BBC. Retrieved 4 October 2016.
 Magrassi, P. (2 May 2002). "Why a Universal RFID Infrastructure Would Be a Good Thing". Gartner research report G00106518.
 Magrassi, P.; Berg, T (12 August 2002). "A World of Smart Objects". Gartner research report R-17-2243. Archived from the original on 3 October 2003.
 Commission of the European Communities (18 June 2009). "Internet of Things – An action plan for Europe" (PDF). COM(2009) 278 final.
 Wood, Alex (31 March 2015). "The internet of things is revolutionizing our lives, but standards are a must". The Guardian.
 Stallings, William (2016). Foundations of modern networking : SDN, NFV, QoE, IoT, and Cloud. Florence Agboma, Sofiene Jelassi. Indianapolis, Indiana. ISBN 978-0-13-417547-8. OCLC 927715441.
 Dave Evans (April 2011). "The Internet of Things: How the Next Evolution of the Internet Is Changing Everything" (PDF). CISCO White Paper.
 Vongsingthong, S.; Smanchat, S. (2014). "Internet of Things: A review of applications & technologies" (PDF). Suranaree Journal of Science and Technology.
 "The Enterprise Internet of Things Market". Business Insider. 25 February 2015. Retrieved 26 June 2015.
 Perera, C.; Liu, C. H.; Jayawardena, S. (December 2015). "The Emerging Internet of Things Marketplace From an Industrial Perspective: A Survey". IEEE Transactions on Emerging Topics in Computing. 3 (4): 585–598. arXiv:1502.00134. Bibcode:2015arXiv150200134P. doi:10.1109/TETC.2015.2390034. ISSN 2168-6750. S2CID 7329149.
 "How IoT's are Changing the Fundamentals of "Retailing"". Trak.in – Indian Business of Tech, Mobile & Startups. 30 August 2016. Retrieved 2 June 2017.
 Kang, Won Min; Moon, Seo Yeon; Park, Jong Hyuk (5 March 2017). "An enhanced security framework for home appliances in smart home". Human-centric Computing and Information Sciences. 7 (6). doi:10.1186/s13673-017-0087-4.
 "How IoT & smart home automation will change the way we live". Business Insider. Retrieved 10 November 2017.
 Jussi Karlgren; Lennart Fahlén; Anders Wallberg; Pär Hansson; Olov Ståhl; Jonas Söderberg; Karl-Petter Åkesson (2008). Socially Intelligent Interfaces for Increased Energy Awareness in the Home. The Internet of Things. Lecture Notes in Computer Science. 4952. Springer. pp. 263–275. arXiv:2106.15297. doi:10.1007/978-3-540-78731-0_17. ISBN 978-3-540-78730-3. S2CID 30983428.
 Greengard, Samuel (2015). The Internet of Things. Cambridge, MA: MIT Press. p. 90. ISBN 9780262527736.
 "HomeKit – Apple Developer". developer.apple.com. Retrieved 19 September 2018.
 Wollerton, Megan (3 June 2018). "Here's everything you need to know about Apple HomeKit". CNET. Retrieved 19 September 2018.
 Lovejoy, Ben (31 August 2018). "HomeKit devices getting more affordable as Lenovo announces Smart Home Essentials line". 9to5Mac. Retrieved 19 September 2018.
 Prospero, Mike (12 September 2018). "Best Smart Home Hubs of 2018". Tom's Guide. Retrieved 19 September 2018.
 Chinchilla, Chris (26 November 2018). "What Smart Home IoT Platform Should You Use?". Hacker Noon. Retrieved 13 May 2019.
 Baker, Jason (14 December 2017). "6 open source home automation tools". opensource.com. Retrieved 13 May 2019.
 Demiris, G; Hensel, K (2008). "Technologies for an Aging Society: A Systematic Review of 'Smart Home' Applications". IMIA Yearbook of Medical Informatics 2008. 17: 33–40. doi:10.1055/s-0038-1638580. PMID 18660873. S2CID 7244183.
 Aburukba, Raafat; Al-Ali, A. R.; Kandil, Nourhan; AbuDamis, Diala (10 May 2016). Configurable ZigBee-based control system for people with multiple disabilities in smart homes. pp. 1–5. doi:10.1109/ICCSII.2016.7462435. ISBN 978-1-4673-8743-9. S2CID 16754386.
 Mulvenna, Maurice; Hutton, Anton; Martin, Suzanne; Todd, Stephen; Bond, Raymond; Moorhead, Anne (14 December 2017). "Views of Caregivers on the Ethics of Assistive Technology Used for Home Surveillance of People Living with Dementia". Neuroethics. 10 (2): 255–266. doi:10.1007/s12152-017-9305-z. PMC 5486509. PMID 28725288.
 da Costa, CA; Pasluosta, CF; Eskofier, B; da Silva, DB; da Rosa Righi, R (July 2018). "Internet of Health Things: Toward intelligent vital signs monitoring in hospital wards". Artificial Intelligence in Medicine. 89: 61–69. doi:10.1016/j.artmed.2018.05.005. PMID 29871778. S2CID 46941758.
 Engineer, A; Sternberg, EM; Najafi, B (21 August 2018). "Designing Interiors to Mitigate Physical and Cognitive Deficits Related to Aging and to Promote Longevity in Older Adults: A Review". Gerontology. 64 (6): 612–622. doi:10.1159/000491488. PMID 30130764. S2CID 52056959. open access
 Kricka, LJ (2019). "History of disruptions in laboratory medicine: what have we learned from predictions?". Clinical Chemistry and Laboratory Medicine. 57 (3): 308–311. doi:10.1515/cclm-2018-0518. PMID 29927745. S2CID 49354315.
 Gatouillat, Arthur; Badr, Youakim; Massot, Bertrand; Sejdic, Ervin (2018). "Internet of Medical Things: A Review of Recent Contributions Dealing with Cyber-Physical Systems in Medicine" (PDF). IEEE Internet of Things Journal. 5 (5): 3810–3822. doi:10.1109/jiot.2018.2849014. ISSN 2327-4662. S2CID 53440449.
 Topol, Eric (2016). The Patient Will See You Now: The Future of Medicine Is in Your Hands. Basic Books. ISBN 978-0465040025.
 Dey, Nilanjan; Hassanien, Aboul Ella; Bhatt, Chintan; Ashour, Amira S.; Satapathy, Suresh Chandra (2018). Internet of things and big data analytics toward next-generation intelligence (PDF). Springer International Publishing. ISBN 978-3-319-60434-3. Retrieved 14 October 2018.
 Pratap Singh, R.; Javaid, M.; Haleem, A.; Vaishya, R.; Ali, S. (2020). "Internet of Medical Things (IoMT) for orthopaedic in COVID-19 pandemic: Roles, challenges, and applications". Journal of Clinical Orthopaedics and Trauma. 11 (4): 713–717. doi:10.1016/j.jcot.2020.05.011. PMC 7227564. PMID 32425428.
 "Deloitte Centre for Health Solutions" (PDF). Deloitte.
 Ersue, M.; Romascanu, D.; Schoenwaelder, J.; Sehgal, A. (4 July 2014). "Management of Networks with Constrained Devices: Use Cases". IETF Internet Draft.
 "Goldman Sachs Report: How the Internet of Things Can Save the American Healthcare System $305 Billion Annually". Engage Mobile Blog. Engage Mobile Solutions, LLC. 23 June 2016. Retrieved 26 July 2018.
 World Health Organization. "mHealth. New horizons for health through mobile technologies" (PDF). World Health Organization. Retrieved 3 January 2020.
 Istepanian, R.; Hu, S.; Philip, N.; Sungoor, A. (2011). "The potential of Internet of m-health Things "m-IoT" for non-invasive glucose level sensing". 2011 Annual International Conference of the IEEE Engineering in Medicine and Biology Society. Annual International Conference of the IEEE Engineering in Medicine and Biology Society. IEEE Engineering in Medicine and Biology Society. Annual International Conference. 2011. pp. 5264–6. doi:10.1109/IEMBS.2011.6091302. ISBN 978-1-4577-1589-1. PMID 22255525. S2CID 995488.
 Swan, Melanie (8 November 2012). "Sensor Mania! The Internet of Things, Wearable Computing, Objective Metrics, and the Quantified Self 2.0". Journal of Sensor and Actuator Networks. 1 (3): 217–253. doi:10.3390/jsan1030217.
 Taiwan Information Strategy, Internet and E-commerce Development Handbook - Strategic Information, Regulations, Contacts. IBP, Inc. USA. 2016. p. 79. ISBN 978-1514521021.
 Grell, Max; Dincer, Can; Le, Thao; Lauri, Alberto; Nunez Bajo, Estefania; Kasimatis, Michael; Barandun, Giandrin; Maier, Stefan A.; Cass, Anthony E. G. (2019). "Autocatalytic Metallization of Fabrics Using Si Ink, for Biosensors, Batteries and Energy Harvesting". Advanced Functional Materials. 29 (1): 1804798. doi:10.1002/adfm.201804798. ISSN 1616-301X. PMC 7384005. PMID 32733177.
 Dincer, Can; Bruch, Richard; Kling, André; Dittrich, Petra S.; Urban, Gerald A. (1 August 2017). "Multiplexed Point-of-Care Testing – xPOCT". Trends in Biotechnology. 35 (8): 728–742. doi:10.1016/j.tibtech.2017.03.013. ISSN 0167-7799. PMC 5538621. PMID 28456344.
 "What is HIE? | HealthIT.gov". www.healthit.gov. Retrieved 21 January 2020.
 Amiot, Emmanuel. "The Internet of Things. Disrupting Traditional Business Models" (PDF). Oliver Wyman. Retrieved 14 October 2018.
 Vermesan, Ovidiu, and Peter Friess, eds. Internet of things: converging technologies for smart environments and integrated ecosystems. River Publisher, 2013. https://www.researchgate.net/publication/272943881
 Mahmud, Khizir; Town, Graham E.; Morsalin, Sayidul; Hossain, M.J. (February 2018). "Integration of electric vehicles and management in the internet of energy". Renewable and Sustainable Energy Reviews. 82: 4179–4203. doi:10.1016/j.rser.2017.11.004.
 Xie, Xiao-Feng; Wang, Zun-Jing (2017). "Integrated in-vehicle decision support system for driving at signalized intersections: A prototype of smart IoT in transportation". Transportation Research Board (TRB) Annual Meeting, Washington, DC, USA.
 "Key Applications of the Smart IoT to Transform Transportation". 20 September 2016.
 Haase, Jan; Alahmad, Mahmoud; Nishi, Hiroaki; Ploennigs, Joern; Tsang, Kim Fung (2016). "The IOT mediated built environment: A brief survey". 2016 IEEE 14th International Conference on Industrial Informatics (INDIN). pp. 1065–1068. doi:10.1109/INDIN.2016.7819322. ISBN 978-1-5090-2870-2. S2CID 5554635.
 Yang, Chen; Shen, Weiming; Wang, Xianbin (January 2018). "The Internet of Things in Manufacturing: Key Issues and Potential Applications". IEEE Systems, Man, and Cybernetics Magazine. 4 (1): 6–15. doi:10.1109/MSMC.2017.2702391. S2CID 42651835.
 Severi, S.; Abreu, G.; Sottile, F.; Pastrone, C.; Spirito, M.; Berens, F. (23–26 June 2014). "M2M Technologies: Enablers for a Pervasive Internet of Things". The European Conference on Networks and Communications (EUCNC2014).
 Gubbi, Jayavardhana; Buyya, Rajkumar; Marusic, Slaven; Palaniswami, Marimuthu (24 February 2013). "Internet of Things (IoT): A vision, architectural elements, and future directions". Future Generation Computer Systems. 29 (7): 1645–1660. arXiv:1207.0203. doi:10.1016/j.future.2013.01.010. S2CID 204982032.
 Tan, Lu; Wang, Neng (20–22 August 2010). Future Internet: The Internet of Things. 3rd International Conference on Advanced Computer Theory and Engineering (ICACTE). 5. pp. 376–380. doi:10.1109/ICACTE.2010.5579543. ISBN 978-1-4244-6539-2. S2CID 40587.
 "Industrialized Construction in Academia" (PDF). Autodesk.
 Meola, A. (20 December 2016). "Why IoT, big data & smart farming are the future of agriculture". Business Insider. Insider, Inc. Retrieved 26 July 2018.
 Zhang, Q. (2015). Precision Agriculture Technology for Crop Farming. CRC Press. pp. 249–58. ISBN 9781482251081.
 "Google goes bilingual, Facebook fleshes out translation and TensorFlow is dope ~ And, Microsoft is assisting fish farmers in Japan". The Register.
 Vasisht, Deepak; Kapetanovic, Zerina; Won, Jongho; Jin, Xinxin; Chandra, Ranveer; Sinha, Sudipta; Kapoor, Ashish; Sudarshan, Madhusudhan; Stratman, Sean (2017). FarmBeats: An IoT Platform for Data-Driven Agriculture. pp. 515–529. ISBN 978-1-931971-37-9.
 "FarmBeats: AI, Edge & IoT for Agriculture". Microsoft Research. Retrieved 28 June 2021.
 "Monitoring apps: How the Internet of Things can turn your boat into a smart boat". Yachting World. 9 March 2020.
 Chui, Michael; Löffler, Markus; Roberts, Roger. "The Internet of Things". McKinsey Quarterly. McKinsey & Company. Retrieved 10 July 2014.
 "Smart Trash". Postscapes. Retrieved 10 July 2014.
 Poon, L. (22 June 2018). "Sleepy in Songdo, Korea's Smartest City". CityLab. Atlantic Monthly Group. Retrieved 26 July 2018.
 Rico, Juan (22–24 April 2014). "Going beyond monitoring and actuating in large scale smart cities". NFC & Proximity Solutions – WIMA Monaco.
 "A vision for a city today, a city of vision tomorrow". Sino-Singapore Guangzhou Knowledge City. Retrieved 11 July 2014.
 "San Jose Implements Intel Technology for a Smarter City". Intel Newsroom. Retrieved 11 July 2014.
 "Western Singapore becomes test-bed for smart city solutions". Coconuts Singapore. 19 June 2014. Retrieved 11 July 2014.
 Higginbotham, Stacey. "A group of wireless execs aim to build a nationwide network for the Internet of things". Fortune.com. Retrieved 8 June 2019.
 Freeman, Mike (9 September 2015). "On-Ramp Wireless becomes Ingenu, launches nationwide IoT network". SanDiegoUnionTribune.com. Retrieved 8 June 2019.
 Lipsky, Jessica. "IoT Clash Over 900 MHz Options". EETimes. Retrieved 15 May 2015.
 Alleven, Monica. "Sigfox launches IoT network in 10 UK cities". Fierce Wireless Tech. Retrieved 13 May 2015.
 Merritt, Rick. "13 Views of IoT World". EETimes. Retrieved 15 May 2015.
 Fitchard, Kevin (20 May 2014). "Sigfox brings its internet of things network to San Francisco". Gigaom. Retrieved 15 May 2015.
 Ujaley, Mohd (25 July 2018). "Cisco To Invest in Fiber Grid, IoT, Smart Cities in Andhra Pradesh". ProQuest 1774166769.
 "STE Security Innovation Awards Honorable Mention: The End of the Disconnect". securityinfowatch.com. Retrieved 12 August 2015.
 Parello, J.; Claise, B.; Schoening, B.; Quittek, J. (28 April 2014). "Energy Management Framework". IETF Internet Draft.
 Davies, Nicola. "How the Internet of Things will enable 'smart buildings'". Extreme Tech.
 "Molluscan eye". Retrieved 26 June 2015.
 Li, Shixing; Wang, Hong; Xu, Tao; Zhou, Guiping (2011). Application Study on Internet of Things in Environment Protection Field (Submitted manuscript). Lecture Notes in Electrical Engineering. 133. pp. 99–106. doi:10.1007/978-3-642-25992-0_13. ISBN 978-3-642-25991-3.
 "Use case: Sensitive wildlife monitoring". FIT French Project. Archived from the original on 14 July 2014. Retrieved 10 July 2014.
 Hart, Jane K.; Martinez, Kirk (1 May 2015). "Toward an environmental Internet of Things". Earth and Space Science. 2 (5): 194–200. Bibcode:2015E&SS....2..194H. doi:10.1002/2014EA000044.
 Scuotto, Veronica; Ferraris, Alberto; Bresciani, Stefano (4 April 2016). "Internet of Things". Business Process Management Journal. 22 (2): 357–367. doi:10.1108/bpmj-05-2015-0074. ISSN 1463-7154.
 Cameron, Lori. "Internet of Things Meets the Military and Battlefield: Connecting Gear and Biometric Wearables for an IoMT and IoBT". IEEE Computer Society. Retrieved 31 October 2019.
 "Army Takes on Wicked Problems With the Internet of Battlefield Things". MeriTalk. 30 January 2018. Retrieved 31 October 2019.
 Gudeman, Kim (6 October 2017). "Next-Generation Internet of Battle things (IoBT) Aims to Help Keep Troops and Civilians Safe". ECE Illinois. Retrieved 31 October 2019.
 "Internet of Battlefield Things (IOBT)". CCDC Army Research Laboratory. Retrieved 31 October 2019.
 "DARPA Floats a Proposal for the Ocean of Things". MeriTalk. 3 January 2018. Retrieved 31 October 2019.
 "How to make smart packaging even smarter". Packaging Digest. 4 June 2018. Retrieved 28 April 2020.
 foodnavigator-asia.com. "Connecting with consumers: The benefits - and dangers - of smart packaging for the F&B industry". foodnavigator-asia.com. Retrieved 28 April 2020.
 confectionerynews.com. "Which smart packaging technologies are readily available in 2018". confectionerynews.com. Retrieved 28 April 2020.
 Chen, Changsheng; Li, Mulin; Ferreira, Anselmo; Huang, Jiwu; Cai, Rizhao (2020). "A Copy-Proof Scheme Based on the Spectral and Spatial Barcoding Channel Models". IEEE Transactions on Information Forensics and Security. 15: 1056–1071. doi:10.1109/tifs.2019.2934861. ISSN 1556-6013. S2CID 201903693.
 "MIT unveils battery-free crypto tag for anti-counterfeit". www.securingindustry.com. 26 February 2020. Retrieved 28 April 2020.
 Nordrum, Amy (18 August 2016). "Popular Internet of Things Forecast of 50 Billion Devices by 2020 Is Outdated". IEEE Spectrum.
 Vermesan, Ovidiu; Friess, Peter (2013). Internet of Things: Converging Technologies for Smart Environments and Integrated Ecosystems (PDF). Aalborg, Denmark: River Publishers. ISBN 978-87-92982-96-4.
 Santucci, Gérald. "The Internet of Things: Between the Revolution of the Internet and the Metamorphosis of Objects" (PDF). European Commission Community Research and Development Information Service. Retrieved 23 October 2016.
 Mattern, Friedemann; Floerkemeier, Christian. "From the Internet of Computers to the Internet of Things" (PDF). ETH Zurich. Retrieved 23 October 2016.
 Lindner, Tim (13 July 2015). "The Supply Chain: Changing at the Speed of Technology". Connected World. Retrieved 18 September 2015.
 Köhn, Rüdiger. "Online-Kriminalität: Konzerne verbünden sich gegen Hacker". Faz.net.
 Hsu, Chin-Lung; Lin, Judy Chuan-Chuan (2016). "An empirical examination of consumer adoption of Internet of Things services: Network externalities and concern for information privacy perspectives". Computers in Human Behavior. 62: 516–527. doi:10.1016/j.chb.2016.04.023.
 "Smarter Things: The Autonomous IoT". GDR Blog. GDR Creative Intelligence. 5 January 2018. Retrieved 26 July 2018.
 Levine, Sergey; Finn, Chelsea; Darrell, Trevor; Abbeel, Pieter (2016). "End-to-End Training of Deep Visuomotor Policies" (PDF). The Journal of Machine Learning Research. 17 (1): 1334–1373. arXiv:1504.00702. Bibcode:2015arXiv150400702L.
 Mohammadi, Mehdi; Al-Fuqaha, Ala; Sorour, Sameh; Guizani, Mohsen (2018). "Deep Learning for IoT Big Data and Streaming Analytics: A Survey". IEEE Communications Surveys & Tutorials. 20 (4): 2923–2960. arXiv:1712.04301. doi:10.1109/COMST.2018.2844341. S2CID 9461213.
 Mahdavinejad, Mohammad Saeid; Rezvan, Mohammadreza; Barekatain, Mohammadamin; Adibi, Peyman; Barnaghi, Payam; Sheth, Amit P. (2018). "Machine learning for internet of things data analysis: A survey". Digital Communications and Networks. 4 (3): 161–175. arXiv:1802.06305. Bibcode:2018arXiv180206305S. doi:10.1016/j.dcan.2017.10.002. S2CID 2666574.
 Alippi, C. (2014). Intelligence for Embedded Systems. Springer Verlag. ISBN 978-3-319-05278-6.
 Delicato, F.C.; Al-Anbuky, A.; Wang, K., eds. (2018). Smart Cyber-Physical Systems: towards Pervasive Intelligence systems. Future Generation Computer Systems. Elsevier. Retrieved 26 July 2018.
 Traukina, Alena; Thomas, Jayant; Tyagi, Prashant; Reddipalli, Kishore (29 September 2018). Industrial Internet Application Development: Simplify IIoT development using the elasticity of Public Cloud and Native Cloud Services (1st ed.). Packt Publishing. p. 18.
 Hassan, Qusay; Khan, Atta; Madani, Sajjad (2018). Internet of Things: Challenges, Advances, and Applications. Boca Raton, Florida: CRC Press. p. 198. ISBN 9781498778510.
 Chauhuri, Abhik (2018). Internet of Things, for Things, and by Things. Boca Raton, Florida: CRC Press. ISBN 9781138710443.
 Pal, Arpan (May–June 2015). "Internet of Things: Making the Hype a Reality" (PDF). IT Pro. 17 (3): 2–4. doi:10.1109/MITP.2015.36. Retrieved 10 April 2016.
 "Gartner Says 6.4 Billion Connected "Things" Will Be in Use in 2016, Up 30 Percent From 2015". Gartner. 10 November 2015. Archived from the original on 12 November 2015. Retrieved 21 April 2016.
 Reza Arkian, Hamid (2017). "MIST: Fog-based Data Analytics Scheme with Cost-Efficient Resource Provisioning for IoT Crowdsensing Applications". Journal of Network and Computer Applications. 82: 152–165. doi:10.1016/j.jnca.2017.01.012.
 "IoT The outer Edge Computing". June 2019. Retrieved 3 June 2019.
 Cui, Laizhong; Yang, Shu; Chen, Ziteng; Pan, Yi; Ming, Zhong; Xu, Mingwei (May 2020). "A Decentralized and Trusted Edge Computing Platform for Internet of Things". IEEE Internet of Things Journal. 7 (5): 3910–3922. doi:10.1109/JIOT.2019.2951619. ISSN 2327-4662. S2CID 209097962.
 Nguyen, Tien-Dung; Huh, Eui-Nam; Jo, Minho (June 2019). "Decentralized and Revised Content-Centric Networking-Based Service Deployment and Discovery Platform in Mobile Edge Computing for IoT Devices". IEEE Internet of Things Journal. 6 (3): 4162–4175. doi:10.1109/JIOT.2018.2875489. ISSN 2327-4662. S2CID 69250756.
 Xiong, Zehui; Zhang, Yang; Luong, Nguyen Cong; Niyato, Dusit; Wang, Ping; Guizani, Nadra (January 2020). "The Best of Both Worlds: A General Architecture for Data Management in Blockchain-enabled Internet-of-Things". IEEE Network. 34 (1): 166–173. doi:10.1109/MNET.001.1900095. ISSN 1558-156X. S2CID 211050783.
 Alhaizaey, Yousef; Singer, Jeremy; Michala, Anna Lito (June 2021). "Optimizing Task Allocation for Edge Micro-Clusters in Smart Cities". 2021 IEEE 22nd International Symposium on a World of Wireless, Mobile and Multimedia Networks (WoWMoM): 341–347. doi:10.1109/WoWMoM51794.2021.00062. ISBN 978-1-6654-2263-5. S2CID 235780952.
 Guo, Hongzhi; Liu, Jiajia; Qin, Huiling (January 2018). "Collaborative Mobile Edge Computation Offloading for IoT over Fiber-Wireless Networks". IEEE Network. 32 (1): 66–71. doi:10.1109/MNET.2018.1700139. ISSN 1558-156X. S2CID 12479631.
 Messaoud, Seifeddine; Bradai, Abbas; Bukhari, Syed Hashim Raza; Quang, Pham Tran Anh; Ahmed, Olfa Ben; Atri, Mohamed (1 December 2020). "A survey on machine learning in Internet of Things: Algorithms, strategies, and applications". Internet of Things. 12: 100314. doi:10.1016/j.iot.2020.100314. ISSN 2542-6605. S2CID 228876304.
 Cherupally, Sumanth Reddy; Boga, Srinivas; Podili, Prashanth; Kataoka, Kotaro (January 2021). "Lightweight and Scalable DAG based distributed ledger for verifying IoT data integrity". 2021 International Conference on Information Networking (ICOIN): 267–272. doi:10.1109/ICOIN50884.2021.9334000. ISBN 978-1-7281-9101-0. S2CID 231825899.
 Fan, Xinxin; Chai, Qi; Xu, Lei; Guo, Dong (6 October 2020). "DIAM-IoT: A Decentralized Identity and Access Management Framework for Internet of Things". Proceedings of the 2nd ACM International Symposium on Blockchain and Secure Critical Infrastructure. BSCI '20. Taipei, Taiwan: Association for Computing Machinery: 186–191. doi:10.1145/3384943.3409436. ISBN 978-1-4503-7610-5. S2CID 222142832.
 Durand, Arnaud; Gremaud, Pascal; Pasquier, Jacques (22 October 2017). "Decentralized web of trust and authentication for the internet of things". Proceedings of the Seventh International Conference on the Internet of Things. IoT '17. Linz, Austria: Association for Computing Machinery: 1–2. doi:10.1145/3131542.3140263. ISBN 978-1-4503-5318-2. S2CID 3645848.
 Rathore, Shailendra; Wook Kwon, Byung; Park, Jong Hyuk (1 October 2019). "BlockSecIoTNet: Blockchain-based decentralized security architecture for IoT network". Journal of Network and Computer Applications. 143: 167–177. doi:10.1016/j.jnca.2019.06.019. ISSN 1084-8045. S2CID 198365021.
 Gautier, Philippe; Gonzalez, Laurent (2011). L'Internet des Objets... Internet, mais en mieux (PDF). Foreword by Gérald Santucci (European commission), postword by Daniel Kaplan (FING) and Michel Volle. Paris: AFNOR editions. ISBN 978-2-12-465316-4.
 Marginean, M.-T.; Lu, C. (2016). "sDOMO communication protocol for home robotic systems in the context of the internet of things". Computer Science, Technology And Application. World Scientific. pp. 151–60. ISBN 9789813200432.
 Montazerolghaem, Ahmadreza (2021). "Software-defined Internet of Multimedia Things: Energy-efficient and Load-balanced Resource Management". IEEE Internet of Things Journal: 1–1. doi:10.1109/JIOT.2021.3095237. ISSN 2327-4662.
 Rowayda, A. Sadek (May 2018). "– An Agile Internet of Things (IoT) based Software Defined Network (SDN) Architecture" (PDF). Egyptian Computer Science Journal.
 Waldner, Jean-Baptiste (2007). Nanoinformatique et intelligence ambiante. Inventer l'Ordinateur du XXIeme Siècle. London: Hermes Science. p. 254. ISBN 978-2-7462-1516-0.
 Montazerolghaem, Ahmadreza; Yaghmaee, Mohammad Hossein (April 2020). "Load-Balanced and QoS-Aware Software-Defined Internet of Things". IEEE Internet of Things Journal. 7 (4): 3323–3337. doi:10.1109/JIOT.2020.2967081. ISSN 2327-4662. S2CID 214551067.
 "OGC SensorThings API standard specification". OGC. Retrieved 15 February 2016.
 "OGC Sensor Web Enablement: Overview And High Level Architecture". OGC. Retrieved 15 February 2016.
 Minteer, A. (2017). "Chapter 9: Applying Geospatial Analytics to IoT Data". Analytics for the Internet of Things (IoT). Packt Publishing. pp. 230–57. ISBN 9781787127579.
 van der Zee, E.; Scholten, H. (2014). "Spatial Dimensions of Big Data: Application of Geographical Concepts and Spatial Technology to the Internet of Things". In Bessis, N.; Dobre, C. (eds.). Big Data and Internet of Things: A Roadmap for Smart Environments. Springer. pp. 137–68. ISBN 9783319050294.
 Gassée, J.-L. (12 January 2014). "Internet of Things: The "Basket of Remotes" Problem". Monday Note. Retrieved 26 June 2015.
 de Sousa, M. (2015). "Chapter 10: Integrating with Muzzley". Internet of Things with Intel Galileo. Packt Publishing. p. 163. ISBN 9781782174912.
 "Social IoT". Enabling the Internet of Things. ieeexplore.ieee.org. 2021. pp. 195–211. doi:10.1002/9781119701460.ch9. ISBN 9781119701255. S2CID 240696468. Retrieved 9 July 2021.
 Saleem, Yasir; Crespi, Noel; Pace, Pasquale (April 2018). "SCDIoT: Social Cross-Domain IoT Enabling Application-to-Application Communications". 2018 IEEE International Conference on Cloud Engineering (IC2E). Orlando, FL: IEEE: 346–350. doi:10.1109/IC2E.2018.00068. ISBN 978-1-5386-5008-0. S2CID 21720322.
 Afzal, Bilal; Umair, Muhammad; Asadullah Shah, Ghalib; Ahmed, Ejaz (March 2019). "Enabling IoT platforms for social IoT applications: Vision, feature mapping, and challenges". Future Generation Computer Systems. 92: 718–731. doi:10.1016/j.future.2017.12.002. S2CID 57379503.
 Bhatia, Munish; Sood, Sandeep K. (June 2020). "Quantum Computing-Inspired Network Optimization for IoT Applications". IEEE Internet of Things Journal. 7 (6): 5590–5598. doi:10.1109/JIOT.2020.2979887. ISSN 2327-4662. S2CID 215845606.
 Cheng, Wai Khuen; Ileladewa, Adeoye Abiodun; Tan, Teik Boon (January 2019). "A Personalized Recommendation Framework for Social Internet of Things (SIoT)". 2019 International Conference on Green and Human Information Technology (ICGHIT): 24–29. doi:10.1109/ICGHIT.2019.00013. ISBN 978-1-7281-0627-4. S2CID 204702019.
 Atzori, Luigi; Iera, Antonio; Morabito, Giacomo; Nitti, Michele (14 November 2012). "The Social Internet of Things (SIoT) – When social networks meet the Internet of Things: Concept, architecture and network characterization". Computer Networks. 56 (16): 3594–3608. doi:10.1016/j.comnet.2012.07.010. ISSN 1389-1286.
 Khelloufi, Amar; Ning, Huansheng; Dhelim, Sahraoui; Qiu, Tie; Ma, Jianhua; Huang, Runhe; Atzori, Luigi (1 February 2021). "A Social-Relationships-Based Service Recommendation System for SIoT Devices". IEEE Internet of Things Journal. 8 (3): 1859–1870. doi:10.1109/JIOT.2020.3016659. ISSN 2327-4662. S2CID 226476576.
 Miori, Vittorio; Russo, Dario (June 2017). "Improving life quality for the elderly through the Social Internet of Things (SIoT)". 2017 Global Internet of Things Summit (GIoTS). Geneva, Switzerland: IEEE: 1–6. doi:10.1109/GIOTS.2017.8016215. ISBN 978-1-5090-5873-0. S2CID 7475703.
 Udawant, Omkar; Thombare, Nikhil; Chauhan, Devanand; Hadke, Akash; Waghole, Dattatray (December 2017). "Smart ambulance system using IoT". 2017 International Conference on Big Data, IoT and Data Science (BID). Pune, India: IEEE: 171–176. doi:10.1109/BID.2017.8336593. ISBN 978-1-5090-6593-6. S2CID 4865714.
 Saleem, Yasir; Crespi, Noel; Rehmani, Mubashir Husain; Copeland, Rebecca; Hussein, Dina; Bertin, Emmanuel (December 2016). "Exploitation of social IoT for recommendation services". 2016 IEEE 3rd World Forum on Internet of Things (WF-IoT). Reston, VA, USA: IEEE: 359–364. doi:10.1109/WF-IoT.2016.7845500. ISBN 978-1-5090-4130-5. S2CID 206866361.
 Andrade, Rossana M.C.; Aragão, Belmondo R.; Oliveira, Pedro Almir M.; Maia, Marcio E.F.; Viana, Windson; Nogueira, Tales P. (April 2021). "Multifaceted infrastructure for self-adaptive IoT systems". Information and Software Technology. 132: 106505. doi:10.1016/j.infsof.2020.106505. S2CID 231731945.
 Farahbakhsh, Bahareh; Fanian, Ali; Manshaei, Mohammad Hossein (March 2021). "TGSM: Towards trustworthy group-based service management for social IoT". Internet of Things. 13: 100312. doi:10.1016/j.iot.2020.100312. ISSN 2542-6605. S2CID 228806944.
 Iqbal, Muhammad Azhar; Hussain, Sajjad; Xing, Huanlai; Imran, Muhammad (February 2021). Enabling the Internet of Things: Fundamentals, Design, and Applications (1 ed.). Wiley. doi:10.1002/9781119701460.ch9. ISBN 978-1-119-70125-5. S2CID 240696468.
 Want, Roy; Schilit, Bill N.; Jenson, Scott (2015). "Enabling the Internet of Things". Computer. 48: 28–35. doi:10.1109/MC.2015.12. S2CID 17384656.
 "The Internet of Things: a jumbled mess or a jumbled mess?". The Register. Retrieved 5 June 2016.
 "Can we talk? Internet of Things vendors face a communications 'mess'". Computerworld. 18 April 2014. Retrieved 5 June 2016.
 Hassan, Q.F. (2018). Internet of Things A to Z: Technologies and Applications. John Wiley & Sons. pp. 27–8. ISBN 9781119456759.
 Dan Brickley et al., c. 2001
 Sheng, M.; Qun, Y.; Yao, L.; Benatallah, B. (2017). Managing the Web of Things: Linking the Real World to the Web. Morgan Kaufmann. pp. 256–8. ISBN 9780128097656.
 Waldner, Jean-Baptiste (2008). Nanocomputers and Swarm Intelligence. London: ISTE. pp. 227–231. ISBN 978-1-84704-002-2.
 Kushalnagar, N.; Montenegro, G.; Schumacher, C. (August 2007). IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs): Overview, Assumptions, Problem Statement, and Goals. IETF. doi:10.17487/RFC4919. RFC 4919.
 Sun, Charles C. (1 May 2014). "Stop using Internet Protocol Version 4!". Computerworld.
 Thomson, S.; Narten, T.; Jinmei, T. (September 2007). IPv6 Stateless Address Autoconfiguration. IETF. doi:10.17487/RFC4862. RFC 4862.
 Xped Limited, ADRC Overview", from Wikipedia
 Alsulami, M. M.; Akkari, N. (April 2018). "The role of 5G wireless networks in the internet-of- things (IoT)". 2018 1st International Conference on Computer Applications Information Security (ICCAIS): 1–8. doi:10.1109/CAIS.2018.8471687. ISBN 978-1-5386-4427-0. S2CID 52897932.
 Jing, J.; Li, H. (2012). "Research on the Relevant Standards of Internet of Things". In Wang, Y.; Zhang, X. (eds.). Internet of Things: International Workshop, IOT 2012. Springer. pp. 627–32. ISBN 9783642324277.
 Mahmood, Z. (2018). Connected Environments for the Internet of Things: Challenges and Solutions. Springer. pp. 89–90. ISBN 9783319701028.
 "Project Connected Home over IP". Google Developers Blog. Retrieved 16 September 2020.
 Mihalcik, Carrie. "Apple, Amazon, Google, and others want to create a new standard for smart home tech". CNET. Retrieved 24 December 2019.
 Strategy, Moor Insights and. "CHIP Shot: Will Project Connected Home Over IP Get Us Onto The IoT Green?". Forbes. Retrieved 3 September 2020.
 "Digital Link - Standards | GS1". www.gs1.org. 12 November 2018. Retrieved 28 April 2020.
 "P1451-99 - Standard for Harmonization of Internet of Things (IoT) Devices and Systems". IEEE. Retrieved 26 July 2021.
 Howard, Philip N. (1 June 2015). "The Internet of Things is Posed to Change Democracy Itself". Politico. Retrieved 8 August 2017.
 Thompson, Kirsten; Mattalo, Brandon (24 November 2015). "The Internet of Things: Guidance, Regulation and the Canadian Approach". CyberLex. Retrieved 23 October 2016.
 "The Question of Who Owns the Data Is About to Get a Lot Trickier". Fortune. 6 April 2016. Retrieved 23 October 2016.
 Weber, R.H.; Weber, R. (2010). Internet of Things: Legal Perspectives. Springer Science & Business Media. pp. 59–64. ISBN 9783642117107.
 Hassan, Q.F. (2018). Internet of Things A to Z: Technologies and Applications. John Wiley & Sons. pp. 41–4. ISBN 9781119456759.
 Hassan, Q.F.; Khan, A. ur R.; Madani, S.A. (2017). Internet of Things: Challenges, Advances, and Applications. CRC Press. pp. 41–2. ISBN 9781498778534.
 Lopez, Javier; Rios, Ruben; Bao, Feng; Wang, Guilin (2017). "Evolving privacy: From sensors to the Internet of Things". Future Generation Computer Systems. 75: 46–57. doi:10.1016/j.future.2017.04.045.
 "The 'Internet of Things': Legal Challenges in an Ultra-connected World". Mason Hayes & Curran. 22 January 2016. Retrieved 23 October 2016.
 Brown, Ian (2015). "Regulation and the Internet of Things" (PDF). Oxford Internet Institute. Retrieved 23 October 2016.
 "FTC Report on Internet of Things Urges Companies to Adopt Best Practices to Address Consumer Privacy and Security Risks". Federal Trade Commission. 27 January 2015. Retrieved 23 October 2016.
 Lawson, Stephen (2 March 2016). "IoT users could win with a new bill in the US Senate". Tech Barrista. Retrieved 9 December 2019.
 "California Legislative Information – SB-327 Information privacy: connected devices".
 Pittman, F. Paul (2 February 2016). "Legal Developments in Connected Car Arena Provide Glimpse of Privacy and Data Security Regulation in Internet of Things". Lexology. Retrieved 23 October 2016.
 Rasit, Yuce, Mehmet; Claus, Beisswenger, Stefan; Mangalam, Srikanth; Das, Prasanna, Lal; Martin, Lukac (2 November 2017). "Internet of things : the new government to business platform – a review of opportunities, practices, and challenges": 1–112.
 Page, Carly (4 December 2021). "Is the UK government's new IoT cybersecurity bill fit for purpose?". TechCrunch. Retrieved 4 December 2021.
 Wieland, Ken (25 February 2016). "IoT experts fret over fragmentation". Mobile World.
 Wallace, Michael (19 February 2016). "Fragmentation is the enemy of the Internet of Things". Qualcomm.com.
 Bauer, Harald; Patel, Mark; Veira, Jan (October 2015). "Internet of Things: Opportunities and challenges for semiconductor companies". McKinsey & Co.
 Ardiri, Aaron (8 July 2014). "Will fragmentation of standards only hinder the true potential of the IoT industry?". evothings.com.
 "IOT Brings Fragmentation in Platform" (PDF). arm.com.
 Raggett, Dave (27 April 2016). "Countering Fragmentation with the Web of Things: Interoperability across IoT platforms" (PDF). W3C.
 Kovach, Steve (30 July 2013). "Android Fragmentation Report". Business Insider. Retrieved 19 October 2013.
 "Ultimate Guide to Internet of Things (IoT) Connectivity".
 Piedad, Floyd N. "Will Android fragmentation spoil its IoT appeal?". TechBeacon.
 Franceschi-Bicchierai, Lorenzo (29 July 2015). "Goodbye, Android". Motherboard. Vice.
 Kingsley-Hughes, Adrian. "The toxic hellstew survival guide". ZDnet. Retrieved 2 August 2015.
 Tung, Liam (13 October 2015). "Android security a 'market for lemons' that leaves 87 percent vulnerable". ZDNet. Retrieved 14 October 2015.
 Thomas, Daniel R.; Beresford, Alastair R.; Rice, Andrew (2015). Proceedings of the 5th Annual ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices – SPSM '15 (PDF). Computer Laboratory, University of Cambridge. pp. 87–98. doi:10.1145/2808117.2808118. ISBN 9781450338196. S2CID 14832327. Retrieved 14 October 2015.
 Howard, Philip N. (2015). Pax Technica: How the internet of things May Set Us Free, Or Lock Us Up. New Haven, CT: Yale University Press. ISBN 978-0-30019-947-5.
 McEwan, Adrian (2014). "Designing the Internet of Things" (PDF). Retrieved 1 June 2016.
 Moy de Vitry, Matthew; Schneider, Mariane; Wani, Omar; Liliane, Manny; Leitao, João P.; Eggimann, Sven (2019). "Smart urban water systems: what could possibly go wrong?". Environmental Research Letters. 14 (8): 081001. Bibcode:2019ERL....14h1001M. doi:10.1088/1748-9326/ab3761.
 "Panopticon as a metaphor for the internet of things" (PDF). The Council of the Internet of Things. Retrieved 6 June 2016.
 "Foucault" (PDF). UCLA.
 "Deleuze – 1992 – Postscript on the Societies of Control" (PDF). UCLA.
 Verbeek, Peter-Paul (2011). Moralizing Technology: Understanding and Designing the Morality of Things. Chicago: The University of Chicago Press. ISBN 978-0-22685-291-1.
 Cardwell, Diane (18 February 2014). "At Newark Airport, the Lights Are On, and They're Watching You". The New York Times.
 Hardy, Quentin (4 February 2015). "Tim O'Reilly Explains the Internet of Things". The New York Times.
 Webb, Geoff (5 February 2015). "Say Goodbye to Privacy". WIRED. Retrieved 15 February 2015.
 Crump, Catherine; Harwood, Matthew (25 March 2014). "The Net Closes Around Us". TomDispatch.
 Brown, Ian (12 February 2013). "Britain's Smart Meter Programme: A Case Study in Privacy by Design". International Review of Law, Computers & Technology. 28 (2): 172–184. doi:10.1080/13600869.2013.801580. S2CID 62756630. SSRN 2215646.
 "The Societal Impact of the Internet of Things" (PDF). British Computer Society. 14 February 2013. Retrieved 23 October 2016.
 Gubbi, Jayavardhana; Buyya, Rajkumar; Marusic, Slaven; Palaniswami, Marimuthu (1 September 2013). "Internet of Things (IoT): A vision, architectural elements, and future directions". Future Generation Computer Systems. Including Special sections: Cyber-enabled Distributed Computing for Ubiquitous Cloud and Network Services & Cloud Computing and Scientific Applications – Big Data, Scalable Analytics, and Beyond. 29 (7): 1645–1660. arXiv:1207.0203. doi:10.1016/j.future.2013.01.010. S2CID 204982032.
 Acharjya, D.P.; Ahmed, N.S.S. (2017). "Recognizing Attacks in Wireless Sensor Network in View of Internet of Things". In Acharjya, D.P.; Geetha, M.K. (eds.). Internet of Things: Novel Advances and Envisioned Applications. Springer. pp. 149–50. ISBN 9783319534725.
 Hussain, A. (June 2017). "Energy Consumption of Wireless IoT Nodes" (PDF). Norwegian University of Science and Technology. Retrieved 26 July 2018.
 "We Asked Executives About The Internet of Things And Their Answers Reveal That Security Remains A Huge Concern". Business Insider. Retrieved 26 June 2015.
 Singh, Jatinder; Pasquier, Thomas; Bacon, Jean; Ko, Hajoon; Eyers, David (2015). "Twenty Cloud Security Considerations for Supporting the Internet of Things". IEEE Internet of Things Journal. 3 (3): 1. doi:10.1109/JIOT.2015.2460333. S2CID 4732406.
 Clearfield, Chris. "Why The FTC Can't Regulate The Internet of Things". Forbes. Retrieved 26 June 2015.
 Feamster, Nick (18 February 2017). "Mitigating the Increasing Risks of an Insecure Internet of Things". Freedom to Tinker. Retrieved 8 August 2017.
 Li, S. (2017). "Chapter 1: Introduction: Securing the Internet of Things". In Li, S.; Xu, L.D. (eds.). Securing the Internet of Things. Syngress. p. 4. ISBN 9780128045053.
 Bastos, D.; Shackleton, M.; El-Moussa, F. (2018). "Internet of Things: A Survey of Technologies and Security Risks in Smart Home and City Environments". Living in the Internet of Things: Cybersecurity of the IoT - 2018. pp. 30 (7 pp.). doi:10.1049/cp.2018.0030. ISBN 9781785618437.
 Harbi, Yasmine; Aliouat, Zibouda; Harous, Saad; Bentaleb, Abdelhak; Refoufi, Allaoua (September 2019). "A Review of Security in Internet of Things". Wireless Personal Communications. 108 (1): 325–344. doi:10.1007/s11277-019-06405-y. ISSN 0929-6212. S2CID 150181134.
 Liu, Ximeng; Yang, Yang; Choo, Kim-Kwang Raymond; Wang, Huaqun (24 September 2018). "Security and Privacy Challenges for Internet-of-Things and Fog Computing". Wireless Communications and Mobile Computing. 2018: 1–3. doi:10.1155/2018/9373961. ISSN 1530-8669.
 Morrissey, Janet (22 January 2019). "In the Rush to Join the Smart Home Crowd, Buyers Should Beware". The New York Times. ISSN 0362-4331. Retrieved 26 February 2020.
 Ahmadi, Mohsen; Kiaei, Pantea; Emamdoost, Navid (2021). SN4KE: Practical Mutation Testing at Binary Level (PDF) (MSc). NDSS Symposium 2021.
 Clearfield, Christopher (26 June 2013). "Rethinking Security for the Internet of Things". Harvard Business Review Blog.
 Witkovski, Adriano; Santin, Altair; Abreu, Vilmar; Marynowski, Joao (2014). "An IdM and Key-Based Authentication Method for Providing Single Sign-On in IoT". 2015 IEEE Global Communications Conference (GLOBECOM). pp. 1–6. doi:10.1109/GLOCOM.2014.7417597. ISBN 978-1-4799-5952-5. S2CID 8108114.
 Steinberg, Joseph (27 January 2014). "These Devices May Be Spying on You (Even in Your Own Home)". Forbes. Retrieved 27 May 2014.
 Greenberg, Andy (21 July 2015). "Hackers Remotely Kill a Jeep on the Highway—With Me in It". Wired. Retrieved 21 July 2015.
 Scientific American, April 2015, p.68.
 Loukas, George (June 2015). Cyber-Physical Attacks A growing invisible threat. Oxford, UK: Butterworh-Heinemann (Elsevier). p. 65. ISBN 9780128012901.
 Woolf, Nicky (26 October 2016). "DDoS attack that disrupted internet was largest of its kind in history, experts say". The Guardian.
 Antonakakis, Manos; April, Tim; Bailey, Michael; Bernhard, Matt; Bursztein, Elie; Cochran, Jaime; Durumeric, Zakir; Halderman, J. Alex; Invernizzi, Luca (18 August 2017). Understanding the Mirai Botnet (PDF). Usenix. ISBN 978-1-931971-40-9. Retrieved 13 May 2018.
 "The "anti-patterns" that turned the IoT into the Internet of Shit / Boing Boing". boingboing.net. 3 May 2017.
 Ali, Junade (2 May 2017). "IoT Security Anti-Patterns". Cloudflare Blog.
 Schneier, Bruce (6 October 2016). "We Need to Save the Internet from the Internet of Things". Motherboard.
 "Disruptive Technologies Global Trends 2025" (PDF). National Intelligence Council (NIC). April 2008. p. 27.
 Ackerman, Spencer (15 March 2012). "CIA Chief: We'll Spy on You Through Your Dishwasher". WIRED. Retrieved 26 June 2015.
 https://www.facebook.com/geoffreyfowler. "The doorbells have eyes: The privacy battle brewing over home security cameras". Washington Post. Retrieved 3 February 2019.
 "Building the Web of Things – Mozilla Hacks – the Web developer blog". Mozilla Hacks – the Web developer blog.
 "The Step Towards Innovation".
 "Global IoT Security Market to reach a market size of $29.2 billion by 2022".
 Ward, Mark (23 September 2015). "Smart devices to get security tune-up". BBC News.
 "Executive Steering Board". IoT Security Foundation.
 Schneier, Bruce (1 February 2017). "Security and the Internet of Things".
 Alfandi, Omar; Hasan, Musaab; Balbahaith, Zayed (2019), "Assessment and Hardening of IoT Development Boards", Lecture Notes in Computer Science, Springer International Publishing, pp. 27–39, doi:10.1007/978-3-030-30523-9_3, ISBN 978-3-030-30522-2, S2CID 202550425
 Nguyen, Dang Tu; Song, Chengyu; Qian, Zhiyun; V. Krishnamurthy, Srikanth; J. M. Colbert, Edward; McDaniel, Patrick (2018). IoTSan: Fortifying the Safety of IoT Systems. Proc. of the 14th International Conference on emerging Networking EXperiments and Technologies (CoNEXT '18). Heraklion, Greece. arXiv:1810.09551. doi:10.1145/3281411.3281440. arXiv:1810.09551.
 "SmartThings". SmartThings.com.
 "HomeKit – Apple Developer". developer.apple.com.
 "Amazon Alexa". developer.amazon.com.
 Fielding, Roy Thomas (2000). "Architectural Styles and the Design of Network-based Software Architectures" (PDF). University of California, Irvine.
 Littman, Michael; Kortchmar, Samuel (11 June 2014). "The Path to a Programmable World". Footnote. Retrieved 14 June 2014.
 Finley, Klint (6 May 2014). "The Internet of Things Could Drown Our Environment in Gadgets". Wired.
 Light, A.; Rowland, C. (2015). "Chapter 11: Responsible IoT Design". In Rowland, C.; Goodman, E.; Charlier, M.; et al. (eds.). Designing Connected Products: UX for the Consumer Internet of Things. O'Reilly Media. pp. 457–64. ISBN 9781449372569.
 Gilbert, Arlo (3 April 2016). "The time that Tony Fadell sold me a container of hummus". Retrieved 7 April 2016.
 Walsh, Kit (5 April 2016). "Nest Reminds Customers That Ownership Isn't What It Used to Be". Electronic Frontier Foundation. Retrieved 7 April 2016.
 "Taming the IoT terminology zoo: what does it all mean?". Information Age. Vitesse Media Plc. 30 July 2015.
 "Technology Working Group". The Industrial Internet Consortium. Retrieved 21 March 2017.
 "Vocabulary Technical Report". The Industrial Internet Consortium. Retrieved 21 March 2017.
 "Acceleration Sensing". IoT One. Retrieved 21 March 2017.
 "IoT Terms Database". IoT One. Retrieved 21 March 2017.
 "Quick Guide". IoT ONE. Retrieved 26 July 2018.
 "Why The Consumer Internet of Things Is Stalling". Forbes. Retrieved 24 March 2017.
 "Every. Thing. Connected. A study of the adoption of 'Internet of Things' among Danish companies" (PDF). Ericsson. Retrieved 2 May 2020.
 Zhang, Zhi-Kai; Cho, Michael Cheng Yi; Wang, Chia-Wei; Hsu, Chia-Wei; Chen, Chong-Kuan; Shieh, Shiuhpyng (2014). "IoT Security: Ongoing Challenges and Research Opportunities". 2014 IEEE 7th International Conference on Service-Oriented Computing and Applications. pp. 230–234. doi:10.1109/SOCA.2014.58. ISBN 978-1-4799-6833-6. S2CID 18445510.
 Khan, Minhaj Ahmad; Salah, Khaled (2018). "IoT security: Review, blockchain solutions, and open challenges". Future Generation Computer Systems. 82: 395–411. doi:10.1016/j.future.2017.11.022.
 Zhou, Wei; Jia, Yan; Peng, Anni; Zhang, Yuqing; Liu, Peng (2019). "The Effect of IoT New Features on Security and Privacy: New Threats, Existing Solutions, and Challenges Yet to be Solved". IEEE Internet of Things Journal. 6 (2): 1606–1616. arXiv:1802.03110. doi:10.1109/JIOT.2018.2847733. S2CID 31057653.
 Supriya, S.; Padaki, Sagar (2016). "Data Security and Privacy Challenges in Adopting Solutions for IOT". 2016 IEEE International Conference on Internet of Things (iThings) and IEEE Green Computing and Communications (GreenCom) and IEEE Cyber, Physical and Social Computing (CPSCom) and IEEE Smart Data (SmartData). pp. 410–415. doi:10.1109/iThings-GreenCom-CPSCom-SmartData.2016.97. ISBN 978-1-5090-5880-8. S2CID 34661195.
 "California Legislative Information".
 "Oregon State Legislature".
 Anthony, Scott (15 July 2016). "Disruptive Innovation: Kodak's Downfall Wasn't About Technology". Harvard Business Review. Harvard Business Publishing. Retrieved 30 March 2017.
 "World Economic Forum: The Next Economic Growth Engine – Scaling Fourth Industrial Revolution Technologies in Production" (PDF). World Economic Forum. January 2018. p. 4.
 at 11:15, Kat Hall 23 May 2017. "Three-quarters of IoT projects are failing, says Cisco". www.theregister.co.uk. Retrieved 29 January 2020.
 Prasher, V. S.; Onu, Stephen (15 September 2020). "The Internet of Things (IoT) upheaval: overcoming management challenges". The Journal of Modern Project Management. 8 (2). doi:10.19255/JMPM02402 (inactive 31 October 2021). ISSN 2317-3963.
Bibliography
	Wikimedia Commons has media related to Internet of things.
Acharjya, D.P.; Geetha, M.K., eds. (2017). Internet of Things: Novel Advances and Envisioned Applications. Springer. p. 311. ISBN 9783319534725.
Li, S.; Xu, L.D., eds. (2017). Securing the Internet of Things. Syngress. p. 154. ISBN 9780128045053.
Rowland, C.; Goodman, E.; Charlier, M.; et al., eds. (2015). Designing Connected Products: UX for the Consumer Internet of Things. O'Reilly Media. p. 726. ISBN 9781449372569.
Thomas, Jayant; Traukina, Alena (2018). Industrial Internet Application Development: Simplify IIoT development using the elasticity of Public Cloud and Native Cloud Services. Packt Publishing. p. 25. ISBN 978-1788298599.
Stephenson, W. David (2018). The Future Is Smart: how your company can capitalize on the Internet of Things--and win in a connected economy. HarperCollins Leadership. p. 250. ISBN 9780814439777.
vte
Ambient intelligence
vte
Embedded systems
vte
Emerging technologies
Search the TechTarget Network
Search the TechTarget Network

LOGIN REGISTER
TECHTARGET NETWORKBE A CONTRIBUTORFULL STREAMSTARTING POINTDEFINITIONSPREMIUM CONTENTSPONSORED COMMUNITIESRSS
IoT Agenda
TOPIC
Business
SUBTOPIC
Strategy
Follow: 
Tech Accelerator
Ultimate IoT implementation guide for businesses
View More
DEFINITION
What is internet of things (IoT)?
Alexander S. Gillis
By
Alexander S. Gillis, Technical Writer and Editor
The internet of things, or IoT, is a system of interrelated computing devices, mechanical and digital machines, objects, animals or people that are provided with unique identifiers (UIDs) and the ability to transfer data over a network without requiring human-to-human or human-to-computer interaction.

A thing in the internet of things can be a person with a heart monitor implant, a farm animal with a biochip transponder, an automobile that has built-in sensors to alert the driver when tire pressure is low or any other natural or man-made object that can be assigned an Internet Protocol (IP) address and is able to transfer data over a network.

Increasingly, organizations in a variety of industries are using IoT to operate more efficiently, better understand customers to deliver enhanced customer service, improve decision-making and increase the value of the business.

How does IoT work?
An IoT ecosystem consists of web-enabled smart devices that use embedded systems, such as processors, sensors and communication hardware, to collect, send and act on data they acquire from their environments. IoT devices share the sensor data they collect by connecting to an IoT gateway or other edge device where data is either sent to the cloud to be analyzed or analyzed locally. Sometimes, these devices communicate with other related devices and act on the information they get from one another. The devices do most of the work without human intervention, although people can interact with the devices -- for instance, to set them up, give them instructions or access the data.

THIS ARTICLE IS PART OF

Ultimate IoT implementation guide for businesses
Which also includes:
Top 8 IoT applications and examples in business
Create the right approach to IoT adoption and scalability
5 IoT security threats to prioritize
The connectivity, networking and communication protocols used with these web-enabled devices largely depend on the specific IoT applications deployed.

IoT can also make use of artificial intelligence (AI) and machine learning to aid in making data collecting processes easier and more dynamic.

IoT system
An example of how an IoT system works from collecting data to taking action
Why is IoT important?
The internet of things helps people live and work smarter, as well as gain complete control over their lives. In addition to offering smart devices to automate homes, IoT is essential to business. IoT provides businesses with a real-time look into how their systems really work, delivering insights into everything from the performance of machines to supply chain and logistics operations.

IoT enables companies to automate processes and reduce labor costs. It also cuts down on waste and improves service delivery, making it less expensive to manufacture and deliver goods, as well as offering transparency into customer transactions.

As such, IoT is one of the most important technologies of everyday life, and it will continue to pick up steam as more businesses realize the potential of connected devices to keep them competitive.


What are the benefits of IoT to organizations?
The internet of things offers several benefits to organizations. Some benefits are industry-specific, and some are applicable across multiple industries. Some of the common benefits of IoT enable businesses to:

monitor their overall business processes;
improve the customer experience (CX);
save time and money;
enhance employee productivity;
integrate and adapt business models;
make better business decisions; and
generate more revenue.
IoT encourages companies to rethink the ways they approach their businesses and gives them the tools to improve their business strategies.

Generally, IoT is most abundant in manufacturing, transportation and utility organizations, making use of sensors and other IoT devices; however, it has also found use cases for organizations within the agriculture, infrastructure and home automation industries, leading some organizations toward digital transformation.

IoT can benefit farmers in agriculture by making their job easier. Sensors can collect data on rainfall, humidity, temperature and soil content, as well as other factors, that would help automate farming techniques.

The ability to monitor operations surrounding infrastructure is also a factor that IoT can help with. Sensors, for example, could be used to monitor events or changes within structural buildings, bridges and other infrastructure. This brings benefits with it, such as cost saving, saved time, quality-of-life workflow changes and paperless workflow.

A home automation business can utilize IoT to monitor and manipulate mechanical and electrical systems in a building. On a broader scale, smart cities can help citizens reduce waste and energy consumption.

IoT touches every industry, including businesses within healthcare, finance, retail and manufacturing.

Pros and cons of IoT
Some of the advantages of IoT include the following:

ability to access information from anywhere at any time on any device;
improved communication between connected electronic devices;
transferring data packets over a connected network saving time and money; and
automating tasks helping to improve the quality of a business's services and reducing the need for human intervention.
Some disadvantages of IoT include the following:

As the number of connected devices increases and more information is shared between devices, the potential that a hacker could steal confidential information also increases.
Enterprises may eventually have to deal with massive numbers -- maybe even millions -- of IoT devices, and collecting and managing the data from all those devices will be challenging.
If there's a bug in the system, it's likely that every connected device will become corrupted.
Since there's no international standard of compatibility for IoT, it's difficult for devices from different manufacturers to communicate with each other.
IoT standards and frameworks
There are several emerging IoT standards, including the following:

IPv6 over Low-Power Wireless Personal Area Networks (6LoWPAN) is an open standard defined by the Internet Engineering Task Force (IETF). The 6LoWPAN standard enables any low-power radio to communicate to the internet, including 804.15.4, Bluetooth Low Energy (BLE) and Z-Wave (for home automation).
ZigBee is a low-power, low-data rate wireless network used mainly in industrial settings. ZigBee is based on the Institute of Electrical and Electronics Engineers (IEEE) 802.15.4 standard. The ZigBee Alliance created Dotdot, the universal language for IoT that enables smart objects to work securely on any network and understand each other.
LiteOS is a Unix-like operating system (OS) for wireless sensor networks. LiteOS supports smartphones, wearables, intelligent manufacturing applications, smart homes and the internet of vehicles (IoV). The OS also serves as a smart device development platform.
OneM2M is a machine-to-machine service layer that can be embedded in software and hardware to connect devices. The global standardization body, OneM2M, was created to develop reusable standards to enable IoT applications across different verticals to communicate.
Data Distribution Service (DDS) was developed by the Object Management Group (OMG) and is an IoT standard for real-time, scalable and high-performance M2M communication.
Advanced Message Queuing Protocol (AMQP) is an open source published standard for asynchronous messaging by wire. AMQP enables encrypted and interoperable messaging between organizations and applications. The protocol is used in client-server messaging and in IoT device management.
Constrained Application Protocol (CoAP) is a protocol designed by the IETF that specifies how low-power, compute-constrained devices can operate in the internet of things.
Long Range Wide Area Network (LoRaWAN) is a protocol for WANs designed to support huge networks, such as smart cities, with millions of low-power devices.
IoT frameworks include the following:

Amazon Web Services (AWS) IoT is a cloud computing platform for IoT released by Amazon. This framework is designed to enable smart devices to easily connect and securely interact with the AWS cloud and other connected devices.
Arm Mbed IoT is a platform to develop apps for IoT based on Arm microcontrollers. The goal of the Arm Mbed IoT platform is to provide a scalable, connected and secure environment for IoT devices by integrating Mbed tools and services.
Microsoft's Azure IoT Suite is a platform that consists of a set of services that enables users to interact with and receive data from their IoT devices, as well as perform various operations over data, such as multidimensional analysis, transformation and aggregation, and visualize those operations in a way that's suitable for business.
Google's Brillo/Weave is a platform for the rapid implementation of IoT applications. The platform consists of two main backbones: Brillo, an Android-based OS for the development of embedded low-power devices, and Weave, an IoT-oriented communication protocol that serves as the communication language between the device and the cloud.
Calvin is an open source IoT platform released by Ericsson designed for building and managing distributed applications that enable devices to talk to each other. Calvin includes a development framework for application developers, as well as a runtime environment for handling the running application.
Consumer and enterprise IoT applications
There are numerous real-world applications of the internet of things, ranging from consumer IoT and enterprise IoT to manufacturing and industrial IoT (IIoT). IoT applications span numerous verticals, including automotive, telecom and energy.

In the consumer segment, for example, smart homes that are equipped with smart thermostats, smart appliances and connected heating, lighting and electronic devices can be controlled remotely via computers and smartphones.

Wearable devices with sensors and software can collect and analyze user data, sending messages to other technologies about the users with the aim of making users' lives easier and more comfortable. Wearable devices are also used for public safety -- for example, improving first responders' response times during emergencies by providing optimized routes to a location or by tracking construction workers' or firefighters' vital signs at life-threatening sites.

In healthcare, IoT offers many benefits, including the ability to monitor patients more closely using an analysis of the data that's generated. Hospitals often use IoT systems to complete tasks such as inventory management for both pharmaceuticals and medical instruments.

Smart buildings can, for instance, reduce energy costs using sensors that detect how many occupants are in a room. The temperature can adjust automatically -- for example, turning the air conditioner on if sensors detect a conference room is full or turning the heat down if everyone in the office has gone home.

In agriculture, IoT-based smart farming systems can help monitor, for instance, light, temperature, humidity and soil moisture of crop fields using connected sensors. IoT is also instrumental in automating irrigation systems.

In a smart city, IoT sensors and deployments, such as smart streetlights and smart meters, can help alleviate traffic, conserve energy, monitor and address environmental concerns, and improve sanitation.

IoT security and privacy issues
The internet of things connects billions of devices to the internet and involves the use of billions of data points, all of which need to be secured. Due to its expanded attack surface, IoT security and IoT privacy are cited as major concerns.

In 2016, one of the most notorious recent IoT attacks was Mirai, a botnet that infiltrated domain name server provider Dyn and took down many websites for an extended period of time in one of the biggest distributed denial-of-service (DDoS) attacks ever seen. Attackers gained access to the network by exploiting poorly secured IoT devices.

Because IoT devices are closely connected, all a hacker has to do is exploit one vulnerability to manipulate all the data, rendering it unusable. Manufacturers that don't update their devices regularly -- or at all -- leave them vulnerable to cybercriminals.

Additionally, connected devices often ask users to input their personal information, including names, ages, addresses, phone numbers and even social media accounts -- information that's invaluable to hackers.

Hackers aren't the only threat to the internet of things; privacy is another major concern for IoT users. For instance, companies that make and distribute consumer IoT devices could use those devices to obtain and sell users' personal data.

Beyond leaking personal data, IoT poses a risk to critical infrastructure, including electricity, transportation and inancial services.


What is the history of IoT?
Kevin Ashton, co-founder of the Auto-ID Center at the Massachusetts Institute of Technology (MIT), first mentioned the internet of things in a presentation he made to Procter &Gamble (P&G) in 1999. Wanting to bring radio frequency ID (RFID) to the attention of P&G's senior management, Ashton called his presentation "Internet of Things" to incorporate the cool new trend of 1999: the internet. MIT professor Neil Gershenfeld's book, When Things Start to Think, also appeared in 1999. It didn't use the exact term but provided a clear vision of where IoT was headed.

IoT has evolved from the convergence of wireless technologies, microelectromechanical systems (MEMSes), microservices and the internet. The convergence has helped tear down the silos between operational technology (OT) and information technology (IT), enabling unstructured machine-generated data to be analyzed for insights to drive improvements.

Although Ashton's was the first mention of the internet of things, the idea of connected devices has been around since the 1970s, under the monikers embedded internet and pervasive computing.

The first internet appliance, for example, was a Coke machine at Carnegie Mellon University in the early 1980s. Using the web, programmers could check the status of the machine and determine whether there would be a cold drink awaiting them, should they decide to make the trip to the machine.

IoT evolved from M2M communication, i.e., machines connecting to each other via a network without human interaction. M2M refers to connecting a device to the cloud, managing it and collecting data.

Taking M2M to the next level, IoT is a sensor network of billions of smart devices that connect people, systems and other applications to collect and share data. As its foundation, M2M offers the connectivity that enables IoT.

The internet of things is also a natural extension of supervisory control and data acquisition (SCADA), a category of software application programs for process control, the gathering of data in real time from remote locations to control equipment and conditions. SCADA systems include hardware and software components. The hardware gathers and feeds data into a computer that has SCADA software installed, where it is then processed and presented in a timely manner. The evolution of SCADA is such that late-generation SCADA systems developed into first-generation IoT systems.

The concept of the IoT ecosystem, however, didn't really come into its own until the middle of 2010 when, in part, the government of China said it would make IoT a strategic priority in its five-year plan.

This was last updated in August 2021
Continue Reading About What is internet of things (IoT)?
IoT technology for healthcare in 2020
IoT security products address threats posed by connected devices
Make legacy IoT data protocols part of an IoT strategy
Operational IoT must be seen to be secured
Command tech conversations with IoT terminology you must know
A guide to IoT
Related Terms
delivery drone
A delivery drone is a type of unmanned aerial vehicle (UAV) used for distributing packages to consumers through advanced AI ... See complete definition
drone (UAV)
A drone is an unmanned aircraft. See complete definition
Fourth Industrial Revolution
The Fourth Industrial Revolution is the current and developing environment in which disruptive technologies and trends such as ... See complete definition
Dig Deeper on Internet of Things (IoT) Strategy
smart sensor
By: Brien Posey
IoT devices (internet of things devices)
By: Brien Posey
IoT basics: A guide for beginners
By: Ben Lutkevich
C MUST READ: American Airlines has a special way of dealing with angry customers
PART OF A ZDNET SPECIAL FEATURE: 5G: WHAT IT MEANS FOR IOT
What is the IoT? Everything you need to know about the Internet of Things right now
Updated: The Internet of Things explained. What the IoT is, and where it's going next.

Steve Ranger
Written by Steve Ranger, UK editor-in-chief, ZDNet
on February 3, 2020 | Topic: 5G: What it means for IoT
What is the Internet of Things?

The Internet of Things, or IoT, refers to the billions of physical devices around the world that are now connected to the internet, all collecting and sharing data. Thanks to the arrival of super-cheap computer chips and the ubiquity of wireless networks, it's possible to turn anything, from something as small as a pill to something as big as an aeroplane, into a part of the IoT. Connecting up all these different objects and adding sensors to them adds a level of digital intelligence to devices that would be otherwise dumb, enabling them to communicate real-time data without involving a human being. The Internet of Things is making the fabric of the world around us more smarter and more responsive, merging the digital and physical universes.

The Internet of Things? It's really a giant robot and we don't know how to fix it

What is an example of an Internet of Things device?

Pretty much any physical object can be transformed into an IoT device if it can be connected to the internet to be controlled or communicate information.

A lightbulb that can be switched on using a smartphone app is an IoT device, as is a motion sensor or a smart thermostat in your office or a connected streetlight. An IoT device could be as fluffy as a child's toy or as serious as a driverless truck. Some larger objects may themselves be filled with many smaller IoT components, such as a jet engine that's now filled with thousands of sensors collecting and transmitting data back to make sure it is operating efficiently. At an even bigger scale, smart cities projects are filling entire regions with sensors to help us understand and control the environment. 

SEE: 5G: What it means for IoT (ZDNet/TechRepublic special feature) | Download the free PDF version (TechRepublic)

The term IoT is mainly used for devices that wouldn't usually be generally expected to have an internet connection, and that can communicate with the network independently of human action. For this reason, a PC isn't generally considered an IoT device and neither is a smartphone -- even though the latter is crammed with sensors. A smartwatch or a fitness band or other wearable device might be counted as an IoT device, however.

Google and Levi's unveil internet-connected jacket
What is the history of the Internet of Things?

The idea of adding sensors and intelligence to basic objects was discussed throughout the 1980s and 1990s (and there are arguably some much earlier ancestors), but apart from some early projects -- including an internet-connected vending machine -- progress was slow simply because the technology wasn't ready. Chips were too big and bulky and there was no way for objects to communicate effectively.

Processors that were cheap and power-frugal enough to be all but disposable were needed before it finally became cost-effective to connect up billions of devices. The adoption of RFID tags -- low-power chips that can communicate wirelessly -- solved some of this issue, along with the increasing availability of broadband internet and cellular and wireless networking. The adoption of IPv6 -- which, among other things, should provide enough IP addresses for every device the world (or indeed this galaxy) is ever likely to need -- was also a necessary step for the IoT to scale. 

Kevin Ashton coined the phrase 'Internet of Things' in 1999, although it took at least another decade for the technology to catch up with the vision.

news-networking-iot-city-istock.png
"The IoT integrates the interconnectedness of human culture -- our 'things' -- with the interconnectedness of our digital information system -- 'the internet.' That's the IoT," Ashton told ZDNet.

Adding RFID tags to expensive pieces of equipment to help track their location was one of the first IoT applications. But since then, the cost of adding sensors and an internet connection to objects has continued to fall, and experts predict that this basic functionality could one day cost as little as 10 cents, making it possible to connect nearly everything to the internet.

The IoT was initially most interesting to business and manufacturing, where its application is sometimes known as machine-to-machine (M2M), but the emphasis is now on filling our homes and offices with smart devices, transforming it into something that's relevant to almost everyone. Early suggestions for internet-connected devices included 'blogjects' (objects that blog and record data about themselves to the internet), ubiquitous computing (or 'ubicomp'), invisible computing, and pervasive computing. However, it was Internet of Things and IoT that stuck.

If you want to succeed you must fail first, says the man who dreamt up the Internet of Things
How big is the Internet of Things?

Big and getting bigger -- there are already more connected things than people in the world.

Tech analyst company IDC predicts that in total there will be 41.6 billion connected IoT devices by 2025, or "things." It also suggests industrial and automotive equipment represent the largest opportunity of connected "things,", but it also sees strong adoption of smart home and wearable devices in the near term.  

Another tech analyst, Gartner, predicts that the enterprise and automotive sectors will account for 5.8 billion devices this year, up almost a quarter on 2019. Utilities will be the highest user of IoT, thanks to the continuing rollout of smart meters. Security devices, in the form of intruder detection and web cameras will be the second biggest use of IoT devices. Building automation – like connected lighting – will be the fastest growing sector, followed by automotive (connected cars) and healthcare (monitoring of chronic conditions). 

gartner-iot-2019.png
Image: Gartner
What are the benefits of the Internet of Things for business?

The benefits of the IoT for business depend on the particular implementation; agility and efficiency are usually top considerations. The idea is that enterprises should have access to more data about their own products and their own internal systems, and a greater ability to make changes as a result.

See also: How SMBs can maximize the benefits of IoT initiatives

Manufacturers are adding sensors to the components of their products so that they can transmit data back about how they are performing. This can help companies spot when a component is likely to fail and to swap it out before it causes damage. Companies can also use the data generated by these sensors to make their systems and their supply chains more efficient, because they will have much more accurate data about what's really going on.

SPECIAL FEATURE
Special report: 5G: What it means for IoT (free PDF)
Special report: 5G: What it means for IoT (free PDF)

This ebook, based on the latest ZDNet / TechRepublic special feature, examines how 5G connectivity will underpin the next generation of IoT devices.

Read More

"With the introduction of comprehensive, real-time data collection and analysis, production systems can become dramatically more responsive," say consultants McKinsey.

Enterprise use of the IoT can be divided into two segments: industry-specific offerings like sensors in a generating plant or real-time location devices for healthcare; and IoT devices that can be used in all industries, like smart air conditioning or security systems.

While industry-specific products will make the early running, by 2020 Gartner predicts that cross-industry devices will reach 4.4 billion units, while vertical-specific devices will amount to 3.2 billion units. Consumers purchase more devices, but businesses spend more: the analyst group said that while consumer spending on IoT devices was around $725bn last year, businesses spending on IoT hit $964bn. By 2020, business and consumer spending on IoT hardware will hit nearly $3tn.

idc-iot-use-cases.png
Image: IDC
Worldwide spending on the IoT was forecast to reach $745 billion in 2019, an increase of 15.4% over the $646 billion spent in 2018, according to IDC, and pass the $1 trillion mark in 2022.

Top industries for the IoT were predicted to be discrete manufacturing ($119 billion in spending), process manufacturing ($78 billion), transportation ($71 billion), and utilities ($61 billion). For manufacturers, projects to support asset management will be key; in transportation it will be freight monitoring and fleet management taking top priority. IoT spending in the utilities industry will be dominated by smart-grid projects for electricity, gas, and water.

Consumer IoT spending was predicted to hit $108 billion, making it the second largest industry segment: smart home, personal wellness, and connected vehicle infotainment will see much of the spending.

By use case, manufacturing operations ($100 billion), production asset management ($44.2 billion), smart home ($44.1 billion), and freight monitoring ($41.7 billion) will be the largest areas of investment. 

UX needs to operate under a new set of rules within the Internet of Things
Do you own your data and have free rein? The answer in an Internet of things, cloud world may surprise you
What is the Industrial Internet of Things?

The Industrial Internet of Things (IIoT) or the fourth industrial revolution or Industry 4.0 are all names given to the use of IoT technology in a business setting. The concept is the same as for the consumer IoT devices in the home, but in this case the aim is to use a combination of sensors, wireless networks, big data, AI and analytics to measure and optimise industrial processes. 

If introduced across an entire supply chain, rather than just individual companies, the impact could be even greater with just-in-time delivery of materials and the management of production from start to finish. Increasing workforce productivity or cost savings are two potential aims, but the IIoT can also create new revenue streams for businesses; rather than just selling a standalone product – for example, like an engine – manufacturers can also sell predictive maintenance of the engine. 

What are the benefits of the Internet of Things for consumers?

The IoT promises to make our environment -- our homes and offices and vehicles -- smarter, more measurable, and... chattier. Smart speakers like Amazon's Echo and Google Home make it easier to play music, set timers, or get information. Home security systems make it easier to monitor what's going on inside and outside, or to see and talk to visitors. Meanwhile, smart thermostats can help us heat our homes before we arrive back, and smart lightbulbs can make it look like we're home even when we're out.

Looking beyond the home, sensors can help us to understand how noisy or polluted our environment might be. Self-driving cars and smart cities could change how we build and manage our public spaces.

However, many of these innovations could have major implications for our personal privacy.

Hive thinks it knows how to get the smart home buzzing
The Internet of Things and smart homes

amazon-home.jpg
The House that Alexa Built: An Amazon showcase in London in 2017.

Image: Steve Ranger/ZDNet
For consumers, the smart home is probably where they are likely to come into contact with internet-enabled things, and it's one area where the big tech companies (in particular Amazon, Google, and Apple) are competing hard.

The most obvious of these are smart speakers like Amazon's Echo, but there are also smart plugs, lightbulbs, cameras, thermostats, and the much-mocked smart fridge. But as well as showing off your enthusiasm for shiny new gadgets, there's a more serious side to smart home applications. They may be able to help keep older people independent and in their own homes longer by making it easier for family and carers to communicate with them and monitor how they are getting on. A better understanding of how our homes operate, and the ability to tweak those settings, could help save energy -- by cutting heating costs, for example.

Qualcomm: Mesh networking is the future of smart homes
What about Internet of Things security?

Security is one the biggest issues with the IoT. These sensors are collecting in many cases extremely sensitive data -- what you say and do in your own home, for example. Keeping that secure is vital to consumer trust, but so far the IoT's security track record has been extremely poor. Too many IoT devices give little thought to the basics of security, like encrypting data in transit and at rest.

Flaws in software -- even old and well-used code -- are discovered on a regular basis, but many IoT devices lack the capability to be patched, which means they are permanently at risk. Hackers are now actively targeting IoT devices such as routers and webcams because their inherent lack of security makes them easy to compromise and roll up into giant botnets.

Flaws have left smart home devices like refrigerators, ovens, and dishwashers open to hackers. Researchers found 100,000 webcams that could be hacked with ease, while some internet-connected smartwatches for children have been found to contain security vulnerabilities that allow hackers to track the wearer's location, eavesdrop on conversations, or even communicate with the user.

Governments are growing worried about the risks here. The UK government has published its own guidelines around the security of consumer IoT devices. It expects devices to have unique passwords, that companies will provide a public point of contact so anyone can report a vulnerability (and that these will be acted on), and that manufacturers will explicitly state how long devices will get security updates. It's a modest list, but a start. 

When the cost of making smart objects becomes negligible, these problems will only become more widespread and intractable.

All of this applies in business as well, but the stakes are even higher. Connecting industrial machinery to IoT networks increases the potential risk of hackers discovering and attacking these devices. Industrial espionage or a destructive attack on critical infrastructure are both potential risks. That means businesses will need to make sure that these networks are isolated and protected, with data encryption with security of sensors, gateways and other components a necessity. The current state of IoT technology makes that harder to ensure, however, as does a lack of consistent IoT security planning across organisations. That's very worrying considering the documented willingness of hackers to tamper with industrial systems that have been connected to the internet but left unprotected.

The IoT bridges the gap between the digital world and the physical world, which means that hacking into devices can have dangerous real-world consequences. Hacking into the sensors controlling the temperature in a power station could trick the operators into making a catastrophic decision; taking control of a driverless car could also end in disaster.

Your forgotten IoT gadgets will leave a disastrous, toxic legacy
Security flaw in LG IoT software left home appliances vulnerable
Five pitfalls to avoid in mobile and IoT security
Fear the Reaper? Experts reassess the botnet's size and firepower
Internet of Things security: What happens when every device is smart and you don't even know it?
What about privacy and the Internet of Things?

With all those sensors collecting data on everything you do, the IoT is a potentially vast privacy and security headache. Take the smart home: it can tell when you wake up (when the smart coffee machine is activated) and how well you brush your teeth (thanks to your smart toothbrush), what radio station you listen to (thanks to your smart speaker), what type of food you eat (thanks to your smart oven or fridge), what your children think (thanks to their smart toys), and who visits you and passes by your house (thanks to your smart doorbell). While companies will make money from selling you the smart object in the first place, their IoT business model probably involves selling at least some of that data, too.

What happens to that data is a vitally important privacy matter. Not all smart home companies build their business model around harvesting and selling your data, but some do.

And it's worth remembering that IoT data can be combined with other bits of data to create a surprisingly detailed picture of you. It's surprisingly easy to find out a lot about a person from a few different sensor readings. In one project, a researcher found that by analysing data charting just the home's energy consumption, carbon monoxide and carbon dioxide levels, temperature, and humidity throughout the day they could work out what someone was having for dinner.

IoT devices are an enterprise security time bomb
I know what you ate last supper: What home sensors will reveal about your life
Internet of Things security woes: Can smarter consumers save the IoT from disaster?
IoT, privacy and business

Consumers need to understand the exchange they are making and whether they are happy with that. Some of the same issues apply to business: would your executive team be happy to discuss a merger in a meeting room equipped with smart speakers and cameras, for example? One recent survey found that four out of five companies would be unable to identify all the IoT devices on their network.

Badly installed IoT products could easily open up corporate networks to attack by hackers, or simply leak data. It might seem like a trivial threat but imagine if the smart locks at your office refused to open one morning or the smart weather station in the CEO's office was used by hackers to create a backdoor into your network.

The spy on the corner of your desk: Why the smart office is your next security nightmare
Your forgotten IoT gadgets will leave a disastrous, toxic legacy
IoT in the office: Everything you need to know about the Internet of Things in the workplace 
The IoT and cyberwarfare

The IoT makes computing physical. So if things go wrong with IoT devices, there can be major real-world consequences -- something that nations planning their cyberwarfare strategies are now taking into account.

US intelligence community briefings have warned that the country's adversaries already have the ability to threaten its critical infrastructure as well "as the broader ecosystem of connected consumer and industrial devices known as the Internet of Things". US intelligence has also warned that connected thermostats, cameras, and cookers could all be used either to spy on citizens of another country, or to cause havoc if they were hacked. Adding key elements of national critical infrastructure (like dams, bridges, and elements of the electricity grid) to the IoT makes it even more vital that security is as tight as possible.

Cyberwar: A guide to the frightening future of online conflict
Cyberwarfare comes of age: The internet is now officially a battlefield
Yes, your smart toaster really will be spying on you for the government
The Internet of Things and data

An IoT device will likely contain one or more sensors which it will use to collect data. Just what those sensors are collecting will depend on the individual device and its task. Sensors inside industrial machinery might measure temperature or pressure; a security camera might have a proximity sensor along with sound and video, while your home weather station will probably be packing a humidity sensor. All this sensor data – and much, much more – will have to be sent somewhere. That means IoT devices will need to transmit data and will do it via Wi-Fi, 4G, 5G and more.

Tech analyst IDC calculates that within five years IoT gadgets will be creating 79.4 zettabytes of data. Some of this IoT data will be "small and bursty" says IDC – a quick update like a temperature reading from a sensor or a reading from a smart meter. Other devices might create huge amounts of data traffic, like a video surveillance camera using computer vision.

IDC said the amount of data created by IoT devices will grow rapidly in the next few years. Most of the data is being generated by video surveillance, it said, but other industrial and medical uses will generate more data over time.

It said drones will also be a big driver of data creation using cameras. Looking further out, self-driving cars will also generate vast amounts of rich sensor data including audio and video, as well as more specialised automotive sensor data.

Internet of Things and big data analytics

The IoT generates vast amounts of data: from sensors attached to machine parts or environment sensors, or the words we shout at our smart speakers. That means the IoT is a significant driver of big-data analytics projects because it allows companies to create vast data sets and analyse them. Giving a manufacturer vast amounts of data about how its components behave in real-world situations can help them to make improvements much more rapidly, while data culled from sensors around a city could help planners make traffic flow more efficiently.

That data will come in many different forms – voice requests, video, temperature or other sensor readings, all of which can be mined for insight. As analyst IDC notes, IoT metadata category is a growing source of data to be managed and leveraged. "Metadata is a prime candidate to be fed into NoSQL databases like MongoDB to bring structure to unstructured content or fed into cognitive systems to bring new levels of understanding, intelligence, and order to outwardly random environments," it said.

In particular, the IoT will deliver large amounts of real-time data. Cisco calculates that machine-to machine connections that support IoT applications will account for more than half of the total 27.1 billion devices and connections, and will account for 5% of global IP traffic by 2021.

Ten examples of IoT and big data working well together
The internet of things and big data: Unlocking the power
Sensor'd enterprise: IoT, ML, and big data (ZDNet special report) | Download the report as a PDF (TechRepublic)
Internet of Things and the cloud

The huge amount of data that IoT applications generate means that many companies will choose to do their data processing in the cloud rather than build huge amounts of in-house capacity. Cloud computing giants are already courting these companies: Microsoft has its Azure IoT suite, while Amazon Web Services provides a range of IoT services, as does Google Cloud.

Your terrible broadband will kill the Internet of Things dead
Amazon lowers barrier to IoT in the cloud with analytics, security, and new OS
CES 2018: Microsoft's IoT strategy is about the cloud more than the 'things'
Nokia partners with AWS on cloud migration, 5G and IoT strategies
The Internet of Things and smart cities

By spreading a vast number of sensors over a town or city, planners can get a better idea of what's really happening, in real time. As a result, smart cities projects are a key feature of the IoT. Cities already generate large amounts of data (from security cameras and environmental sensors) and already contain big infrastructure networks (like those controlling traffic lights). IoT projects aim to connect these up, and then add further intelligence into the system.

There are plans to blanket Spain's Balearic Islands with half a million sensors and turn it into a lab for IoT projects, for example. One scheme could involve the regional social-services department using the sensors to help the elderly, while another could identify if a beach has become too crowded and offer alternatives to swimmers. In another example, AT&T is launching a service to monitor infrastructure such as bridges, roadways, and railways with LTE-enabled sensors to monitor structural changes such as cracks and tilts.

The ability to better understand how a city is functioning should allow planners to make changes and monitor how this improves residents' lives.

Big tech companies see smart cities projects as a potentially huge area, and many -- including mobile operators and networking companies -- are now positioning themselves to get involved.

IT leader's guide to the rise of smart cities
Cisco, Huawei take duel to smart cities
Huawei announces smart city control centre
EXECUTIVE GUIDE
What is 5G? Everything you need to know about the new wireless revolution
What is 5G? Everything you need to know about the new wireless revolution

It's a capital improvement project the size of the entire planet, replacing one wireless architecture created this century with another one that aims to lower energy consumption and maintenance costs.

Read More

How do Internet of Things and 5G connect and share data?

IoT devices use a variety of methods to connect and share data, although most will use some form of wireless connectivity: homes and offices will use standard Wi-Fi, Zigbee or Bluetooth Low Energy (or even Ethernet if they aren't especially mobile); other devices will use LTE (existing technologies include Narrowband IoT and LTE-M, largely aimed at small devices sending limited amounts of data) or even satellite connections to communicate. However, the vast number of different options has already led some to argue that IoT communications standards need to be as accepted and interoperable as Wi-Fi is today. 

One area of growth in the next few years will undoubtedly be the use of 5G networks to support IoT projects. 5G offers the ability to fit as many as one million 5G devices in a square kilometre, which means that it will be possible to use a vast number of sensors in a very small area, making large-scale industrial IoT deployments more possible. The UK has just started a trial of 5G and the IoT at two 'smart factories'. However, it could be some time before 5G deployments are widespread: Ericsson predicts that there will be somewhere around five billion IoT devices connected to cellular networks by 2025, but only around a quarter of those will be broadband IoT, with 4G connecting the majority of those.

Outdoor surveillance cameras will be the largest market for 5G IoT devices in the near term, according to Gartner, accounting for the majority (70%) of the 5G IoT devices this year, before dropping to around 30% by the end of 2023, at which point they will be overtaken by connected cars.

gartner-iot-5g.png
Image: Gartner
The analyst firm predicts that there will be 3.5 million 5G IoT devices in use this year, and nearly 50 million by 2023. Longer term the automotive industry will be the largest sector for 5G IoT use cases, it predicted.

One likely trend is that, as the IoT develops, it could be that less data will be sent for processing in the cloud. To keep costs down, more processing could be done on-device with only the useful data sent back to the cloud – a strategy known as 'edge computing'. This will require new technology – like tamper-proof edge servers that can collect and analyse data far from the cloud or corporate data center.

All your IoT devices are doomed
Edge, core, and cloud: Where all the workloads go
5G and the IoT: The UK's first smart factory just switched on
IoT data and artificial intelligence

IoT devices generate vast amounts of data; that might be information about an engine's temperature or whether a door is open or closed or the reading from a smart meter. All this IoT data has to be collected, stored and analysed. One way companies are making the most of this data is to feed it into artificial intelligence (AI) systems that will take that IoT data and use it to make predictions.

For example, Google has put an AI in charge of its data centre cooling system. The AI uses data pulled from thousands of IoT sensors, which is fed into deep neural networks, and which predict how different choices will affect future energy consumption. By using machine learning and AI, Google has been able to make its data centres more efficient and said the same technology could have uses in other industrial settings.

Google just put an AI in charge of keeping its data centres cool
IoT evolution: Where does the Internet of Things go next?

As the price of sensors and communications continue to drop, it becomes cost-effective to add more devices to the IoT – even if in some cases there's little obvious benefit to consumers. Deployments are at an early stage; most companies that are engaging with the IoT are at the trial stage right now, largely because the necessary technology – sensor technology, 5G and machine-learning powered analytics – are still themselves at a reasonably early stage of development. There are many competing platforms and standards and many different vendors, from device makers to software companies to network operators, want a slice of the pie. It's still not clear which of those will win out. But without standards, and with security an ongoing issue, we are likely to see some more big IoT security mishaps in the next few years.

As the number of connected devices continues to rise, our living and working environments will become filled with smart products – assuming we are willing to accept the security and privacy trade-offs. Some will welcome the new era of smart things. Others will pine for the days when a chair was simply a chair.

The future of digital will be human-centric and voice will reign supreme
READ MORE
Internet of Things: CIOs are getting ready for the next big revolution

IoT devices will outnumber the world's population this year for the first time

IoT in the real world: Five top use cases (Tech Pro Research)

17 ways the Internet of Things is changing the world (TechRepublic)

CXO | Digital Transformation | Big Data Analytics | Innovation | Cloud
 SHOW COMMENTS
RELATED
    
This drone has dual 4K cameras, auto return, and a whole lot more for only $75

Apple finds a brilliant way to make the iPhone 13 Pro exciting

Best 4G mobile broadband 2022: Top providers compared







NEWSLETTERS
ZDNet Data, Analytics and AI
Keep up with the latest developments in extracting maximum information value for today's business.
Your email address
 SUBSCRIBE
SEE
ALL
PART OF A ZDNET SPECIAL FEATURE: 5G: WHAT IT MEANS FOR IOT
How 5G can unlock IoT's potential
The Internet of Things will involve an astounding amount of data—and the next generation of wireless communications could play a key role.

Bob Violino
Written by Bob Violino, Contributing Writer
on January 16, 2019 | Topic: 5G: What it means for IoT
SPECIAL FEATURE
Special report: 5G: What it means for IoT (free PDF)
Special report: 5G: What it means for IoT (free PDF)

This ebook, based on the latest ZDNet / TechRepublic special feature, examines how 5G connectivity will underpin the next generation of IoT devices.

Read More

The emergence of 5G, the fifth generation of wireless mobile communications, will no doubt have a major impact on how these services are delivered. Among the potential advantages are high data rates, reduced latency, energy savings, cost reductions, and higher system capacity.

One of the areas 5G technology has the potential to affect in a big way is the Internet of Things (IoT). But just how large an impact will it be, and in what ways can 5G help unlock the enormous potential of IoT for businesses as well as consumers?

SLOW ROLLOUT
Broad availability of 5G will not happen overnight. "Deployment of full 5G is some way away yet," said Paul Bevan, research director for IT Infrastructure at advisory and consulting firm Bloor. "We are likely to see a rolling deployment of some 5G capabilities from 2020 onwards," and best estimates are that full-scale 5G deployments are not likely until around 2025, he said.

Adoption will be patchy to start with, Bevan said. "By 2025 some verticals or use cases may have just crossed the chasm, but many will still be in the visionary phase," he said.

For enterprises, 5G will be a technology enabler but not a solution in itself. "A number of vertical industry use cases have been suggested and are being investigated," Bevan said. These will probably involve robotics, artificial intelligence/machine learning, and big data analytics -- to name but a few. 

SEE: How 5G will transform business (ZDNet special report) | Download the report as a PDF (TechRepublic)  

Each will have different requirements in terms of data rate, speed, latency, reliability, coverage, density, and location accuracy, Bevan said. The rate of enterprise adoption and rollout will depend on both the perceived business value of the use cases and the rate at which each of the required 5G capabilities is delivered.

Economic factors will also impact the rollout of 5G. "Network operators face significant capital investments in the coming years on top of their already significant investments in 4G," Bevan said. "Understanding the route to profitable revenue and the collaborations that are necessary, will determine both the pace of deployment of 5G and the structure of the supply side market."

Network operators will also be looking to a range of new tools and techniques to reduce both the capital and operating costs of future 5G networks, Bevan noted. These include, but are not restricted to,  automated operations at the edge, software-defined networking (SDN), network function virtualization (NFV), and Open Compute Project (OCP) hardware configurations.

EXECUTIVE GUIDE
What is 5G? Everything you need to know about the new wireless revolution
What is 5G? Everything you need to know about the new wireless revolution

It's a capital improvement project the size of the entire planet, replacing one wireless architecture created this century with another one that aims to lower energy consumption and maintenance costs.

Read More

IMPACT ON IOT 
What impact 5G will have on IoT depends on one's definition of IoT and whether it includes smartphones, Bevan said. It's likely that mobile online gaming, video streaming and virtual and augmented reality will be the initial targets of 5G, he said.

"Much business-oriented IoT will happen without the need for 5G, or is already happening utilizing existing 4G services, Bevan said. "It is in areas requiring low latency, such as autonomous vehicles or, further down the track, remote robotic surgery that 5G really comes into its own."

The biggest impact for business will be in the ability of 5G to handle massive data volumes with high transaction rates from remote and/or mobile locations. The ability to capture data from remote sensors, transfer it to large data centers, and apply both AI and machine leaning and data science techniques to it for near real-time analysis is where enterprises are likely to see the biggest early gains, Bevan said.

MUST READ
5G mobile networks: A cheat sheet TechRepublic
Your Next Big Upgrade CNET
How 5G is critical to delivering IoT at scale TechRepublic
One class of 5G IoT use-cases, categorized under the term ultra-reliable low-latency communications (URLLC), will slowly ramp up throughout the 2020s, said Patrick Filkins, senior research analyst, IoT and mobile network infrastructure, at research firm International Data Corp. (IDC).

"These services are likely to require adjacent investment in a distributed 5G core and edge computing, located closer to the end-points," Filkins said. Telcos will be able to tailor network connectivity for specific vertical applications by delivering customized service-level agreements (SLAs). "In my opinion, that's where 5G will begin to flex its era-defining muscles," he said.

The strength of 5G will be in its ability to address not only the low-power wide-area network (LPWAN) IoT use-case -- which is about providing a low-cost option to connect devices with low requirements from the network -- but simultaneously address the IoT use cases that fall into the URLLC segment, Filkins said.

"It is realistic to envision an enterprise which may have demands for both network scenarios," Filkins said. "Delivering both from a singular, converged architecture could become very compelling, from a simplicity and cost-reduction viewpoint."

INDUSTRY BREAKDOWN
Some sectors are likely to be affected more than others by the emergence of 5G and IoT.

For example, in healthcare they could contribute to improving well-being in the population, through predicting potential individuals' health problems and organizing early medical interventions. Remote robotic surgery can improve patient outcomes and reduce costs. "IoT and 5G will be critical elements in our ability to deliver sustainable health services," Bevan said.

In manufacturing and integrated supply chains, the technologies will enable automation and coordination of manufacturing processes across geographically and organizationally dispersed units, Bevan said. This will be accomplished via connected factories, reducing costs and increasing agility.

Also: CES 2019: Are these newly launched '5G' services truly 5G wireless?

In the public sector such as municipal governments, 5G and IoT can help hasten the development of smart cities.

Theoretically, all industries will benefit from 5G technology for IoT, as they will be able to independently design or co-design -- with a service provider -- networks based on their unique needs related to latency, capacity, and reliability, Filkins said.

IOT WITHOUT 5G
Just because 5G might enhance some aspects of IoT doesn't mean IoT will be dependent on the next generation of wireless network capability.

"It needs to be stressed that not all IoT devices need 5G," Bevan said. "Probably less than half of all the data generated by IoT devices will need to be transferred to centralized data centers."

Satellite communications need to be factored into the equation, particularly for less densely populated, rural areas and also for applications where location accuracy of moving assets is critical, Bevan noted.

Pictures: London's 5G trial takes to the...SEE FULL GALLERY






1 - 5 of 6NEXT 
RELATED STORIES:
Tech companies are dialling down the hype around 5G mobile
5G mobile: Arriving not with a bang, but a whisper
AT&T 5G to go live across 12 cities this week 
Samsung to invest $22 billion in 5G and AI
The biggest switch: 5G and the race to replace the future
CXO | Digital Transformation | Tech Industry | Smart Cities | Cloud
 SHOW COMMENTS
RELATED
    
Smartphones are boring: How foldables and Apple can change that

How to build a gaming PC for under $600

12 Best Buy deals that can be picked up in time for Christmas







NEWSLETTERS
ZDNet Data, Analytics and AI
Keep up with the latest developments in extracting maximum information value for today's business.
Your email address
 SUBSCRIBE
SEE
ALL
PART OF A ZDNET SPECIAL FEATURE: 5G: WHAT IT MEANS FOR IOT
Survey: 5G won't impact many IoT projects anytime soon
TechRepublic Premium survey finds 5G availability is accelerating IoT projects for only 44% of respondents.

Melanie Wachsman
Written by Melanie Wachsman, Editor
on February 3, 2020 | Topic: 5G: What it means for IoT
SPECIAL FEATURE
Special report: 5G: What it means for IoT (free PDF)
Special report: 5G: What it means for IoT (free PDF)

This ebook, based on the latest ZDNet / TechRepublic special feature, examines how 5G connectivity will underpin the next generation of IoT devices.

Read More

5G is here, and it's ready to transform the enterprise. The next generation of mobile technology is poised to have a major impact on Internet of Things (IoT) initiatives. Or is it?

Those were just a few of the questions ZDNet's sister site TechRepublic Premium asked when it surveyed 159 professionals in January about how 5G accessibility is accelerating IoT projects.

Despite promises of higher bandwidth, low latency, and ultra-reliability, more than half (56%) of the survey respondents said that 5G availability is not accelerating IoT projects in their organizations. Here are some reasons why: since 4G worked well enough, companies have not planned any 5G IoT initiatives; there was a lack in faster deployment resources; and companies were still in early planning stages. One respondent said it was "too early to buy a 5G kit when the investment in 4G has not yet recovered its initial costs."

SEE: Research: How 5G will transform business (TechRepublic Premium)  

That left 44% of respondents citing that 5G availability is, in fact, accelerating their company's IoT projects. How? The majority (74%) said 5G provided faster access, 68% mentioned more bandwidth, and 63% listed better reliability. (Survey respondents were able to select more than one option.) 

At 61%, remotely monitoring assets in the field was the most popular IoT project that companies plan to undertake as a result of 5G availability. Almost half (49%) of companies plan to use 5G to control machines remotely, while 44% plan to use location awareness and indoor mapping for machine learning and tracking high-value assets. Of respondents saying that 5G will accelerate their projects, 40% plan to leverage smart office or industrial technology such as geofencing or energy optimization, while 34% of respondents intend to either harness 5G's availability for supply chain tracking or to create digital twin models. 

The infographic below contains selected details from the research. To read more findings, plus analysis, download the full report: Research: How 5G will transform business (available for TechRepublic Premium subscribers).

Related stories: 
Internet of Things (IoT): A cheat sheet (TechRepublic)
Special report: The rise of Industrial IoT (TechRepublic download)
IoT security: A guide for IT leaders (TechRepublic Premium)
What is the Internet of Things? Everything you need to know about the IoT right now (ZDNet)
These smart plugs are the secret to a seamless smart home (CNET)
Internet of Things and smart cities: More must-read coverage (TechRepublic on Flipboard)
 SHOW COMMENTS
RELATED
    

Glowforge Pro review: Laser cutting and engraving for serious hobbyists and makers


Best waffle maker 2022: Win breakfast


Last-minute gift shopping? These stores will deliver your presents on time







NEWSLETTERS
ZDNet Data, Analytics and AI
Keep up with the latest developments in extracting maximum information value for today's business.
Your email address
 SUBSCRIBE
SEE
ALL
ZDNetCONNECT WITH US   
© 2022 ZDNET, A RED VENTURES COMPANY. ALL RIGHTS RESERVED. Privacy Policy | Cookie Settings | Advertise | Terms of Use

Topics
Galleries
Videos
Sponsored Narratives
Do Not Sell My Information
About ZDNet
Meet The Team
All Authors
RSS Feeds
Site Map
Reprint Policy
Join | Log In
Membership
Newsletters
Site Assistance
ZDNet Academy
Cookie Settings
Click here to return to Amazon Web Services homepage
Contact Us
Support 
English 
My Account 
Sign In 
re:Invent Products Solutions Pricing Documentation Learn Partner Network AWS Marketplace Customer Enablement Events Explore More
AWS IoT
AWS IoT
Unlock your IoT data and accelerate business growth
AWS offers Internet of Things (IoT) services and solutions to connect and manage billions of devices. Collect, store, and analyze IoT data for industrial, consumer, commercial, and automotive workloads.
Accelerate innovation with the most complete set of IoT services
Scale, move quickly, and save money, with AWS IoT. From secure device connectivity to management, storage, and analytics, AWS IoT has the broad and deep services you need to build complete solutions.
Secure your IoT applications from the cloud to the edge
AWS IoT services address every layer of your application and device security. Safeguard your device data with preventative mechanisms, like encryption and access control, and consistently audit and monitor your configurations with AWS IoT Device Defender.
Build intelligent IoT solutions with superior AI and ML integration
Create models in the cloud and deploy them to devices with up to 25x better performance and less than 1/10th the runtime footprint. AWS brings artificial intelligence (AI), machine learning (ML), and IoT together to make devices more intelligent.

Scale easily and reliably
Build innovative, differentiated solutions on secure, proven, and elastic cloud infrastructure that scales to billions of devices and trillions of messages. AWS IoT easily integrates with other AWS services.

Transform your Business with AWS IoT (1:42)
 
AWS IoT FleetWise Now Available in Preview
Easily collect, transform, and transfer data from millions of vehicles to the cloud.
Learn more  
AWS IoT services
Device software
Connect your devices and operate them at the edge.
Amazon-FreeRTOS_Icon_48_Squid
FreeRTOS
Deploy an operating system for microcontrollers that makes small, low-power edge devices easy to manage
AWS-Iot-Greengrass-Core_Icon_48_Squid
AWS IoT Greengrass
Build, deploy, and manage intelligent IoT applications at the edge with an open-source edge runtime and cloud service
AWS-IoT-ExpressLink_48
AWS IoT ExpressLink
Quickly transform any embedded device into an IoT–connected device with minimal design effort using these hardware modules.
Connectivity and control services
Secure, control, and manage your devices from the cloud.
AWS-IoT-Core_Icon_48_Squid
AWS IoT Core
Connect IoT devices to AWS without the need to provision or manage servers
AWS-IoT-Device-Defender_Icon_48_Squid
AWS IoT Device Defender
Continuously audit your IoT configurations and secure your fleet of IoT devices
AWS-IoT-Device-Management_Icon_48_Squid
AWS IoT Device Management
Easily register, organize, monitor, and remotely manage your IoT devices at scale
AWS-IoT-FleetWise_48
AWS IoT FleetWise (Preview)
Easily collect, transform, and transfer vehicle data to the cloud at scale
Analytics services
Work with IoT data faster to extract value from your data.
AWS-IoT-SiteWise_Icon_48_Squid
AWS IoT SiteWise
Collect and analyze industrial data at scale and make better, data-driven decisions
AWS-IoT-Events_Icon_32_Squid
AWS IoT Events
Easily detect and respond to events from many IoT sensors and applications
AWS-IoT-Analytics _Icon_48_Squid
AWS IoT Analytics
Run analytics on volumes of IoT data easily—without building an analytics platform
AWS-IoT-FleetWise_48
AWS IoT TwinMaker (Preview)
Optimize operations by easily creating digital twins of real-world systems
Use cases
Optimize industrial operations
Optimize industrial operations
Create rich and scalable industrial IoT applications to remotely monitor operations, improve quality, and reduce unplanned downtime. 
Learn more about industrial IoT solutions »

Build differentiated consumer solutions
Build differentiated consumer products
Develop connected consumer applications for home automation, home security and monitoring, and home networking.
Learn more about consumer IoT solutions »
Reinvent smart buildings and cities
Reinvent smart buildings and cities
Build commercial IoT applications that solve challenges in infrastructure, health, and the environment. 
Learn more about commercial IoT solutions »
Transform mobility
Transform mobility
Deliver IoT applications that gather, process, analyze, and act on connected vehicle data, without having to manage any infrastructure.
Learn more about connected mobility solutions »
Customer stories
Volkswagen Group
“We will continue to strengthen production as a key competitive factor for the Volkswagen Group. Our strategic collaboration with AWS will lay the foundation.”
Oliver Blume, Chairman of the Executive Board of Porsche AG and Member of the Board of Management - Volkswagen
iRobot
“Traffic spiked by at least 20 times, but because of the simple scalability of a serverless AWS architecture, it was a non-event. With a traditional architecture, it would have been all hands on deck.”
Ben Kehoe, Cloud Robotics Research Scientist - iRobot
Carrier
“Through this collaboration with AWS, we are developing a uniquely powerful ecosystem to give our customers greater flexibility, visibility, and intelligence across the cold chain.”
David Appel, President - Carrier Refrigeration
View all customers »
Get started with AWS IoT
Get started with the IoT Foundation Series
Start training now
Learn how to build simple IoT applications
Get hands-on with AWS IoT EduKit
Have more questions?
Contact us
Get Started with AWS
Learn how to start using AWS in minutes
Site-Merch_Getting-Started-2up
Optimize process manufacturing at scale
Converging OT and IT: Uncover predictive insights from time-series data
Site-Merch_Whitepaper-Generic_2up
Free AWS Training
Access 500+ free digital courses across roles, skill levels, and domains to build your AWS Cloud skills
Site-Merch_Training-Assets-Online_1up
Learn About AWS
What Is AWS?
What Is Cloud Computing?
AWS Inclusion, Diversity & Equity
What Is DevOps?
What Is a Container?
What Is a Data Lake?
AWS Cloud Security
What's New
Blogs
Press Releases
Resources for AWS
Getting Started
Training and Certification
AWS Solutions Portfolio
Architecture Center
Product and Technical FAQs
Analyst Reports
AWS Partner Network
Developers on AWS
Developer Center
SDKs & Tools
.NET on AWS
Python on AWS
Java on AWS
PHP on AWS
JavaScript on AWS
Help
Contact Us
AWS Careers
File a Support Ticket
Knowledge Center
AWS re:Post
AWS Support Overview
Legal
Amazon is an Equal Opportunity Employer: Minority / Women / Disability / Veteran / Gender Identity / Sexual Orientation / Age.
Language عربي Bahasa Indonesia Deutsch English Español Français Italiano Português Tiếng Việt Türkçe Ρусский ไทย 日本語 한국어 中文 (简体) 中文 (繁體)
Privacy | Site Terms | Cookie Preferences | © 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.
Search the TechTarget Network
Search the TechTarget Network

LOGOUT
TECHTARGET NETWORKBE A CONTRIBUTORFULL STREAMSTARTING POINTDEFINITIONSPREMIUM CONTENTSPONSORED COMMUNITIESRSS
IoT Agenda
TOPIC
Platform
SUBTOPIC
Hardware
Follow: 
Tech Accelerator
Ultimate IoT implementation guide for businesses
View More
DEFINITION
IoT devices (internet of things devices)
By
Brien PoseySharon Shea, Executive Editor
What are IoT devices?
IoT devices are the nonstandard computing devices that connect wirelessly to a network and have the ability to transmit data, such as the many devices on the internet of things (IoT).

IoT involves extending internet connectivity beyond standard devices, such as desktops, laptops, smartphones and tablets, to any range of traditionally "dumb" or non-internet-enabled physical devices and everyday objects. Embedded with technology, these devices can communicate and interact over the internet. They can also be remotely monitored and controlled.

What is an example of an IoT device?
Connected devices are part of an ecosystem in which every device talks to other related devices in an environment to automate home and industry tasks. They can communicate usable sensor data to users, businesses and other intended parties. The devices can be categorized into three main groups: consumer, enterprise and industrial.

Consumer connected devices include smart TVs, smart speakers, toys, wearables and smart appliances. 

In a smart home, for example, devices are designed to sense and respond to a person's presence. When a person arrives home, their car communicates with the garage to open the door. Once inside, the thermostat is already adjusted to their preferred temperature, and the lighting is set to a lower intensity and color, as their smart watch data indicates it has been a stressful day. Other smart home devices include sprinklers that adjust the amount of water given to the lawn based on the weather forecast and robotic vacuum cleaners that learn which areas of the home must be cleaned most often.

THIS ARTICLE IS PART OF

Ultimate IoT implementation guide for businesses
Which also includes:
Top 8 IoT applications and examples in business
Create the right approach to IoT adoption and scalability
5 IoT security threats to prioritize
Enterprise IoT devices are edge devices designed to be used by a business. There are a huge variety of enterprise IoT devices available. These devices vary in capability but tend to be geared toward maintaining a facility or improving operational efficiency. Some options include smart locks, smart thermostats, smart lighting and smart security. Consumer versions of these technologies exist as well.

In the enterprise, smart devices can help with meetings. Smart sensors located in a conference room can help an employee locate and schedule an available room for a meeting, ensuring the proper room type, size and features are available. When meeting attendees enter the room, the temperature will adjust according to the occupancy, the lights will dim as the appropriate PowerPoint loads on the screen and the speaker begins his or her presentation.

IoT device images
Examples of consumer, enterprise and industrial IoT devices include smart TVs and smart sensors outfitted to conference rooms and assembly line machines.
Industrial IoT (IIoT) devices are designed to be used in factories or other industrial environments. Most IIoT devices are sensors used to monitor an assembly line or other manufacturing process. Data from various types of sensors is transmitted to monitoring applications that ensure key processes are running optimally. These same sensors can also prevent unexpected downtime by predicting when parts will need to be replaced.

If a problem occurs, the system might be able to send a notification to a service technician informing them what is wrong and what parts they will need to fix the problem. This can save the technician from coming on site to diagnose the problem and then having to travel to a warehouse to get the part needed to fix the problem.

How do IoT devices work?
IoT devices vary in terms of functionality, but IoT devices have some similarities in how they work. First, IoT devices are physical objects designed to interact with the real world in some way. The device might be a sensor on an assembly line or an intelligent security camera. In either case, the device is sensing what's happening in the physical world.

The device itself includes an integrated CPU, network adapter and firmware, which is usually built on an open source platform. In most cases, IoT devices connect to a Dynamic Host Configuration Protocol server and acquire an IP address that the device can use to function on the network. Some IoT devices are directly accessible over the public internet, but most are designed to operate exclusively on private networks.

Although not an absolute requirement, many IoT devices are configured and managed through a software application. Some devices, however, have integrated web servers, thus eliminating the need for an external application.

Once an IoT device has been configured and begins to operate, most of its traffic is outbound. A security camera, for example, streams video data. Likewise, an industrial sensor streams sensor data. Some IoT devices such as smart lights, however, do accept inputs.

What is IoT device management?
Several challenges can hinder the successful deployment of an IoT system and its connected devices, including security, interoperability, power/processing capabilities, scalability and availability. Many of these can be addressed with IoT device management either by adopting standard protocols or using services offered by a vendor.

Device management helps companies integrate, organize, monitor and remotely manage internet-enabled devices at scale, offering features critical to maintaining the health, connectivity and security of the IoT devices along their entire lifecycles. Such features include:

Device registration and activation
Device authentication/authorization
Device configuration
Device provisioning
Device monitoring and diagnostics
Device troubleshooting
Device firmware updates
Available standardized device management protocols include the Open Mobile Alliance's Device Management and Lightweight Machine-to-Machine.

IoT device management services and software are also available from vendors, including Amazon, Microsoft, Google, IBM, GE and many others.

IoT device connectivity and networking
The networking, communication and connectivity protocols used with internet-enabled devices largely depend on the specific IoT application deployed. Just as there are many different IoT applications, there are many different connectivity and communication options.

Communication protocols include CoAP, DTLS, MQTT, DDS and AMQP. Wireless protocols include IPv6, LPWAN, Zigbee, Bluetooth Low Energy, Z-Wave, RFID and NFC. Cellular, satellite, Wi-Fi and Ethernet can also be used.

Each option has its tradeoffs in terms of power consumption, range and bandwidth, all of which must be considered when choosing connected devices and protocols for a particular IoT application.

In most cases, IoT devices connect to an IoT gateway or another edge device where data can either be analyzed locally or sent to the cloud for analysis. Some devices have integrated data processing capabilities that minimized the amount of data that must be sent to the cloud or to the data center. This type of processing often uses machine learning capabilities that are integrated into the device, and is becoming increasingly popular as IoT devices create more and more data.

What security risks do IoT devices pose?
The interconnection of traditionally dumb devices raises several questions in relation to security and privacy. As is often the case, IoT technology has moved more quickly than the mechanisms available to safeguard devices and their users.

Researchers have already demonstrated remote hacks on pacemakers and cars. In October 2016, a large distributed denial-of-service attack dubbed Mirai affected DNS servers on the east coast of the United States, disrupting services worldwide -- an issue traced back to hackers infiltrating networks through IoT devices, including wireless routers and connected cameras. Similarly, in 2015 a team of researchers proved that it was possible to take control of a Jeep by exploiting a cellular network and the vehicle's Controller Area Network bus.

However, safeguarding IoT devices and the networks they connect to can be challenging due to the variety of devices and vendors, as well as the difficulty of adding security to resource-constrained devices. In the case of the Mirai botnet, the problem was traced back to the use of default passwords on the hacked devices. Strong passwords, authentication/authorization and identity management, network segmentation, encryption and cryptography are all suggested IoT security measures.

Concerned by the dangers posed by the rapidly growing IoT attack surface, the FBI released the public service announcement FBI Alert Number I-091015-PSA in September 2015, which is a document outlining the risks of IoT devices, as well as protections and defense recommendations.

In August 2017, the U.S. Senate introduced the IoT Cybersecurity Improvement Act, a bill addressing security issues associated with IoT devices. A subsequent bill called the Internet of Things Cybersecurity Improvement Act of 2020 sought to further improve IoT related cybersecurity by requiring NIST to develop and publish standards and guidelines on the use and management of IoT devices. Although these standards are intended for use by federal agencies, they will almost certainly be adopted by the private sector as well.

IoT device trends and anticipated growth
The estimations for future growth of IoT devices have been fast and furious. At the high end of the scale, Intel projected that internet-enabled device penetration would grow from 2 billion in 2006 to 200 billion by 2020, which equates to nearly 26 smart devices for each human on Earth. A little more conservative, IHS Markit said the number of connected devices will be 75.4 billion in 2025 and 125 billion by 2030.

Other companies have tempered their numbers, taking smartphones, tablets and computers out of the equation. Gartner estimated 20.8 billion connected things would be in use by 2020, with IDC coming in at 28.1 billion and BI Intelligence at 24 billion.

Gartner estimated total spending on IoT devices and services at nearly $2 trillion in 2017, with IDC projecting spending to reach $772.5 billion in 2018, 14.6% more than the $674 billion it estimated to be spent in 2017, with it hitting $1 trillion in 2020 and $1.1 trillion in 2021.

The key to making effective use of IoT devices is to make sure that you start your IoT strategy on the right foot and that you understand how the edge and IoT are intertwined with one another. Regardless of whether you have IoT devices already in use or are considering adopting IoT devices in your organization, make sure you're prepared to handle the unique security challenges presented by IoT devices.

This was last updated in March 2021
Continue Reading About IoT devices (internet of things devices)
Best design practices for IoT device iteration
IoT device management eases deployment and monitoring
Wearable IoT devices guard personal safety in rugged environments
What's our future if we don't secure IoT devices?
Why manufacturers make insecure IoT devices and how you can protect them
Related Terms
drone (UAV)
A drone is an unmanned aircraft. See complete definition
embedded system
An embedded system is a combination of computer hardware and software designed for a specific function. See complete definition
RFID (radio frequency identification)
RFID (radio frequency identification) is a form of wireless communication that incorporates the use of electromagnetic or ... See complete definition
Dig Deeper on Internet of Things (IoT) Hardware
IoT drives sustainable development and the bottom line
By: Mayank Kejriwal
What is internet of things (IoT)?
By: Alexander Gillis
How to develop a mobile app for IoT
By: Mehul Rajput
Future of IoT in healthcare brought into sharp focus
By: Reda Chouffani
Sponsored News
Optimizing Storage Architectures for Edge Computing: 5 Design Considerations
–Western Digital
Exploring AI Use Cases Across Education and Government
–Dell Technologies
See More
Vendor Resources
IoT in APAC
–ComputerWeekly.com
Impacts of Cyberattacks on IoT Devices
–Palo Alto Networks
Latest TechTarget
resources
CIO
SECURITY
NETWORKING
DATA CENTER
DATA MANAGEMENT
SearchCIO
Top technology trends come down to CIO strategy in 2022
Rather than feel the wave of top tech trends of 2022 wash over them, CIOs should focus on business goals to guide their emerging ...

5 keys to IT talent development in a hybrid work model
With the tech talent shortage in full force, IT talent development is critical for every organization. Learn the essentials of ...

5 steps to crafting a successful automation strategy
IT leaders who bypass strategy and go straight to selecting automation tools are courting failure. Here's how to move toward ...

About UsEditorial Ethics PolicyMeet The EditorsContact UsPhoto StoriesAdvertisersBusiness PartnersMedia KitCorporate SiteContributorsReprintsEventsE-Products
All Rights Reserved, Copyright 2005 - 2022, TechTarget

Privacy Policy
Do Not Sell My Personal Info
Click to view our Accessibility Policy
Skip to content
Would you like to visit an Oracle country site closer to you?
See this page for a different country/region
Argentina
Brasil
Canada - English
Canada - Français
Chile
Colombia
México
United States
home
Products
Industries
Resources
Support
Events
Developer
Partners
View Accounts
Contact Sales









Supply Chain Management Internet of Things
Cloud Free Tier
Build, test, and deploy applications on Oracle Cloud—for free.

IoT topics
Why Is Internet of Things (IoT) so important?
What technologies have made IoT possible?
What is industrial IoT?
Unlock business value with IoT
What are IoT applications?
What are some ways IoT applications are deployed?
What industries can benefit from IoT?
How is IoT changing the world? Take a look at connected cars.
Make the best business decisions with Oracle IoT
What is IoT?
The Internet of Things (IoT) describes the network of physical objects—“things”—that are embedded with sensors, software, and other technologies for the purpose of connecting and exchanging data with other devices and systems over the internet. These devices range from ordinary household objects to sophisticated industrial tools. With more than 7 billion connected IoT devices today, experts are expecting this number to grow to 10 billion by 2020 and 22 billion by 2025. Oracle has a network of device partners.

Why is Internet of Things (IoT) so important?
Over the past few years, IoT has become one of the most important technologies of the 21st century. Now that we can connect everyday objects—kitchen appliances, cars, thermostats, baby monitors—to the internet via embedded devices, seamless communication is possible between people, processes, and things.

By means of low-cost computing, the cloud, big data, analytics, and mobile technologies, physical things can share and collect data with minimal human intervention. In this hyperconnected world, digital systems can record, monitor, and adjust each interaction between connected things. The physical world meets the digital world—and they cooperate.

What technologies have made IoT possible?
While the idea of IoT has been in existence for a long time, a collection of recent advances in a number of different technologies has made it practical.

Access to low-cost, low-power sensor technology. Affordable and reliable sensors are making IoT technology possible for more manufacturers.
Connectivity. A host of network protocols for the internet has made it easy to connect sensors to the cloud and to other “things” for efficient data transfer.
Cloud computing platforms. The increase in the availability of cloud platforms enables both businesses and consumers to access the infrastructure they need to scale up without actually having to manage it all.
Machine learning and analytics. With advances in machine learning and analytics, along with access to varied and vast amounts of data stored in the cloud, businesses can gather insights faster and more easily. The emergence of these allied technologies continues to push the boundaries of IoT and the data produced by IoT also feeds these technologies.
Conversational artificial intelligence (AI). Advances in neural networks have brought natural-language processing (NLP) to IoT devices (such as digital personal assistants Alexa, Cortana, and Siri) and made them appealing, affordable, and viable for home use.
What is industrial IoT?
Industrial IoT (IIoT) refers to the application of IoT technology in industrial settings, especially with respect to instrumentation and control of sensors and devices that engage cloud technologies. Refer to thisTitan use case PDF for a good example of IIoT. Recently, industries have used machine-to-machine communication (M2M) to achieve wireless automation and control. But with the emergence of cloud and allied technologies (such as analytics and machine learning), industries can achieve a new automation layer and with it create new revenue and business models. IIoT is sometimes called the fourth wave of the industrial revolution, or Industry 4.0. The following are some common uses for IIoT:

Smart manufacturing
Connected assets and preventive and predictive maintenance
Smart power grids
Smart cities
Connected logistics
Smart digital supply chains
tractor
Unlock business value with IoT
As IoT becomes more widespread in the marketplace, companies are capitalizing on the tremendous business value it can offer. These benefits include:

Deriving data-driven insights from IoT data to help better manage the business
Increasing productivity and efficiency of business operations
Creating new business models and revenue streams
Easily and seamlessly connecting the physical business world to the digital world to drive quick time to value
What are IoT applications?
Business-ready, SaaS IoT Applications
IoT Intelligent Applications are prebuilt software-as-a-service (SaaS) applications that can analyze and present captured IoT sensor data to business users via dashboards. We have a full set of IoT Intelligent Applications.

IoT applications use machine learning algorithms to analyze massive amounts of connected sensor data in the cloud. Using real-time IoT dashboards and alerts, you gain visibility into key performance indicators, statistics for mean time between failures, and other information. Machine learning–based algorithms can identify equipment anomalies and send alerts to users and even trigger automated fixes or proactive counter measures.

With cloud-based IoT applications, business users can quickly enhance existing processes for supply chains, customer service, human resources, and financial services. There’s no need to recreate entire business processes.

What are some ways IoT applications are deployed?
The ability of IoT to provide sensor information as well as enable device-to-device communication is driving a broad set of applications. The following are some of the most popular applications and what they do.

Create new efficiencies in manufacturing through machine monitoring and product-quality monitoring.
Machines can be continuously monitored and analyzed to make sure they are performing within required tolerances. Products can also be monitored in real time to identify and address quality defects.

Improve the tracking and “ring-fencing” of physical assets.
Tracking enables businesses to quickly determine asset location. Ring-fencing allows them to make sure that high-value assets are protected from theft and removal.

Use wearables to monitor human health analytics and environmental conditions.
IoT wearables enable people to better understand their own health and allow physicians to remotely monitor patients. This technology also enables companies to track the health and safety of their employees, which is especially useful for workers employed in hazardous conditions.

Drive efficiencies and new possibilities in existing processes.
One example of this is the use of IoT to increase efficiency and safety in connected logistics for fleet management. Companies can use IoT fleet monitoring to direct trucks, in real time, to improve efficiency.

Enable business process changes.
An example of this is the use of IoT devices for connected assets to monitor the health of remote machines and trigger service calls for preventive maintenance. The ability to remotely monitor machines is also enabling new product-as-a-service business models, where customers no longer need to buy a product but instead pay for its usage.

map
What industries can benefit from IoT?
Organizations best suited for IoT are those that would benefit from using sensor devices in their business processes.

Manufacturing
Manufacturers can gain a competitive advantage by using production-line monitoring to enable proactive maintenance on equipment when sensors detect an impending failure. Sensors can actually measure when production output is compromised. With the help of sensor alerts, manufacturers can quickly check equipment for accuracy or remove it from production until it is repaired. This allows companies to reduce operating costs, get better uptime, and improve asset performance management.

Automotive
The automotive industry stands to realize significant advantages from the use of IoT applications. In addition to the benefits of applying IoT to production lines, sensors can detect impending equipment failure in vehicles already on the road and can alert the driver with details and recommendations. Thanks to aggregated information gathered by IoT-based applications, automotive manufacturers and suppliers can learn more about how to keep cars running and car owners informed.

Transportation and Logistics
Transportation and logistical systems benefit from a variety of IoT applications. Fleets of cars, trucks, ships, and trains that carry inventory can be rerouted based on weather conditions, vehicle availability, or driver availability, thanks to IoT sensor data. The inventory itself could also be equipped with sensors for track-and-trace and temperature-control monitoring. The food and beverage, flower, and pharmaceutical industries often carry temperature-sensitive inventory that would benefit greatly from IoT monitoring applications that send alerts when temperatures rise or fall to a level that threatens the product.

Retail
IoT applications allow retail companies to manage inventory, improve customer experience, optimize supply chain, and reduce operational costs. For example, smart shelves fitted with weight sensors can collect RFID-based information and send the data to the IoT platform to automatically monitor inventory and trigger alerts if items are running low. Beacons can push targeted offers and promotions to customers to provide an engaging experience.

Public Sector
The benefits of IoT in the public sector and other service-related environments are similarly wide-ranging. For example, government-owned utilities can use IoT-based applications to notify their users of mass outages and even of smaller interruptions of water, power, or sewer services. IoT applications can collect data concerning the scope of an outage and deploy resources to help utilities recover from outages with greater speed.

Healthcare
IoT asset monitoring provides multiple benefits to the healthcare industry. Doctors, nurses, and orderlies often need to know the exact location of patient-assistance assets such as wheelchairs. When a hospital’s wheelchairs are equipped with IoT sensors, they can be tracked from the IoT asset-monitoring application so that anyone looking for one can quickly find the nearest available wheelchair. Many hospital assets can be tracked this way to ensure proper usage as well as financial accounting for the physical assets in each department.

General Safety Across All Industries
In addition to tracking physical assets, IoT can be used to improve worker safety. Employees in hazardous environments such as mines, oil and gas fields, and chemical and power plants, for example, need to know about the occurrence of a hazardous event that might affect them. When they are connected to IoT sensor–based applications, they can be notified of accidents or rescued from them as swiftly as possible. IoT applications are also used for wearables that can monitor human health and environmental conditions. Not only do these types of applications help people better understand their own health, they also permit physicians to monitor patients remotely.

trends
How is IoT changing the world? Take a look at connected cars.
IoT is reinventing the automobile by enabling connected cars. With IoT, car owners can operate their cars remotely—by, for example, preheating the car before the driver gets in it or by remotely summoning a car by phone. Given IoT’s ability to enable device-to-device communication, cars will even be able to book their own service appointments when warranted.

The connected car allows car manufacturers or dealers to turn the car ownership model on its head. Previously, manufacturers have had an arms-length relationship with individual buyers (or none at all). Essentially, the manufacturer’s relationship with the car ended once it was sent to the dealer. With connected cars, automobile makers or dealers can have a continuous relationship with their customers. Instead of selling cars, they can charge drivers usage fees, offering a “transportation-as-a-service” using autonomous cars. IoT allows manufacturers to upgrade their cars continuously with new software, a sea-change difference from the traditional model of car ownership in which vehicles immediately depreciate in performance and value.

Make the best business decisions with Oracle IoT
With Oracle Intelligent Applications, you can extend your supply chain, ERP, HR, and customer experience (CX) applications to the digital world. Leverage intelligent, predictive algorithms and digital twins to improve operational efficiency, boost worker productivity, enhance CX, and create new business models and opportunities.

Resources for
Careers
Developers
Investors
Partners
Startups
Students and Educators
Why Oracle
Analyst Reports
Gartner MQ for ERP Cloud
Cloud Economics
Corporate Responsibility
Diversity and Inclusion
Security Practices
Learn
What is cloud computing?
What is CRM?
What is Docker?
What is Kubernetes?
What is Python?
What is SaaS?
What’s New
Try Oracle Cloud Free Tier
Oracle Product Navigator
Oracle and Premier League
Oracle and Red Bull Racing Honda
Employee Experience Platform
Oracle Support Rewards
Contact Us
US Sales: +1.800.633.0738
How can we help?
Subscribe to emails
Events
News
Blogs
Country/Region
© 2021 Oracle
Site Map
Privacy/Do Not Sell My Info
Cookie Preferences
Ad Choices
Careers
Chat with salesContact or call
Skip to content
 
Software Testing Help

Home
Resources
FREE EBooks
QA Testing
Courses
Automation
Types Of Testing
Tutorials
Data
18 Most Popular IoT Devices In 2022 (Only Noteworthy IoT Products)
Last Updated:December 28, 2021
A Complete list and comparison of the interesting and noteworthy IoT Devices and smart products with features:

Internet of Things (IoT) devices support the expansion of internet connection beyond the usual standard devices like computers, laptops, smartphones etc.

These IoT devices are purely integrated with high definition technology which makes it possible for them to communicate or interact over the internet smoothly and can also be managed and controlled remotely when required.


IoT Devices

What You Will Learn: [hide]

Introduction Of IoT Devices
IoT Life Cycle
Advantages Of IoT Devices
Disadvantages
Frequently Asked Questions For The Internet Of Things Devices
List of Top 18 IoT Devices Examples
#1) Google Home Voice Controller
#2) Amazon Echo Plus Voice Controller
#3) Amazon Dash Button
#4) August Doorbell Cam
#5) August Smart Lock
#6) Kuri Mobile Robot
#7) Belkin WeMo Smart Light Switch
#8) Footbot Air Quality Monitor
#9)  Flow by Plume Labs Air Pollution Monitor
#10)  Nest Smoke Alarm
#11) Nest T3021US Learning Thermostat Easy Temperature Control
#12) Philips Hue Bulbs and Lighting System
#13) Bitdefender BOX IoT Security Solution
#14) Ring Doorbell
#15) WeMo Insight Smart Plug
#16) Logitech Harmony Universal Remote
#17) Particle Photon Wi-Fi with Headers
#18) NETGEAR Orbi Ultra-Performance Whole Home Mesh Wi-Fi System
Conclusion
Recommended Reading
Introduction Of IoT Devices
It is a matter of fact today that a number of IoT products have surpassed a huge number of humans on this planet.

Approximately there are around 7.62 billion humans on our planet, but to your surprise, by the year 2022 with an increasing graph of IoT devices, there may be around 20 billion IoT smart devices up and running with an increase in the demand of 5g network.

Please refer the below graph for to know the increasing demand for these devices in the near future:

graph for demand of IOT devices in future
[image source]

If an average is made then after some years each and every individual in America would be having more than 10 IoT devices of their own. Please refer this post to more about this statistical data.

Nowadays, the production and usage of the Internet of Things devices are increasing very rapidly. IoT products and devices basically include laptops, smartphones, smart gadgets, smart watches, smart and digitalized vehicles and almost all of these are used majorly today.

How does IoT work and what does makes them smart device?

It basically depends on two things to transform a normal device into IoT smart device.

They are:

The device which has the capability to connect with the internet in any way.
The device which is integrated with technology like sensors, functional software, some inbuilt technology which support network connections and also actuators.
When both these functionalities are combined together an IoT device is formed. Earlier only simple watches were only used to see the time and date, but now the smart IoT watches allow a user to see heartbeat rate, calorie count, steps walked etc.

The market for IoT devices is expanding rapidly day by day and becoming more popular as well with the drastic increase in the number of users who use them daily.

IoT Life Cycle
IoT has a very simple lifecycle of development.

Deployment followed by monitoring, servicing, managing, which is followed by regular updates and decommissioning at the end.

IoT Product Lifecycle is described in the below diagram.

IOT Device Life Cycle
Apart from these information’s, there are some advantages and disadvantages of the Internet of Things devices which may have a great impact on the current and future generation of mankind.

Advantages Of IoT Devices
There are several advantages of these smart devices and some of them are given below.

IoT encourages the interaction between devices called as a machine to machine interaction.
It provides good automation and control.
Integrated with more technical information, so it is better to operate.
IoT possesses strong monitoring feature.
It saves a lot of time.
IoT helps to save more money by reducing manual task and time.
Automating daily life tasks makes good monitoring of devices.
Increased efficiency and time-saving.
With good features make a better quality of life.
Disadvantages
Though there are several advantages, there are certain disadvantages too.

Enlisted below are the various demerits:

Internet of Things devices does not have any international compatibility standard.
They may become highly complex resulting in failure.
Internet of Things devices may get affected by privacy and security breach.
Reduced safety for users.
Reduction in the employment of manual tasks thus resulting in job reductions.
Internet of Things device may take control of life in due course of time with increasing AI technology.
Frequently Asked Questions For The Internet Of Things Devices
Some of the Frequently Asked Questions for the Internet of Things devices are enlisted below for your reference:

#1) What are IoT devices?

Answer: IoT devices are basically smart devices which have support for internet connectivity and are able to interact with the other devices over the internet and grant remote access to a user for managing the device as per their need.

#2) What are the examples of IoT devices?

Answer: There are several top devices in the market. Smart Mobiles, smart refrigerators, smartwatches, smart fire alarms, smart door locks, smart bicycles, medical sensors, fitness trackers, smart security system, etc., are few examples of IoT products.

#3) How many IoT smart devices may be there by the year 2022?

Answer: IoT device market is increasing drastically, hence it is assumed to have more than 20 billion IoT products in the market up and in running state by the year 2022.

#4) What technologies are used in IoT products?

Answer: The technologies used in these devices are low energy wireless and Bluetooth, NFC, LTE, ZigBee, wireless protocols etc.

#5) What exactly is the use of an IoT product/device?

Answer: IoT product/devices are basically physical devices integrated with software and can connect with each other over the internet to exchange information, they help the user for more simple and direct integration of the physical world.

Note: The information provided in this article is purely based on the information available on the internet and not from any private source.

=> Contact us to suggest a listing here.
List Of Top 18 IoT Devices Examples
Enlisted below are the top Internet of Things devices that are used all over the world.

You can actually buy and experience these devices for yourself! That is the beauty of this list.

Let’s Explore!!

#1) Google Home Voice Controller
Google Home Voice Controller
Google Home Voice Controller is a smart IoT device which allows the user to enjoy features like media, alarms, lights, thermostats, control the volume and much more functions just by their voice.

Cost: US $ 130

YouTube Link: Google Home Voice Controller

Top Features:

Google home allows a user to listen to media.
Let’s the user to control TV and speakers.
It is capable of managing timers and alarms.
It can remotely handle the volume and home lights as well.
It helps the user to plan their day and get things done automatically.
Company Website: Google Home Voice Controller

Where to Buy: Google Store, eBay, Flipkart, dell.com, google express, Verizon etc.

#2) Amazon Echo Plus Voice Controller
Amazon Echo Plus voice controller

Amazon Echo Plus voice controller is a popular and reliable IoT device. It is capable to run songs, do phone calls, set timers and alarms, ask questions, provide information, check the weather, manage to-do & shopping lists, manage house instruments, and several other things.

Cost: US $ 99.99

YouTube Link: Amazon Echo Plus voice controller

Top Features:

Amazon Echo can play songs, connect to external speakers or headphones.
It is capable of making calls and messaging on voice command.
Amazon Echo has around 6-7 microphones, good technical specification and sound cancellation. It is capable of hearing your voice from all the directions even when songs are played.
Controls compatible smart home devices including lights, plugs, and more.
Check Price and Get it Here: Amazon Echo Plus voice controller

#3) Amazon Dash Button
Amazon Dash Button

Amazon Dash Button is basically a device that gets connected over internet Wi-Fi and makes sure that the user does not lack important household items like soft drinks, grocery material, medical and personal care, kids and any pet items ever again.

If a user wants to fully utilize the Dash Button, then the user must be an Amazon Prime member.

Cost: US $ 4.99

YouTube Link: Amazon Dash Button

Top Features:

It allows the user to order products quickly and there is no need to recall the message again and it also helps to reduce the time frame for searching the required product by the user.
Amazon Dash Button also allows the user to reorder from popular brands – like Bounty, Tide, Cottonelle, Glad, Clorox etc.
It does not accept fresh order if the prior order is not complete unless the user allows multiple orders.
It is a good and reliable IoT product that is developed for making the user’s lifestyle simple and easy.
Check Latest Price and Get it Here: Amazon Dash Button

#4) August Doorbell Cam
August Doorbell Cam

August Doorbell Cam is an effective IoT innovation. August Doorbell Cam allows you to answer your door from anywhere or remote location. It constantly checks your doors and also captures motion changes in your doorstep.

Cost: US $ 199

YouTube Link: August Doorbell Cam

Top Features:

 Doorbell Cam pairs with all August Smart Locks to easily let guests into your home.
The integrated floodlight delivers clear, full-color HD video even full-color.
It constantly monitors your doorstep and will click the moments leading up to a motion alert.
Free 24 hour video recording.
It comes with a speedy and hassle-free installation process.
Where to BUY: Check Latest Price and model here August Doorbell Cam

#5) August Smart Lock
August Smart Lock

August Smart Lock has proven to be a reliable security IoT device. It allows the user to manage their doors from any location hassle-free. It helps the user to keep thieves away and family in your home.

Cost: US $ 220

YouTube Link: August Smart Lock

Top Features:

Allows the user to know about each and every person coming and going into your home.
Provides unlimited digital keys and no fear of stolen key.
It gives the status updates of your door as it is properly closed or not.
It has a good auto-unlock feature and as soon as the user arrives near the door it opens automatically.
Easy installation and is compatible with most standard single cylinder deadbolts.
Where to BUY: Check latest price and model here: August Smart Lock

#6) Kuri Mobile Robot
Kuri Mobile Robot
Kuri is the first sort of home robot and most popular too. It is specifically designed for entertainment. Kuri interacts with the users and captures moments all around the house daily.

Cost: US $ 700

YouTube Link: Kuri Mobile Robot

Top Features:

Kuri has capacitive touch sensors and HD camera.
It is integrated with gestural mechanics and microphones.
It has heart light and speakers.
It includes integrated mapping sensors and drives system.
It has a good processor and smooth charging pad.
Where to Buy: Kuri Mobile Robot

#7) Belkin WeMo Smart Light Switch
Belkin WeMo Smart Light Switch

The WeMo Light Switch helps a user to manage your home lights from the wall, your mobile or by using your voice. This smart light switch connects to your existing home Wi-Fi network to give wireless access of your lights – with no subscription or hub required.

Cost: US $ 39.95

YouTube Link: Belkin WeMo Smart Light Switch

Top Features:

It comes with a clip-on faceplate and no screws are required.
Easy on/off, push anywhere to toggle.
WIFI indicator and night light available.
WIFI reset and power restart available.
It has a very quick, simple installation.
Where to BUY: Belkin WeMo Smart Light Switch

#8) Footbot Air Quality Monitor
Footbot Air quality Monitor

Foobot is a reliable IoT device which is helpful in measuring indoor pollution and leads to improved air quality in houses, workplace, and indoor public spaces. It often gives accurate results.

Cost: US $ 199

YouTube Link: Footbot Air Quality Monitor

Top Features:

It cleans the air pollution.
Keeps the humidity and temperature levels in check.
Helps to develop more focus and energy by breathing fresh air.
Supports to increase the lifespan of the users.
It has a very fast and simple installation process.
Where to buy: Check product details Footbot Air Quality Monitor

#9)  Flow by Plume Labs Air Pollution Monitor
Flow by Plume Labs Air Pollution Monitor
Flow Air pollution is an amazing discovery in the IoT market. It is a personal air quality tracker which informs the user in which area the air quality is bad and polluted and vice versa. It shows all the results in the map available in its app.

Cost: US $ 179

YouTube Link: Flow Air pollution

Top Features:

It tells the user about air quality and has a vegan leather strap.
It comes with a stainless steel body.
It has capacitive touch on its body.
It includes good quality RGB LED’S.
It has a good user guide and simple installation.
Company Website: Flow Air pollution

Where to Buy: Flow.plumelabs, Amazon, eBay etc.

#10)  Nest Smoke Alarm
Nest Smoke Alarm

Nest Smoke Alarm is a very useful IoT device. It is a smoke alarm that thinks, speaks and alerts your mobile phone about any un-wanted emergencies in your home. It automatically tests itself.

Cost: US $ 119

YouTube Link: Nest Smoke Alarm

Top Features:

The user can manage this alarm with the phone without any extra hardware.
Installation is easy and can be set up through iPhone, iPad or Android device.
Appearance is very good.
It also has certain colors like green, yellow, red to communicate with a user according to the situations.
Where to buy: See product details here Nest Smoke Alarm

#11) Nest T3021US Learning Thermostat Easy Temperature Control
Nest T3021US Learning Thermostat Easy Temperature Control

It helps to control the home’s temperature and cooling environment with no effort from the user for Nest thermostat. It adapts according to your activities and manages room the temperature automatically based on your routine.

Cost: US $ 249.99

YouTube Link: Nest thermostat

Top Features:

It can interact with Alexa for voice control.
It saves a lot of energy by adapting to the room temperature.
It helps to read the display across the room.
It is compatible with many types of equipment.
Where to Buy: See product details here Nest thermostat

#12) Philips Hue Bulbs and Lighting System
Philips Hue Bulbs and Lighting System

Philips Hue is a very famous IoT device and is used as a personal wireless lighting system that allows to control your light and create the right ambiance for every moment.

It makes the smart home to live with the most connected lights in the world.

Cost: US $ 30 to US $ 100

YouTube Link: Philips Hue

Top Features:

Smart and away from home control.
Light schedules and comfort dimming.
Create your ambiance, wake up, well being, etc.
Sync with music and movies.
Where to Buy: Philips Hue

#13) Bitdefender BOX IoT Security Solution
Bitdefender BOX IOT Security Solution

Bitdefender Box is a very useful IoT device. It is the Smart Home Cybersecurity Hub that prevents various Internet-connected devices from malware, stolen passwords, identity theft, spying etc.

Cost: US $ 179.99

YouTube Link: Bitdefender Box

Top Features:

It provides Double-Clad Home Network Security to users.
Bit defender comes with a high-performance ratio.
It provides a unique and rich feature of parental control.
It comes with award-winning technology.
Where to Buy: Bitdefender Box

#14) Ring Doorbell
Ring Doorbells

Ring Doorbells is a reliable IoT product and allows the user to answer the door from any place using your smartphone. Protect your home with security cameras from Ring video doorbell.

Cost: US $ 99.99 to US $ 499

YouTube Link: Ring Doorbells

Top Features:

It provides Double-Clad Home Network Security to users.
Night vision and interchangeable faceplates.
HD video quality and motion detection sensor.
Comes with a rechargeable battery with high performance.
Where to Buy: Ring Doorbells

#15) WeMo Insight Smart Plug
WeMo Insight Smart Plug

WeMo smart plug is a good IoT product which helps to turn on your lights, turn appliances on/off and provides the ability to monitor them from anywhere remotely.

Cost: US $ 49.99

YouTube Link: WeMo smart plug

Top Features:

It gets insight into home energy usage and is easy to use and install.
It also creates rules, schedules and receives notifications.
Compatible with both IOS and Android devices.
It integrates with Alexa or Google voice for hands-free voice control.
Where to Buy: WeMo smart plug

#16) Logitech Harmony Universal Remote
Logitech Universal Remote

Logitech Harmony is a powerful and useful IoT smart device for daily purposes. It is a universal remote which lets you control your house media, lighting, and other smart devices from one location remotely.

Cost: US $ 49.99 to US $ 349.99

YouTube Link: Logitech Harmony

Top Features:

It has features of up to 8 remotes, reduces complexity and clusters in-house.
It supports more than 5000 brands and new brands can also be added in the future.
It has a simple online setup using your computer.
It includes one-click activity buttons like watch a DVD so that it switches to it.
Where to Buy: Logitech Harmony

#17) Particle Photon Wi-Fi with Headers
Particle Photon Wi-Fi with Headers

This is the particles IoT board which provides everything that a user needs to build a connection project. It makes prototyping simple and easy due to plugins.

Cost: US $ 19 to US $ 25

YouTube Link: Particle Photon Wi-Fi

Top Features:

It has an open source design.
It comes with a real-time operating system.
It has particle WIFI module and RGB LED.
It also has pre-soldered headers.
Where to Buy: Particle Photon Wi-Fi

#18) NETGEAR Orbi Ultra-Performance Whole Home Mesh Wi-Fi System
NETGEAR Orbi

It is an extremely powerful Internet of Things device which maintains the whole-home mesh Wi-Fi system that is capable to cover the whole house with fast WI-FI. It can work with the existing internet service provider.

Cost: US $ 323.99

YouTube Link: NETGEAR Orbi 

Top Features:

It has a simple and quick installation with Orbi app.
It allows pausing Wi-Fi to do a quick status check.
Eliminates Wi-Fi dead zones and buffering.
Provides good speed Wi-Fi even if many devices are connected at the same time.
Where to Buy: NETGEAR Orbi

Conclusion
Internet of Things IoT device is a burning topic in the current era. We understood how these smart devices developed by mankind for mankind are impacting in both positive and negative ways.

In this article, we came to know about IoT device which is the Internet of Things, the types of devices which include IoT in our day to day life and the process in which the IoT devices make a user’s task simple and quick.

We saw how this technology which is increasing drastically is going to impact the future of mankind and the working principle of IoT devices. You also came to know about the price, features, video explanation and from where to buy these devices as per your requirements.

With these points, we believe the time is not too far, in which we will see each and every individual, home using and depending on these “Internet of Things”.

=> Contact us to suggest a listing here.

Recommended Reading
TOP 11 Best Internet Of Things (IoT) Companies To Watch In 2022
10 Best IoT Platforms To Watch Out In 2022
10 Powerful Internet of Things (IoT) Examples of 2022 (Real-World Apps)
Internet of Things (IoT) Testing: Challenges, Tools and Testing Approach
Connecting Real iOS & Android Devices from Cloud to Appium Studio
pCloudy Hands-on Review Tutorial: Mobile App Testing on Real Devices
5 Most Popular Transactional Email Service Providers in 2022
9 Most Popular CSS Editors for Windows and Mac [2022 LIST]
About SoftwareTestingHelp
Helping our community since 2006! Most popular portal for Software professionals with 100 million+ visits and 300,000+ followers! You will absolutely love our tutorials on QA Testing, Development, Software Tools and Services Reviews and more!
Recommended Reading
TOP 11 Best Internet Of Things (IoT) Companies To Watch In 2022
10 Best IoT Platforms To Watch Out In 2022
10 Powerful Internet of Things (IoT) Examples of 2022 (Real-World Apps)
Internet of Things (IoT) Testing: Challenges, Tools and Testing Approach
Connecting Real iOS & Android Devices from Cloud to Appium Studio
pCloudy Hands-on Review Tutorial: Mobile App Testing on Real Devices
5 Most Popular Transactional Email Service Providers in 2022
9 Most Popular CSS Editors for Windows and Mac [2022 LIST]
JOIN Our Team!
Software Testing freelancing author jobs

ABOUT US | CONTACT US | ADVERTISE
ALL ARTICLES ARE COPYRIGHTED AND CANNOT BE REPRODUCED WITHOUT PERMISSION.
© COPYRIGHT SOFTWARETESTINGHELP 2021 — READ OUR COPYRIGHT POLICY | PRIVACY POLICY | TERMS | COOKIE POLICY | AFFILIATE DISCLAIMER

Software Testing Help
Skip to Main Content
Skip to Footer
Careers
,
Contact
,
Search
,
Login
,
Arm
Products
Products
Solutions
Solutions
Why Arm
Why Arm
Support & Training
Support & Training
Resources
Resources
Company
Company
Arm
Arm System IP
GLOSSARY
IOT DEVICES
What Are IoT Devices?
IoT devices are pieces of hardware, such as sensors, actuators, gadgets, appliances, or machines, that are programmed for certain applications and can transmit data over the internet or other networks. They can be embedded into other mobile devices, industrial equipment, environmental sensors, medical devices, and more.

Why IoT Devices?
Increasingly, IoT devices are using AI and machine learning to bring intelligence and autonomy to systems and processes, such as autonomous driving, industrial smart manufacturing, medical equipment, and home automation. Many of these devices are small, power- and cost-constrained microcontroller-based systems. Network bandwidth and consumer expectations around data privacy and user experience continue to demand more on-device processing, where data is processed on the IoT endpoint, rather than using cloud-based approaches.

IoT Device Resources
Explore how emerging IoT technologies will transform how we interact with our homes.

Smart Home IoT Devices
Learn how Arm is accelerating the journey to autonomous and transforming industry with intelligent end-to-end devices.

Industrial Solutions
See how Arm is building a foundation for the future of IoT and helping businesses turn ideas and innovation into reality.

IoT Solutions
See how Arm and its ecosystem can help you unlock the benefits of AI for IoT endpoint devices.

Endpoint AI for IoT
Products
IoT Solutions
Processors
AI Platform
Graphics and Multimedia
Development Tools
Custom SoCs
Technologies
Arm Architecture
DynamIQ
big.LITTLE
Arm NN
CMSIS
Neon
TrustZone
Partner Ecosystem
Arm Approved Program
Artificial Intelligence
Automotive
HPC
Infrastructure
Mbed Partners
Support
Design Reviews
Developer Forums
Training
Documentation
Downloads
Contact Support
About Arm
Leadership
Security on Arm
Arm Blog
News
Arm Offices
 English 
arm
Cookie PolicyTerms of UsePrivacy PolicyAccessibilitySubscription CenterTrademarksGlossary
Copyright © 1995-2021 Arm Limited (or its affiliates). All rights reserved.
Important Information for the Arm website. This site uses cookies to store information on your computer. By continuing to use our site, you consent to our cookies. If you are not happy with the use of these cookies, please review our Cookie Policy to learn how they can be disabled. By disabling cookies, some features of the site will not work.

Accept and hide this message

Saturday, January 1, 2022
Logo
TrendsBig DataData CenterAICloudApplicationsMobileOpen SourceSecurityMore
85 Top IoT Devices
HomeMobile

By
Cynthia Harvey
March 24, 2021
lines of software code
By any market estimate, the list of top IoT devices is growing exponentially – and is poised for continued extremely rapid growth.

Manufacturers are clearly jumping on board the IoT trend and have begun adding Internet connectivity to a host of products. A quick Internet search turns up literally hundreds of “smart” or “connected” products.

Many of them are consumer IoT devices in the home automation space, but the industrial Internet of Things device market is also picking up steam. Additionally, there are many companies offering components and boards for makers and inventors interested in creating their own IoT devices.

IoT Devices – About The List
For this IoT devices list, we focused on IoT devices that are particularly popular, interesting or otherwise noteworthy. Please note that this is not a ranking; devices are arranged into categories and then alphabetically within each category. And if you know of additional IoT devices that you believe should have been on our list, feel free to note them in the comments section below.

Home Automation IoT Devices
Amazon Dash Buttons

Amazon offers an assortment of buttons that will order additional supplies of commonly used household products directly from Amazon.com. There are buttons for toilet paper, goldfish crackers, soap, laundry detergent, trash bags, cleaners, Gatorade, soup, razors, beauty products, baby formula and much more.

Amazon Echo

This smart home hub is essentially a speaker that can listen to users and respond to commands, it can play music, answer questions, read audiobooks, deliver traffic and weather reports, control lights and thermostats, order pizza, order an Uber and much more. The company has also released a similar, lower-priced device called the Tap.

Amazon Fire TV Stick

Especially with the latest Fire Stick model that includes 4K streaming with Alexa voice remote, the Amazon Fire TV Stick is a streaming solution that meets many other household needs. Whether you’re ordering more detergent through your Amazon Prime shopping cart or pulling up live home security feeds on your TV, the Alexa-enabled Fire Stick gives you access to more than your favorite TV shows and movies.

August Doorbell Cam

With this device, you can see and converse with people at your front door via your smartphone. It also allows you to open the door, and it can record visitors that you miss. Prices start at $199.

Awair

A good option for people with asthma or allergies, Awair is an air-quality sensor that can send smartphone alerts and recommendations for improving your indoor air quality. It also has programs for improving sleep and productivity.

Belkin WeMo

Belkin’s WeMo is a complete line of home IoT devices that includes smart switches, cameras, lights, an air purifier, heater, slow cooker, humidifier and more. The company has partnerships with several other firms that allows end users to control a lot of different devices with one smartphone app.

Bitdefender BOX

This cybersecurity hardware is designed to unify and protect all of your IoT devices, regardless of their native level of security and antivirus protections. The BOX application enables you to set custom security settings for each of your devices, create profiles and identify strange devices in your network, and catch a snapshot of overall network activity at any given time.

Canary

This all-in-one home security system captures video and audio and sends alerts to your smartphone. It automatically knows when you are home or away (no need to enter a security code), and you can also view the live video feed from your phone.

Chamberlain MyQ

You don’t have to buy a new garage door opener in order to control it with your smartphone. Chamberlain MyQ products allow you to control your existing garage door with your iPhone or Android device.

Cinder

Cinder’s website describes this product as “a cross between sous vide, the high-end slow-cooking water bath method used by restaurant chefs, and the George Forman grill.” It’s a countertop grill that connects to your smartphone to make cooking fast and easy.

Elgato Eve

This line of home automation products works with Apple HomeKit to allow users to monitor indoor air, outdoor weather, energy consumption and whether windows and doors are open or closed. The same company also offers a line of smart lighting products that can be controlled with Android or iOS devices.

Eversense

Most smart thermostats allow you to control your home temperature with your smartphone. This one actually senses where your smartphone is and adjusts the temperature in each individual room accordingly. It works for multiple family members, keeping everyone comfortable.

GE Connected Appliances

GE makes quite a few different types of connected appliances, including wall ovens, ranges, refrigerators, dishwashers, washers and dryers, water heaters and air conditioners. Through GE’s WiFi Connect service and apps, consumers can control the appliances or receive alerts.

Honeywell Smart House Products

Honeywell also offers a huge lineup of products related to home automation and security. It includes thermostats, GPS asset tracking, locks, lighting, video surveillance and more.

June Intelligent Oven

This countertop oven aims to be “more efficient than your conventional oven, more precise than your toaster oven, and way more intelligent than either.” It includes digital core temperature probes, a built-in digital scale and a camera with a food recognition engine. The company is accepting pre-orders, and products are scheduled to begin shipping before the end of the year.

Keen Home Smart Vent

If your house is too hot in the bedroom and too cold in the family room, this device is for you. It opens and closes the vents in each room depending on the temperature in that area. It can also connect to Nest thermostats and smartphones. The first production run of the device sold out, but the company expects to have more available in the fall of 2016.

LG SmartThinQ

LG divides its SmartThinQ line of connected appliances into categories for the kitchen (ranges and refrigerators), living (washers, dryers, robotic vacuums and air conditioners) and safety (robot vacuum doubles as a safety monitor with a video feed). They all integrate with the company’s smartphone app.

Nanit Plus Baby Monitor

Nanit Plus maintains the features of traditional baby monitors while adding several smart features to track your baby’s sleep patterns. The device includes sleep stats to track metrics like sleep onset, time asleep, visits, and overall sleep efficiency, helping parents to sleep coach with real insights. Another personalized feature is Memories, which gathers photos and videos in a sleep time capsule over time. This device works when the internet goes down and can be paired with other IoT devices, such as Amazon Echo.

Nespresso Prodigio

With this connected coffee maker you can use your smartphone to schedule coffee brewing, order supplies and receive maintenance alerts. The machine heats up quickly and uses single-serve coffee capsules.

Nest

Nest is best-known for its Internet-connected thermostat, but it also makes smoke and carbon monoxide detectors and cameras. Its products also integrate with IoT home automation products from a variety of other vendors.

Netatmo Welcome

This indoor security camera features built-in facial recognition to help keep your family safe. It also sends messages to your smartphone, letting you know when children, elderly relatives or intruders arrive at your home.

Neurio

With Neurio, homeowners can track their energy usage (or energy production if they have solar panels installed) from their smartphones. It takes a little work to install the device onto your electrical panel, but it can help you identify opportunities for energy savings in your home.

OSRAM Lightify

OSRAM’s Lightify line offers connected lighting for home indoor and outdoor use. It also offers controllers and connected lighting for industrial spaces.

Philips Hue

Philips offers a complete line of connected lighting products. It includes light bulbs, dimmers, light strips, switches, controllers and more.

Piper

Piper incorporates both home security and a home automation hub. It has a motion sensor and video camera for security, and the smartphone app allows you to control lighting and appliances. For added security, it can also integrate with door or window sensors.

Ring Doorbell

The Ring Doorbell doubles as a door answering device and additional form of home security. With its built-in video camera, Ring senses and records motion near your door, allowing you to communicate with your visitor in real time or review the most important security footage later.

Roost

Roost’s most unique product is its connected battery. Designed for use in smoke detectors, this battery tells you when it needs to be changed so that you don’t get those annoying chirps at three in the morning. The company also makes smart smoke alarms and water leak/freeze detectors.

Samsung SmartThings

Samsung’s SmartThings Line includes smart outlets, hubs, motion sensors, multipurpose sensors, arrival sensors, water leak sensors and more. The company also sells a complete home monitoring kit that makes it easy to get started with home automation.

Schlage

Long known for its deadbolts and doorknobs, Schlage is getting ready for the IoT era with two lines of smart home locks: Schlage Sense is a Bluetooth enabled smart deadbolt that integrates with iOS devices, and Schlage Connect is a similar smart locking system that integrates with alarm and security systems.

Singlecue

This devices allows you to control your other connected devices using gestures. Just raise a finger to control your lights, TV and much more.

Sleep Number 360 Smart Bed

This smart mattress was designed to automatically adjust to a person’s sleep patterns and to give them real-time data on the quality of their sleep. The 360 Smart Bed automatically adjusts temperature microclimates, firmness, position, and other features based on your movements and sleep cycle. With features like SleepIQ and Partner Snore  technology, the 360 Smart Bed application also allows you to track and improve your sleep health over time.

Sonos

Designed for music lovers, Sonos is a smart speaker system that you can install in a single room or throughout your house. Use the free smartphone app to control the music playing on the speakers—you can even play different music in each room .

Whirlpool Smart Appliances

For now, Whirlpool’s only smart appliances are washers and dryers, but its website seems to suggest that it has plans to offer more appliances that can connect to smartphones and tablets. Interestingly, the washer and dryer can also connect to the Nest thermostat to help consumers save money on their energy bills.

Wink

Wink is a smart home hub that connects together a lot of other IoT products from companies like GE, Nest, Philips and Schlage. Control your lighting, thermostat, door locks, appliances, blinds and more from a single console.

Industrial IoT Devices
Aptomar

Safety is always a concern in the oil and gas industry. Aptomar makes IoT sensors and systems for detecting spills and increasing safety. The company also offers services for monitoring oil and gas facilities.

ATrack trackers

Focused on the transportation and logistics industries, ATrack offers GPS tracking for monitoring assets and vehicles. It supplies its technology to a variety of other manufacturers and tracking services.

Awarepoint

With Awarepoint’s low-energy Bluetooth beacons, companies can track the locations of employees, assets, customers, patients and more in real time. The service is focused primarily on the healthcare, retail and manufacturing industries.

Bosch

Bosch has set its sights on becoming a leader in the IoT space. It manufactures sensors that go into other IoT devices as well as some smart home appliances. It also offers a complete cloud platform for building IoT applications.

CargoSense

The CargoSense solution includes sensors that can be included with product shipments to track temperature, humidity, shock, light, tilt and pressure every five minute. That data is tracked by an integrated analytics system that allows manufacturers and logistics companies to see what is happening with shipments at every point in the delivery process.

DorsaVi ViSafe

These wearable sensors track how employees are moving. The goal is to improve safety and reduce risk by helping prevent injuries. The company also offers similar technology that can be used by health care providers to help assess injuries and recommend therapies.

Filament

Filament makes industrial sensors with long-range wireless capabilities. It offers two products—the Tap and the Patch—that can be used to monitor environments and transmit data back to the network.

GridConnect

This company sells a host of sensors, probes, modules, adaptors, convertors and networking tools that companies can use to connect their factories, warehouses and other facilities to the Internet of Things. The company also makes a line of home automation devices under the ConnectSense brand name.

Impinj

Impinj claims to offer “the most comprehensive and widely adopted RAIN RFID platform.” It offers tag chips, gateways, readers, antennas and software for retailers, health care and other markets.

Meshify NOW

Designed for industrial settings, Meshify NOW is a starter kit that bundles together IoT gateways and analytics software. The gateways can collect data from a host of different types of IoT sensors and then transmit it for analysis.

Rethink Robotics

Rethink doesn’t just make robots—they make smart, collaborative robots that can work together and learn, accomplishing precise tasks in manufacturing and testing facilities. You can either purchase one of their prebuilt robots with names like Sawyer and Baxter, or you can work with the company to build a custom bot for your purposes.

RoboCV

You can think of RoboCV as a robot forklift. Designed for warehouse, it can move pallets and boxes from place to place without human intervention. Users can control and monitor the vehicle from a centralized panel, and they can also integrate it with external IT systems if they choose.

Samsara Sensors

This startup makes industrial IoT sensors for fleet telematics, energy monitoring, cold chain monitoring, asset monitoring and other purposes. The sensors transmit data to its cloud-hosted software where it can be monitored and analyzed.

Tachyus Sensors

Tachyus makes IoT solutions for the oil and gas industry. Their products allow producers to measure what is happening with their oil and gas extraction processes and then analyze and optimize those processes to maximize output.

Wzzard Wireless Sensors

Made by a company called Advantech B+B SmartWorx, this line of industrial sensors can track liquid or air temperature, current, liquid flow, vibration and levels for various types of equipment and tanks. The platform also includes a gateway for collecting and transmitting the data from the sensor network.

Xerafy

This company makes RFID tags and other technology for asset tracking in a wide variety of industries. Their tiny tags are small enough to be attached to medical supplies and surgical tools, and they are rugged enough for environments like oil and gas exploration.

Health Care/Fitness IoT Devices
AdhereTech

AdhereTech makes smart, wireless pill bottles that help insure that patients are taking their medication. They are currently being used for research studies, but their use will likely expand to the general population.

Apple Watch

Perhaps one of the most popular forms of personal IoT, the Apple Watch has been adopted by many users for its versatile communication and health-related functions. You can use an Apple Watch to call or text, get directions via Siri, listen to music, track your heart rate and daily activity, and even notify EMS during a personal emergency. Apple Watches pair with other Apple devices like iPhones, but you don’t have to have your phone nearby to use Apple Watch features.

Biotricity Bioflux

Available by prescription, Bioflux is a ECG monitoring device that allows physicians to keep track of their cardiac patients 24 hours a day. The full solution includes the device, analytics software and a monitoring service that can contact patients and health care providers when patients are in distress.

Breathometer Mint

Breathe into the Mint device, and it will tell you how effectively you are brushing your teeth. (Yes, essentially, this is an IoT device that tells you if you have bad breath). It gives you a grade and tracks your progress towards better oral hygiene.

Fitbit

Fitbit leads the market for wearable fitness and health trackers. Devices are available in a wide variety of styles and colors, and they can help consumers track progress towards a wide variety of fitness goals.

Garmin Forerunner

This line of fitness trackers is focused on people who consider themselves to be athletes. It tracks your heart rate, pace and times, and it includes tools for a wide variety of sports.

Misfit

Misfit makes several different fitness and sleep trackers, including one waterproof model designed for swimmers and the no-frills Flash model, which is one of the least-expensive products of this kind on the market. The company also offers some connected lighting products.

Peloton

Peloton is a home-based bike workout with built-in classes, instruction, and social engagement opportunities with other users. The Peloton IoT is designed to help you track your heart rate, resistance, and other fitness metrics in real time, and your Peloton Bike can pair with other IoT devices, such as Apple Watches, so that your activity is accurately tracked across your fitness devices. Although it is an at-home workout, your Peloton device allows you to build a community and communicate with other riders around the world.

Samsung Gear Fit

This dustproof, water-resistant fitness tracker features a curved display and long-lasting battery. It can also receive alerts about emails and text messages, and it integrates with Samsung’s S Health app.

Tempo Studio 

Tempo Studio combines features of both a gym membership and home workout, with all weights and workout equipment included in the membership subscription-based home set. Through a central “studio” that uses AI to give personalized coaching and weight recommendations for each user, as well as a growing library of live and pre-recorded classes, the program is tailored to provide a smart touch to your home workout.

Withings Blood Pressure Monitor

Extremely easy to use, this blood pressure monitor slips over your arm, takes your blood pressure readings and sends the results to your smartphone where they are tracked over time. The same company also makes other health-related IoT products like fitness sensors, oxygen sensors, baby monitors, scales, thermometers and more.

Miscellaneous IoT Devices
Click and Grow

If you thought gardening was a low-tech activity, meet Click and Grow, the smart indoor garden. The company claims it helps balance oxygen, water and nutritional ingredients to help plants grow better and faster.

Deeper

Designed for fisherman, Deeper is a portable fish finder that transmits sonar readings to your smartphone. Simply attach Deeper to your line and cast it into the water. Then check your phone to see the water depth and temperature, bottom contours and where the fish are hiding.

Furbo Dog Camera

Furbo was created to address all of your dog owner anxieties when your pet is home alone. This IoT can alert you when your dog is barking or howling, send photos and video clips of your dog’s activities to your phone via the cloud, and even toss them treats when you are away from them. Although the system primarily focuses on dog activity, it can also notify you of home emergencies related to your smoke or CO alarms.

Mimic GO

Mimic GO is a small, portable advice that you can attach to anything from a gym bag to a dorm room door. Anywhere that you want to track unwanted movement or potential theft, Mimic GO sends immediate notification of any disruption. Activate your Mimic GO device through your app, and it will notify you if movement or other environmental changes are detected nearby. You can also set up the device to sound an alarm and ward off unwanted visitors.

Theatro

Designed for the retail and hospitality industries, Theatro makes a wearable WiFi-based communication device designed to improve worker productivity. It weighs just an ounce and a half, and helps hourly workers stay in touch with each other and receive quick answers to questions.

Whistle

Have a dog who likes to run? Whistle is an Internet-connected collar that tracks your pet’s location and activity level. It can also monitor your pet’s health trends, making it a little bit like a Fitbit for dogs.

Development Boards IoT Devices
Arduino

Arduino sells a variety of IoT development boards and related accessories, many of them based on open source hardware designs. They offer special collections for kids and home hobbyists as well as more serious products for inventors and developers.

BeagleBoard

This organization offers credit-card sized computers under the BeagleBone brand name. Most of the boards can run Linux or Android, and they are based on open source specifications.

Cypress IoT Products

Cypress recently purchased Broadcom’s IoT product portfolio. It includes Bluetooth sensors and smart tags, microcontrollers and system on a chips (SoC), as well as the WICED IoT Platform for developing IoT applications.

Flutter

Aimed at hobbyists, students and engineers, Flutter modules incorporate ARM processors, long-range wireless capabilities, built-in battery charging and an integrated security chip. The organization says its products are “an ideal choice for robotics, wireless sensor networks, consumer electronics, and educational platforms.”

Gemalto Cinterion

Although Gemalto is primarily a security company, it also offers a portfolio of IoT and machine-to-machine (M2) products. It offers modules and terminals based on a variety of standards for automotive and industrial use.

Intel Gallileo

Intel describes its IoT development board as “an excellent learning platform that can meet the demands of advanced projects.” The Gallileo Gen 2 Board features an Intel Quark SoC processor, 256MB RAM, multiple ports and support for Arduino.

Microduino

Also based on the Arduino platform, Microduino boards and related modules are about an inch square and stackable. Basic modules start under $10, and the company also offers kits for building your own robots, quadcopters, weather stations and more.

OpenMote

This firm offers open source IoT hardware, including computing modules, interface boards, and battery modules. Pre-built devices are somewhat more expensive than many other open source boards, with the OpenMote-CC2538 computing module retailing for 90.00€.

OpenPicus FlyPortPRO

OpenPicus positions itself as an end-to-end platform provider for IoT, and aims to help other companies get off the ground with their own IoT products. Its development board is called the FlyPort Pro, which comes in a wide variety of models. Starter kits are also available.

CrowdSupply Pinoccio

With Pinoccio’s Arduino-compatible Scout nodes, users can build a highly efficient mesh network (which Pinoccio calls a Troop). A single Scout costs $59, or you can get a starter kit for $149.

Raspberry Pi

Undoubtedly the best-known of all the IoT development boards, the Raspberry Pi is actually a complete computer the size of a credit card. The third-generation model includes 1.2GHz 64-bit quad-core ARMv8 CPU, Bluetooth, 1 GB RAM, 4 USB ports, an Ethernet port, a Micro SD card slot and much more. It costs around £30.00, and purchasing is available through a network of distributors.

SODAQ

Short for “solar powered data acquisition,” SODAQ offers Arduino-compatible boards, modules and sensors that are powered by the sun. The company also develops custom IoT solutions for clients.

Tessel

Tessel is a modular IoT and robotics platform designed to enable fast prototyping. Boards come with Node.js preinstalled, and prices for boards start under $50.

UDOO

This company offers boards based on open source hardware designs. It’s primary products are the introductory-level Neo ($49.90), the more powerful Quad/Dual ($135) and the x86, which is being funded through Kickstarter but is available for pre-order.

Virtual Reality (VR) And Augmented Reality (AR) IoT Devices
Google Cardboard

A surprisingly low-tech approach to virtual reality, Google Cardboard requires users to slot an Android smartphone into a cardboard (or plastic) viewer that they can make themselves or buy. For nostalgic toy lovers, there’s also a viewer that looks like a Mattel View-Master.

Microsoft HoloLens

Designed primarily for enterprise use, Microsoft HoloLens is an augmented reality device that can assist with design work, communication, training and more. Development Edition devices sell for $3,000.

Oculus Rift

Facebook’s Oculus Rift device offers consumers a virtual reality experience for playing games, watching movies and other entertainment experiences. Devices cost $599, and in order to use them buyers will need a compatible PC.

Samsung Gear VR

Powered by Oculus technology, Samsung’s VR headset integrates with its Galaxy line of smartphones. Key features include a Super AMOLED display, wide field of view, precise head tracking and low latency.

Previous Article
Lenovo’s Epyc Hyperconverged Strategy
Next Article
IoT Security: 10 Tips To Secure The Internet Of Things
Similar articles
BIG DATA
DISH Wireless and Cisco Partnering on 5G Services
MOBILE
AWS Rolling Out Private 5G
APPLICATIONS
The Software-Defined Networking (SDN) Market 2022
 Share
Latest Articles
AI
The Metaverse is Overhyped;...
Rob Enderle - December 20, 2021
 
AI
The Strategic Advantage of...
Rob Enderle - December 20, 2021
 
APPLICATIONS
56% of Software Users...
Chris Ehrlich - December 20, 2021
 
APPLICATIONS
SAS Implements Open-Source Integration...
Chris Ehrlich - December 20, 2021
Logo
Datamation is the leading industry resource for B2B data professionals and technology buyers. Datamation’s focus is on providing insight into the latest trends and innovation in AI, data security, big data, and more, along with in-depth product recommendations and comparisons. More than 1.7M users gain insight and guidance from Datamation every year.

Advertisers
Advertise with TechnologyAdvice on Datamation and our other data and technology-focused platforms.

Advertise with Us
Menu
Trends
Big Data
Data Center
AI
Cloud
Applications
Mobile
Open Source
Security
Storage
Networks
ERP
Careers
Our Brands
PRIVACY POLICYTERMSABOUTCONTACTADVERTISECALIFORNIA – DO NOT SELL MY INFORMATION
Property of TechnologyAdvice.
© 2021 TechnologyAdvice. All Rights Reserved

Advertiser Disclosure: Some of the products that appear on this site are from companies from which TechnologyAdvice receives compensation. This compensation may impact how and where products appear on this site including, for example, the order in which they appear. TechnologyAdvice does not include all companies or all types of products available in the marketplace.

CUJO AI
SOLUTIONS 
 
AI PLATFORM 
 
RESOURCES
 
BLOG
 
PRESS
 
COMPANY 
 
CONTACT US
15 Most Popular IoT Products and Devices in 2021
 All posts
July 27, 2021

The most popular Internet of Things (IoT) devices range from wearable tech to exotic home appliances. Our advanced AI algorithms monitor and protect over 1 billion devices, which requires us to precisely identify the types, models and configurations of active devices. These device intelligence algorithms are the reason behind us having some of the most precise data about the real popularity of IoT products. We have released our insights about the overall connected device ecosystem in our recent report, which goes beyond IoT, and includes mobile devices, computers, gaming devices, and many other categories.

Device intelligence is how network service operators (e.g., internet providers) can distinguish devices and their types. CUJO AI Explorer is the most robust and precise device intelligence solution deployed at an unmatched scale. Read the full report to get even more insights about popular device use.
The percentages provided here represent the popularity of IoT products among all connected devices, including smart phones and computers, to give readers a clearer view of the real scale IoT devices have in the online consumer ecosystem. The two dominant device categories – computers and smart phones – collectively make up around 62% of all connected devices.

What Are the Most Popular IoT Devices?
IoT goes beyond popular things like smart TVs, wearable devices or smart home appliances. Today, there are dozens of categories of connected devices ranging from simple sensors to complex or unusual products.

1. Smart watches are the most popular IoT devices
The Internet went from the computer age to the mobile age, but there are some signals that we have another rapidly growing connected device segment — wearables, notably smart watches. Our real-world device data clearly shows that smart watches are third among all connected devices, trailing only smart phones and computers.

Smart watches are the most popular IoT devices
CUJO AI Labs data

Smart watches have been around for many years, yet these devices have seen much slower adoption rates due to battery size and overall functionality. Nevertheless, in 2020-2021 smart watches are some of the fastest growing IoT devices in North America, and their popularity recently experienced several spikes.

2. Gaming consoles
Gaming consoles experienced two surges in popularity in the last 15 months: The first one happened when the quarantine started and a second one with the end of the year sales and holidays. While there are only a few leading console brands, their market penetration is quite significant, making gaming consoles some of the more common connected devices on home networks.

Most popular IoT devices: Gaming console popularity over time. 
Gaming console popularity experienced two surges in recent months. CUJO AI Labs data

Our device distribution data also shows that the PlayStation 4 is by far the most popular gaming console, while the new PS5 has seen low usage due to unit shortages and scalpers buying up the stock and not using the devices themselves.

The Playstation 4 was the most popular IoT gaming device
Gaming console popularity by model. CUJO AI Labs data from April 2021

3. Smart TV sets and content streaming devices
Our data shows that smart TVs and other streaming devices have an established position in the market, yet their growth is slow. It is very likely that TVs and other traditional entertainment systems will not become the most popular IoT products in the near future. It is, however, interesting to watch the VR headset trends in our full report, which might signal a shift towards the new age of entertainment.

Smart TVs are the third most popular IoT devices
How the popularity of smart TVs, set-top boxes, and streaming devices changed in recent months. CUJO AI Labs data

4. Voice control devices
At the end of 2020, voice control devices significantly increased in popularity after the holidays. Overall, these devices seem to have an established position in the IoT market.

Voice control devices are very popular IoT devices
Voice control device popularity in recent months, CUJO AI Labs data

5. Printers
Connected printers have always been among the most popular connected devices. Even though more businesses and households are going paperless, there are still many people and organizations using printers, making them some of the most popular IoT devices in the world.

Printers have a stable niche in the IoT ecosystem, making up around 2 percent of all connected devices
Printers have a stable niche in the IoT ecosystem. CUJO AI Labs data

6. Cameras
Connected cameras have an established niche in the IoT ecosystem, and are some of the most notoriously insecure devices. Our device intelligence algorithms constantly prevent malicious remote access attempts of these devices, as well as automatically monitors them for suspicious connectivity patterns.

The sixth most popular IoT device group are cameras, which make up around 1% of all connected devices
Connected cameras make up close to 1% of all connected devices. CUJO AI Labs data

Making up close to 1% of all connected devices (including personal computers and smart phones), cameras are an increasingly important device in the overall network provider security space.

7. Lighting appliances
Smart light bulbs, automated lighting systems and adaptive lighting solutions were among the first wave of consumer-grade IoT devices, and are still among the most popular IoT devices, with new products appearing on the lighting market every year.

Lighting appliances are popular IoT products that do not show strong trends
Lighting appliance popularity seems stable. CUJO AI Labs data

8. Smart thermostats
Keeping people cooler or warmer with smarter dynamic controls, smart thermostats have a stable, established segment in the smart home IoT ecosystem and did experience a nominal decrease in popularity over the last few months.

Smart thermostats are not gaining a lot of popularity among other IoT devices
Smart thermostats are not becoming significantly more popular, unlike other IoT devices. CUJO AI Labs data

In terms of the most popular smart thermostat models and makers, Google’s Nest, ecobee and Honeywell are the most popular brands on the market. For more data about the most popular IoT  brands, see the full report.

9. E-readers
E-readers had a massive +150% increase in Q2 2020. Making up a rather small portion of the overall connected device population (0.3%), this jump in e-reader popularity was quite significant, even if it did not create any lasting trend in the year since.

E-readers were one of the most popular IoT devices after a surge in popularity as more people stayed at home during the start of the pandemic
E-readers had a surge in popularity as more people stayed at home during the start of the pandemic. CUJO AI Labs data

10. Smart doorbells
There are several categories of smart home safety devices, and all of them had similar adoption rates at the start of 2020. Nevertheless, our data shows that smart doorbells are becoming more popular, close to doubling their quarterly new device numbers. On the other hand, connected smoke alarms and smart key locks have small and stable niches in the connected device ecosystem.

Smart doorbells are becoming popular IoT devices
Smart doorbells are becoming popular IoT devices. CUJO AI Labs data

11. Alarm systems
As noted above, alarm systems recently had a surge, almost tripling their popularity among all connected devices.

IoT Alarm systems gain popularity
Smart alarms almost tripled in popularity very recently. CUJO AI Labs data

Interested in IoT security? Read the latest from our researchers to learn about IoT malware and IoT hacking.

Rising-star IoT Products
Some IoT products might become very popular rather soon, even if other IoT devices have more adoption currently. We have analyzed our data to show four outstanding examples of Internet of Things devices that have gained substantial popularity recently.

Sports and fitness devices
Gym lockdowns and more time at home did not stop people from exercising, and we saw an increase in smart fitness and sports devices connected in March 2020 onward. An overall increase of 50% in popularity, fitness and sports devices show how a significant change in the daily habits and living conditions impact the online smart device ecosystem.

Sports and fitness devices are among IoT products that are gaining popularity
Sports and fitness devices are gaining popularity among IoT products. CUJO AI Labs data

Home robots
Roombas and other home robots are not yet popular enough to appear among the top IoT devices, but our impressions of this space leave us confident that we will see more IoT robots in consumer homes in the coming years.

Home robots are popular IoT products
Home robots as a percentage of all connected devices. CUJO AI Labs data

Connected cars
Still niche among IoT devices (only 0.05% distribution among all connected devices), cars are slowly gaining traction, and two manufacturers are competing for the lead: Ford and Tesla. Ford has been the more popular connected car brand since last summer, while other manufacturers are struggling to carve out a significant portion of the market, with Subaru being the only other manufacturer that had any significant increases in new connections since July 2020.

Connected cars are rising star IoT products, gaining popularity
Connected car popularity by car manufacturer. CUJO AI Labs data

Smart photo frames
Photo frames–were clear outliers in IoT popularity last year, and had massive increases in new connections. These exotic IoT devices allow people to connect their external (e.g. cloud storage) photos with the frame in their home. Several brands are strong in this market niche, making this an interesting category to watch in the near future.

The popularity of smart photo frames over time and most popular smart photo frame brands
Smart photo frames were a popular holiday present last year, with quite a few popular models on the market. CUJO AI Labs data

See More IoT in Numbers
Download our public report on the state of connected devices to get more in-depth and useful data on the IoT device market and the brands that make the most adopted IoT products.

Interested in IoT security? Subscribe to our newsletter to get the latest insights about IoT attacks, botnets, and attacks observed in our honeypots.

Subscribe to the
CUJO AI newsletter
Get the latest insights from our research teams and stay in the loop with industry trends. We never spam.

Email
 


CUJO AI News
Linkedin
IoT
CUJO AI News
2021: A Year of Growth and Recognition for CUJO AI
Dorka Palotay
IoT Botnet Report 2021: Malware and Vulnerabilities Targeted
Leonardas Marozas
Multi-layer Cybersecurity: How We Improve Telco Client Security
All blog posts 

CUJO AI Lens
An AI-powered analytics solution that, for the first time, gives operators an aggregated, dynamic and near real-time view into the way end users utilize their home or business networks
Learn more 

Explorer
Provides complete, programmatic access to granular data via APIs to all the information collected and processed by the CUJO AI Platform
Learn more 

Compass
An advanced service that empowers families and businesses to define and manage how their members’ online activity affects their everyday lives
Learn more 
Other posts by CUJO AI News

2021: A Year of Growth and Recognition for CUJO AI
CUJO AI newsBy CUJO AI News

Most Popular Gaming Consoles by Real Usage, Not Sales Numbers
IoTBy CUJO AI News

Machine Learning Security Evasion Competition 2021 Calls for Researchers and Practitioners
CUJO AI newsBy CUJO AI News
All posts by CUJO AI News

linkedinlinkedintwittertwitteryoutubeyoutuberssrss
Solutions
Operator Intelligence
Lens
Explorer
Digital Life Protection
Sentry
Compass
Incognito
On The Move
Platform
Agent
Engine
Cloud
Company
About
Leadership team
Awards and Recognition
WEF Technology Pioneer
Projects With WEF
Technology Partners
Events
Careers
Contact Us
Press Page
News
Press Kit
2022 CUJO LLC · Terms of Service · Privacy Policy · Legal Notice

We use cookies on our website to give you the most relevant experience by remembering your preferences and repeat visits. By clicking “Accept All”, you consent to the use of ALL the cookies. However, you may visit "Cookie Settings" to provide a controlled consent.
Cookie Settings Accept All
Received October 3, 2020, accepted October 26, 2020, date of publication October 30, 2020, date of current version November 11, 2020.
Digital Object Identifier 10.1109/ACCESS.2020.3034937
JSON-LD Based Web API Semantic Annotation
Considering Distributed Knowledge
XIANGHUI WANG 1, (Member, IEEE), QIAN SUN1, AND JINLONG LIANG2
1Department of Computer Science and Technology, Shandong Jianzhu University, Jinan 250101, China
2Information Center, Shandong Provincial Qianfoshan Hospital, First Afliated Hospital of Shandong First Medical University, Jinan 250100, China
Corresponding author: Xianghui Wang (wxh_225@163.com)
This work was supported in part by the National Natural Science Foundation of China under Grant 61902221, in part by the Project of
Shandong qProvince Higher Educational Science and Technology Program under Grant J18KA364, in part by the Doctoral Fund of
Shandong Jianzhu University under Grant X19045Z, and in part by the Shandong Provincial Natural Science Foundation under Grant
ZR2018MF012.
ABSTRACT Based on semantically annotated Web APIs, automatic Web API composition can be implemented
easily. The operation can greatly improve efciency of building a software system. However, in real
world, semantic annotation for Web APIs will encounter various difculties, because of their distribution
and function diversity, such as disunited API description formats, response result with complex structure,
shortage of business domain ontologies, semantic conicts among distributed knowledge, and so on. To solve
these difculties, we propose a JSON-LD basedWeb API semantic annotation approach (JWASA). JWASA
can assist professional developers to semi-automatically complete semantic annotation ofWeb APIs. A common
Web API description ontology is rstly dened, including necessary vocabularies about invocation
information, functional semantics, and non-functional features. Then, JWASA automatically converts aWeb
API description into a document in an united JSON format, and assist developers to semi-automatically
embed semantic information of crucial elements of the API by means of a lightweight Linked Data format
JSON-LD. Meanwhile, a semantic annotation specication is proposed to deal with various complex
situations inWeb API description, e.g: too many response parameters, no request parameters, etc. In addition,
to improve efciency of annotation, JWASA provides some extra operations, including automatic new
ontology or vocabulary creation, automatic functional semantics extraction etc. Also, JWASA provides semiautomatically
bridge rule generation algorithm, which can infer implied relationships among vocabularies
(e.g: sub-class, super-class, equality). JWASA focuses on the semantic annotation of functionality of Web
APIs, and can create effective semantic Web APIs for future API automatic composition. We implement a
prototype system and carry out a series of experiments to evaluate JWASA on real Web APIs crawled from
Internet. Experiments show that our approach is effective and efcient.
INDEX TERMS Web API, semantic annotation, JSON-LD, ontology creation, distributed knowledge.
I. INTRODUCTION
Under micro service architecture [1], a software system can
be quickly constructed by integrating various existing Web
APIs from different providers. Some of them are from open
Web API platforms on Internet, such as programmableweb,1
juhe,2 jisuapi.3 Others are developed by internal developers.
Providers generally give descriptions about how to invoke
The associate editor coordinating the review of this manuscript and
approving it for publication was Francesco Tedesco .
1https://www.programmableweb.com 2020-08-27
2https://www.juhe.cn/ 2020-08-27
3https://www.jisuapi.com/ 2020-08-27
Web APIs according to their own custom formats, because
there is no widely accepted description language for Web
APIs. With the increase of Web APIs, it is tedious and timeconsuming
for software system developers to manually nd
and integrate suitable APIs.
To lighten burden of developers, researchers provided
some semantic annotation approaches for Web APIs [2], [3].
Based on semantically annotated Web APIs, developers
can rapidly nd suitable APIs and automatically integrate
them with the help of service composition technologies [4].
In some approaches, specic semantic annotation languages
are utilized to annotate semantics of crucial elements in
HTML-based Web API description documents, such as
VOLUME 8, 2020 This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/ 197203
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
SA-REST, Microdata, RDFa [5][7]. In other approaches,
Web APIs are described by existing API specications with a
concise format, e.g: JSON, and custom semantic annotation
formats are proposed to embed semantic information in original
description documents [8][10]. However, in practice,
existing approaches would encounter ve realistic problems.
Firstly, multiple types of request parameters make it dif-
cult to decide which parameters need to be annotated. From
the perspective of necessity, the parameters may be required,
optional, or having default value. Specially, some APIs have
no request parameters, and they only provide all information
about specic data. Semantically, some are business parameters,
for instance, City and Date in Query History Weather
API; others are result format parameters, e.g: Page No., Total
pages, etc. Secondly, response parameter descriptions from
providers are incomplete, and some details still need to be
parsed out of response result example in a text-based description
document. Generally, the response results are in JSON
format, and data types of parsed parameters are multiple,
such as array, value, object, etc. Also, a response parameter
may be parsed out of a leaf node in a deep level of the
response results. All these factors determine that the parsing
operation is complex. Thirdly, a common Web API semantic
ontology, that mainly describes its invocation, function,
QoS, faults etc., is required to implement automatic invocation,
discovery and composition. Although, existing semantic
annotation approaches provide some ontologies for Web
APIs, they usually aren't incomplete. Some of them mainly
describe request/response parameters [5], [6], and are short of
description about other details, such as precondition, effects
etc. Others are used to annotate traditional WSDL-based web
services and aren't forWeb APIs [11]. Fourthly, there are few
available ontologies for specic domains. Lastly, semantic
conicts among distributed knowledge from multiple used
ontologies can decrease recall ratio of discovery [12], such
as different name synonymous.
To solve the problems above, we propose a JSON-LD [13]
based Web API semantic annotation approach (JWASA).
It converts a Web API description document in informal
natural language into a document in an united JSON format,
and can assist developers in semantically annotating
elements in the JSON document according to JSON-LD format.
JSON-LD is a lightweight Linked Data format, and is
widely accepted by developers for semantically annotating
JSON data. Semantic information for JSON data can be
easily embedded in corresponding JSON document, and can
be parsed out of the document by means of ready-made
JSON-LD APIs. Therefore, JSON-LD is very suitable as a
semantic annotation format of Web API documents in JSON
format.
Furthermore, JWASA proposes a semantic annotation
specication to deal with various real complex situations
for Web API descriptions. During annotation, JWASA can
automatically extract functional semantic information from
semantically annotated JSON-LD documents, and automatically
generate or modify relevant ontologies according to
new vocabularies used by developers. Also, JWASA provides
semi-automatic bridge rule generation algorithm to ef-
ciently solve semantic conicts among distributed knowledge
from different ontologies.
The main contributions of this article are in the following
folds:
1) A common Web API description ontology is created
to provide various semantic vocabularies about Web
APIs, and a novel lightweight JSON-based Web API
description format is designed.
2) A semi-automatic JSON-LD based Web API semantic
annotation approach is proposed, where a semantic
annotation specication is designed and some ef-
cient assist operations are provided including automatic
ontology generation, bridge rule generation and functional
semantics extraction.
3) A prototype system is implemented, and, on real Web
APIs from Internet, a series of experiments are carried
out to evaluate effectiveness and efciency of our
approach.
The remainder of this article is organized as follows.
Section II introduces related works. Section III describes an
overview of our semantic annotation approach. Section IV
presents formal denitions of Web API and Common Web
API Ontology. Section V presents implementation details
of the approach. Section VI reports the empirical results.
Section VII concludes the paper.
II. RELATED WORKS
In recent years, researchers proposed some semantic annotation
approaches for Web APIs (or Web services). According
to difference of Web API description formats, these
approaches mainly are divided into three categories: WSDLbased,
HTML-based, and API specication based.
A. WSDL-BASED APPROACH
Currently, available Web APIs most are restful style which
is resource-oriented [14]. Traditional web service description
language (WSDL) provides support for restful APIs
in its version 2.0 [15]. Specic semantic annotation languages
were used to annotate WSDL-based Web APIs, e.g,
SA-WSDL [16], OWL-S [11], etc.
SA-WSDL implemented semantic annotation through
adding extra XML attributes to current WSDL document
and associated XML schema document. Literature [17]
designed a semantic annotation tool for Web services based
on WSDL2.0 and SA-WSDL. The tool could assist users to
search semantic vocabularies and embed semantic information
in current documents.
Different from SA-WSDL, OWL-S described semantics of
everyWeb service through an independent XML document in
OWL-S format. The document not only described functional
semantics of a web service from four aspects: input, output,
precondition, and effect (called IOPE), but also described
other feathers, for instance, QoS (reliable, response time etc.)
197204 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
and the category of a given service. These information were
enough for automatic service composition.
In these WSDL-based approaches, Web API description
documents and semantically annotated documents all are in
XML format, and their syntax is more complex for providers
and annotators than other popular formats, e.g: HTML and
JSON. Therefore, in practice, WSDL format rarely is used to
describe Web API by providers.
B. HTML-BASED APPROACH
Generally, providers offer human-readableWeb API descriptions
according to custom formats on their ofcial websites.
Therefore, descriptions for Web APIs are embedded in
HTML documents.
Based on HTML documents, some lightweight semantic
annotation languages were adopted to directly annotate
crucial elements of Web APIs in these documents
(e.g: access url, request method, request/response parameter
etc.), such as Microdata, hREST, SA-REST, MicroWSMO
and so on [6], [18], [19].
Literature [20] provided a meta model of restful API
description, and implemented semantic annotation by means
of Microdata. The model dened some vocabularies describing
web services, includingWebService, WSResource, WSAc-
tion, WSParam etc. Microdata is used to add additional
semantics of existing data in a HTML document on the
basis of the model. Literature [2] proposed a semantic
annotation tool SWEET, which used MicroWSMO and
hRESTs to implement annotation ofWeb APIs. The hRESTs
was adopted to identifying service properties (e.g, service,
method, input, output) by insert hREST tags in given
HTML document; the MicroWSMO was used to annotate
service properties with semantic information by means of
existing domain ontologies. Identifying service properties
from a HTML document is tedious, because they are put
together with other irrelevant HTML elements. Hence, literature
[3] gave an automated semantic annotation approach,
which could automatically identify service properties in a
HTML document, and then annotate them with hRESTs or
SA-REST.
However, these approaches are limited when HTML documents
for describing Web APIs are complex. For example,
multiple Web APIs are described in a HTML page; Web API
description contents aren't embedded directly into a HTML
page, while they are obtained by asynchronous requests.
In these situations, extra operation is expected to extract a
valid HTML document for every Web API. Furthermore,
most of them focused on annotation for request/response
parameters, and ignored other functional semantics, especially
precondition, effect and fault semantics of Web APIs.
C. API SPECIFICATION BASED APPROACH
In practice, various custom Web API description formats
from different providers make it difcult for API automatic
invocation and semantic annotation. Therefore, some concise
and easy-to-use metadata formats to describe Web API are
proposed, such as OpenAPI Specication (OAS),4 RESTful
API Modeling Language (RAML),5 API Blueprint,6
and so on.
In recent years, on description documents of Web APIs
conforming to OAS, some semantic annotation approaches
have been proposed. OAS denes a standard, programming
language-agnostic interface description for REST APIs.
An OAS description is a YAML or JSON document that
consists in various elements for describing Web APIs and a
list of tags used by the specication with additional metadata.
Literature [10] extended OAS description to add semantic
annotation. New elements (classAnnotation and prop-
ertyAnnotation) were added in the description documents of
Web APIs, and a specic process was designed to identify
these annotation elements. Literature [8] and [9] utilized tag
elements in OAS to add custom semantic information, and
annotated description documents still conformed to OAS.
These approaches semantically annotated Web APIs in custom
formats, thus, extra parsing processes are necessary to
turn semantic API description to semantic resource graph in
RDF.
Considering that an OAS description document can be represented
in JSON format, Literature [21] embedded semantic
information in OAS description documents for Web APIs by
mean of JSON-LD format [13]. JSON-LD is a lightweight
Linked data format, and provides a series of special elements
to semantically annotate a JSON document. Compared with
previous custom semantic annotation formats, JSON-LD format
is more mature because ready-made APIs can be used to
parse semantics out of JSON documents.
These approaches only presented semantic annotation formats,
but didn't illustrate concrete annotation specication.
For instance, which parameters can be annotated when a lot
of parameters are answered; how to annotate when aWeb API
can have multiple request alternatives.
D. OUR APPROACH
All the previous approaches default that the used domain
ontologies always are available. However, in practice, two
main problems may occur for domain ontologies. The rst
is that no suitable domain ontologies are available for some
Web APIs, and the second is that some semantic conicts
among distributed knowledge in domain ontologies may
occur. No solution about the two problems is mentioned in
these approaches.
Our approach proposes a whole solution for Web API
semantic annotation. It learns from the advantages and overcomes
the shortcomings of the previous approaches. The
approach newly describes a Web API with a custom united
JSON format according to its original description document,
and uses JSON-LD to embed semantic information in the
JSON document of the Web API. The semantic information
4http://spec.openapis.org/oas/v3.0.3 2020-10-02
5https://raml.org/ 2020-10-02
6https://apiblueprint.org/ 2020-10-02
VOLUME 8, 2020 197205
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
TABLE 1. Comparison among existing approaches and our approach.
includes IOPE (just like in OWL-S), and other feathers
(e.g: QoS and faults). Also, a semantic annotation speci-
cation is designed to effectively handle various complex
annotation situations.
To solve shortage of domain ontologies and efciently
eliminate semantic conicts, our approach supports the automatic
creation of new ontologies and vocabularies during
semantic annotation, and semi-automatic bridge rule inference
among multiple domain ontologies. It uses six types of
bridge rules dened in our previous work [22] to assist inference
among domain ontologies. These types of bridge rules
respectively are intoc, ontoc, equalc, intor, ontor, equalr.
The rst three types are used to dene sub-class, superclass,
or equality relationship among two concepts from
different ontologies. And the last three types are for subproperty,
super-property, or equality relationship among two
properties (or predicates) from different ontologies. Generated
ontologies and bridge rules are crucial elements for
future composition of Web APIs. Table 1 compares existing
main approaches and our approach from various perspectives.
Furthermore, our approach can semantically annotate various
faults inWeb API descriptions by means of three dened
exceptions in our previous work [23]: UnPre (precondition
unsatised), UnExe (execution failure), and UnEff (unexpected
execution effects). For example, no weather is return
is a fault description for Web API Weather Query, and then
the fault can be annotated as UnEff.
III. OVERVIEW OF JWASA
In this section, an illustrative example is described to show
semantic annotation process in JWASA, and then an architecture
to implement JWASA is presented.
A. AN ILLUSTRATIVE EXAMPLE
In JWASA, the semantic annotation for a Web API follows
ve steps: collect description information of the API,
newly describe the API in an united format, annotate semantics,
update ontology, and generate bridge rules. The detail
description in each step is shown in the following.
1) COLLECT DESCRIPTION INFORMATION OF THE API
On an API open platform (https://www.jisuapi.com/), there
are about 130 types of APIs, and the number of APIs is
TABLE 2. Description information of Weather Query API.
about 300. All APIs have their own description documents.
The description information of Weather Query API on the
platform is shown in Table 2.
Specially, there are two types of request/response parameters
in the API: format parameter and business parameter. Format
parameters are used to specify invocation authorization
and returned result format. For example, parameter appkey
in the request example is a format parameter, and its value
can be applied by users. The parameter is required for every
invocation of the API. Furthermore, status, msg, result also
are format parameters, and respectively represent execution
status code, status text description, and response business
data. The three parameters are all returned after every invocation
of the API. Business parameters can really reect
business function of the API, for instance, city, cityid in
request, weather, winddirect, aqi in response. The meaning of
every business parameter can be found from request/response
parameter list in the description document. However, the relationships
among parameters at structure level only are shown
in the response example (Fig. 1). For example, pm2_5 is a
property of aqi.
197206 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
FIGURE 1. A response example of Weather Query API.
2) NEWLY DESCRIBE THE API IN AN UNITED FORMAT
In JWASA, through parsing the JSON data in response example,
the names of all parameters are described newly. New
names can reect structure information of relevant parameters,
such as result-weather, result-winddirect, result-aqi,
result-aqi-pm2_5, etc. In addition, complex data types are
introduced to further illustrate the structure of relevant parameter,
including Object, Array of value, and Array of object.
For example, in Fig. 1, the data types of result-aqi and result-
daily respectively are Object and Array of object.
It is noticed that description contents of Web APIs on
other platforms are similar to that information in Table 2,
except some individual details. For example, on Juhe platform,
parameter appkey is named key, and parameter status,
msg are respectively named error_code, and reason. Also,
description details of request and response parameter lists are
a little different.
To automatically invoke a Web API, it is necessary to
provide an united description document format. In JWASA,
a Web API is described in an united JSON format, where
various well-dened common attributes are set. Fig. 2 shows
the description document with the JSON format of Weather
Query API. Here, apiID represents the unique identity given
by current user; reqexam, respexam, qoS respectively represent
request example list, response example list, and other
features in Table 2. Meanings of other attributes are as
their names suggest. Every parameter is expressed a JSON
object mainly including three aspects: name (paramname),
data type (datatype), and meaning (pararemark). In addition,
every response parameter has a value example attribute
(valexmp), which value is obtained from response example.
The attribute can assist annotators to comprehend semantics
of current parameter. Meanwhile, every invocation exception
also is expressed a JSON object, and is described from three
aspects: errortype, errorcode, and errorcontent. Specially,
given description information in Table 2, the JSON document
can be automatically generated by JWASA.
3) ANNOTATE SEMANTICS
The semantics of Weather Query API are directly annotated
in its extended JSON document, shown in Fig. 3.
Some JSON-LD attributes (@context,@id,@type) and other
attributes related to semantics (e.g: inputs, outputs, effects,
preconditions) are added in the document.
Here, The @context is used to introduce well-dened
semantics mapping les (jsonld as sufx) and declare various
name space prexes. The @id is used to specify the URI
of current API or request/response parameter. The @type
is used to annotate semantics of current API or parameter.
Specially, in JWASA,@type of all format parameters need to
be specied, because the information is key for automatically
invoking the API and parsing its response result. Only @id
and@type of those crucial parameters, that may interact with
other APIs, are specied.
Attribute domains and function respectively species the
business domains and function description details of current
API, and they can facilitate API classication. Attribute
inputs, outputs, preconditions and effects provide IOPE features
in functional semantics of current API. Based on these
information, automatic composition of Web APIs can be
implemented easily.
Furthermore, the exception with api type means the fault
at business level, and it is necessary for automatic fault
recognition to distinguish different exceptions by annotation.
In JWASA, every exception with api type has attribute@type,
and the value may be UnPre, UnEff, or UnExe [23] according
to its errorcontent value.
In this step, an annotator needs to manually specify semantics
about crucial request/response parameters, every business
fault in exceptions, and to set preconditions and effects. The
inputs and outputs will be automatically extracted by JWASA
according to annotated information.
All in all, JWASA proposes a series of annotation speci-
cations forWeb APIs to make their semantics more complete
and effective.
4) UPDATE ONTOLOGY
JWASA not only supports sharing concepts in existing
ontologies, but also can dynamically create new ontologies
and vocabularies during annotation. For example, the ontology
for weather doesn't exist when an annotator annotates
Weather Query API. He can declare a prex ns for
a new name space (http://sdjzu.edu.cn/cs/onto/weather), and
then use a series of new vocabularies to annotate the API.
VOLUME 8, 2020 197207
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
FIGURE 2. Description document of Weather Query API in JSON format.
FIGURE 3. Well annotated Weather Query API in JSON-LD format.
When the well-annotated JSON-LD le is saved, an new
ontology for weather will automatically be generated and its
name space is http://sdjzu.edu.cn/cs/onto/weather. OtherWeb
APIs related to weather can use the ontology or add new
vocabularies into this ontology during annotation.
5) GENERATE BRIDGE RULES
Due to diversity of business domains, multiple domain
ontologies may be used in well-annotatedWeb APIs, such as
weather ontology, vehicle ontology, book ontology, etc. Some
semantic conicts may occur for these ontologies. For example,
City, CityName in ontology o1 respectively represent a
city object, and a city's name; City in ontology o2 represents
a city's name. Here, City in o1 and City in o2 use the same
vocabulary, but they have different meaning; CityName in o1
and City in o2 are different vocabularies, but they have the
same meaning. In JWASA, we employ bridge rules to solve
these semantic conicts. These rules specify parent-child
197208 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
and equality relationships among different vocabularies.
For instance, rule ho1; CityName; equalc; o2; Cityi represents
CityName in o1 and City in o2 are the equivalent
classes. It is a tedious work for developers to manually create
all bridge rules. To lighten their workload, our approach
can semi-automatically generate all bridge rules among all
ontologies.
After annotation, three types of semantic annotation results
are generated: well-annotated JSON-LD les for Web APIs,
all ontology les used during annotation, and all bridge rules.
They are the crucial information for subsequent automatic
service composition operations.
B. ARCHITECTURE OF JWASA
To efciently complete various semantic annotation tasks
above, a semantic annotation tool supporting JWASA is
designed, and its architecture is shown in Fig. 4. The tool
includes four main function modules: Original Information
Collection, United Format Conversion, Semantic Annotation
Core, and Ontology Management.
FIGURE 4. Architecture of a semantic annotation tool for JWASA.
1) ORIGINAL INFORMATION COLLECTION MODULE
This is used to collect available Web APIs from various API
open platforms on Internet or self-developed Web APIs. For
different API sources, the module provides different crawler
agents. Also, developers can develop own crawler agents for
special API sources. The caught originalWeb API description
information will be stored in Original API DB.
2) UNITED FORMAT CONVERSION MODULE
This can read original information of APIs from Origi-
nal API DB, and parse that information, especially parse
response parameters out of corresponding response result
data. Then, for every Web API, it assembles parsed information
into an united JSON format, and stores that information
in a JSON le. The le is called API-JSON le in the
following.
3) SEMANTIC ANNOTATION CORE MODULE
This rstly uses Prepare JSON-LD template function to
automatically insert JSON-LD elements and extra attributes
about functional semantics into all API-JSON les, and
then adopts JSON-LD annotation management function to
assist developers specify semantics for crucial elements and
to store annotation results in API-JSON les. In the following,
a well-annotated API-JSON le is called API-JSONLD
le. Meanwhile, JSON-LD annotation management also
provides ontology search operations to help developers
rapidly nd suitable vocabularies from available ontology
les. In addition, when new name spaces or new vocabularies
are introduced during annotation, the function would invoke
Automatic ontology update function in Ontology Manage-
ment module to add or update ontology les.
4) ONTOLOGY MANAGEMENT MODULE
This includes two main functions based on Jena ontology tool
kit.7 Jena can support ontology CRUD and reasoning operations.
Automatic ontology update function can automatically
extract all semantic information from API-JSONLD
les and add/update relevant ontology les. Bridge rule
generation function can semi-automatically generate bridge
rules among vocabularies from multiple ontology les, and
store all bridge rules in Bridge rule DB.
Implementation details of main functions in JWASA will
be shown in section IV and section V.
IV. WEB API AND COMMON WEB API ONTOLOGY
In this section, we will present formal denitions ofWeb API,
semanticWeb API and commonWeb API ontology. They are
the basis of implementing JWASA.
A. WEB API AND SEMANTIC WEB API
In this article, a Web API means a web service that can
receive HTTP protocol based requests and respond by HTTP
protocol based answers. Its provider can provide complete
description information about features of the API, including
general features (e.g: provider, business category, quality of
service), invocation crucial features, and invocation illustration
features. Although Web APIs from different providers
may have description documents with different formats, common
features of Web APIs can be abstracted from their
description documents. Here, based on abstracted common
features, a Web API is formally dened.
Denition 1: Web API: A Web API is a tuple hapiname;
Genf ; InvCru; InvIlli, where,
 apiname is the unique identier of a Web API, and can
be used to differentiate from other Web APIs from the
same provider;
7https://jena.apache.org/ 2020-10-02
VOLUME 8, 2020 197209
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
 Genf is a set of elements describing general features of
the API, including provider, apitype (business category),
remark (functional description text), and QoS (quality of
service).
 InvCru is a set of elements describing crucial features
about invocation details, including url (access URL),
returnformat (return format), requestmethod (request
method), requestparas (request parameters), responsep-
aras (response parameters), and exceptions;
 InvIll is a set of elements illustrating how to invoke the
API, including reqexam (request example) and respexam
(response example).
In this denition, provider in Genf is a triple hpname; purl;
premarki, where components respectively represent
provider's unique name, URL, and description text; apitype in
Genf is also a triple htypename; aturl; atremarki, where components
respectively represent name, URL, and description
text of API business category; QoS in Genf is a mutable tuple
hq1; q2; : : : ; qni, where qi(1 6 i 6 n) is an QoS index, e.g:
price, use number, etc. These indexes are provided by current
Web API's provider, and different providers may provide
different indexes.
Furthermore, requestparas and responseparas in InvCru
both are sets including multiple parameters, and each parameter
is modelled as a tuple hparamname; datatype; isrequired;
pararemarki, where components respectively represent
parameter's unique identier in current API, data type
(e.g: string, integer, etc.), required or not, and meaning;
exceptions in InvCru represents a set including various exceptions
that may occur during invocation, and each exception
is modelled as a triple herrortype; errorcode; errorcontenti,
where components respectively represent error type, error
code returned, error message returned. Here, the value of
error type has two kinds: api (application) and sys (system).
The api means exceptions about business, e.g: some request
parameter is invalid or no result is returned; the sys means
exceptions about invocation permission of the API, e.g: application
key is overdue or invalid.
In the following, given a Web API wa, we use wa.XXX to
represent the value of its feature element XXX. For instance,
wa.requestparas responses request parameter set of wa.
A semanticWeb API is an extension of correspondingWeb
API through adding extra semantic features. These semantics
features make the API easily be discovered, interactive and
automatically invoked.
Denition 2 Semantic Web API: A semantic Web API is
a semantically well-annotated Web API, and is expressed
as a tuple hwebapi, semVs; funcSem, exSemV , exSemi,
where,
 webapi is a Web API conforming to Denition 1, and
provides original information from its provider;
 semVs is a set of vocabularies from business domains
related to the API;
 funcSem describes functional semantics, and is
expresses as a tuple hinputs; outputs; preconditions;
effectsi. Here, assume that inparams and outparams
respectively are sets of crucial parameters in webapi.
requestparas and webapi.responseparas, then,
 inputs represents input parameters with semantics,
and is a mapping: inparams ! semVs;
 outputs represents output parameters with semantics,
and is a mapping: outparams ! semVs;
 preconditions represents preconditions before
invoking the API, and is a set of literals that describe
relationships among parameters in inparams by
means of vocabularies in semVs;
 effects represents execution effects after invoking
the API, and is a set of literals that describe relationships
among parameters in inparams and out-
params by means of vocabularies in semVs.
 exSemVs is a set of vocabularies related to exception
semantics;
 exSem represent exceptions semantics, and is a mapping:
webapi:exceptions ! exSemV .
Specially, given a semantic Web API, its component
funcSem describes IOPEs features just like in OWL-S.
Meanwhile, extra exception semantics are introduced to facilitate
self-adaptation running of the API.
B. COMMON WEB API ONTOLOGY
Common features of Web APIs from different providers are
dened in Denition 1. However, in practice, these features
may have different names and presentation formats because
of different providers. This hampers automatic discovery and
interoperability among different Web APIs. To solve this
problem, we design a common Web API ontology: WebAPI-
Onto. It not only provides requisite vocabularies to describe
common features of Web APIs in Denition 1, but also
provides extra semantic vocabularies to describe function and
exception semantics in Denition 2. The formal denition of
WebAPIOnto is shown in Denition 2.
Denition 3 WebAPIOnto: WebAPIOnto is an owl ontology
specially forWeb API domain, and is expressed as a tuple
hWebAPI; Genc; Grdc; FuncSem; Ri, where,
 WebAPI is an owl class that represents a Web API
description document;
 Genc is a set of owl classes that represent concepts
related to general information of a Web API, and
describes what the API is;
 Grdc is a set of owl classes that represent concepts
related to invocation detail of a Web API, and describes
how to invoke the API;
 FuncSem is a set of owl classes that represent concepts
related to functional semantics of a Web API, and
describes what the API does;
 R is a set of owl object properties with one domain and
one range, where every domain or range is an owl class
in set fWebAPIg [ Genc [ Grdc [ FuncSem, and each
object property describes a relationship between concept
for its domain and concept for its range.
In this ontology, the most core concept is WebAPI, and
other concepts are used to illustrate various properties
197210 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
FIGURE 5. Concepts in component Genc of WebAPIOnto.
FIGURE 6. Concepts in component Grdc of WebAPIOnto.
FIGURE 7. Concepts in component FuncSem of WebAPIOnto.
of WebAPI. Component Genc, Grdc, and FuncSem respectively
provide concepts related to three types of features of a
Web API. These concepts are respectively shown in Fig. 5,
Fig. 6, and Fig. 7. Here, an arrow in these gures represents
the concept at its tail is super-class of other concept at its head.
Concepts in Genc mainly describe a Web API's features
in component Genf. Specially, common QoS indexes also
are included in Genc, such as CollectNum (the number of
collected by users),ClickNum (the number of clicked) and so
on. Concepts in Grdc describe a Web API's features in component
InvCru and InvIll. Concepts in FuncSem are mainly
describe necessary IOPE components, business domain, and
function category, and they are extra functional semantic
vocabularies.
Meanwhile, all object properties in component R have
unique names, which can directly illustrate relationship
meanings. Object properties in WebAPIOnto are shown
in Table 3, Table 4, and Table 5. Specially, meanings of
concepts and properties are suggested by their names.
WebAPIOnto is a common Web API ontology, and can
be used by any Web API provider to annotate their own
TABLE 3. Object properties about concepts in component Genc.
TABLE 4. Object properties about concepts in component Grdc.
TABLE 5. Object properties about concepts in component FuncSem.
description documents. In JWASA, it is used to semantically
annotate various Web APIs crawled from Internet.
Specially, ontology WebAPIOnto provides vocabularies
related to currently popular Web APIs as complete as possible.
From the RESTful view, maturity of these Web APIs
generally is at a lower maturity level [24]. Therefore, developers
can extended this ontology as the maturity ofWeb APIs
is raised in future.
V. IMPLEMENTATION OF JWASA
Given original information of Web APIs crawled from Internet,
JWASA can generate corresponding semanticWeb APIs.
During generation, a series of manual and automatic operations
need to be completed according to the architecture of
JWASA (Fig. 4). To ensure the accuracy of semantics, developers
need to manually identify functional semantics and
VOLUME 8, 2020 197211
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
exception semantics of these APIs. Except this, other operations
can be completed automatically by means of designed
algorithms. Therefore, JWASA is a semi-automatic semantic
annotation approach. In this section, implementation details
of JWASA will be presented.
A. AN UNITED JSON FORMAT FOR WEB API
In JWASA, Web APIs crawled from Internet are reorganized
into documents in an united JSON format. The format is
called API-JSON, and document in API-JSON format is
described in Denition 3.
Denition 4 API-JSON Document: Given a Web API, its
API-JSON document is in JSON format, where all features
of the API are modelled as attributes, and each attribute is
expressed a key-value pair. Here, except for features in all
components of the API, it adds an extra attribute apiID as the
unique identier of current API.
Specially, in an API-JSON document, those features modelled
as tuples are converted into attributes with JSON object
values, and each component in a tuple is converted into one
attribute of corresponding JSON object.
In practice, for a Web API, except apiID and responsepa-
ras, other features can be crawled from its ofcial description
document. An concrete example for an complete API-JSON
document is shown in Fig. 2 (section III).
B. PARSE RESPONSE PARAMETER
A provider generally provides two parameter description
lists: request parameter list and response parameter list. And
parameters in the lists are described from four aspects: parameter
name, data type, meaning, required. A real example for
those parameter descriptions is shown in Table 6.
TABLE 6. An example for real parameter descriptions fragment.
Generally, parameters in the two lists are described in a
atted format, that is, no structural relationships (e.g: objectproperty)
among different two parameters are presented.
In practice, request parameters of aWeb API usually are atted.
Thus, users can directly specify value for every parameters
in the request list to invoke a Web API. In API-JSON
document, the request list is assigned to attribute request-
paras. However, in most cases, there are some structural
relationships between two parameters in the response list.
For example, aqi is an object where multiple properties are
included, here, pm2_5 is one property of aqi. This kind of
information is important for automatic interaction among
multiple Web APIs.
FIGURE 8. Algorithm for parsing response parameter.
It is noticed that this information isn't shown in the
response list. Therefore, extra operation is needed to obtain
response parameters with structural relationship. Fortunately,
attribute respexam records a response result in JSON object
format, through analysing internal structure of the result,
response parameters with structural relationship can be
obtained. Specially, attribute responseparas in an API-JSON
document will record all response parameters with structural
relationships.
Here, we design an algorithm to automatic parse all
response parameters out of attribute respexam, and its procedure
is shown in Fig. 8. It deeply traverses an given
JSON object by means of a recursive call. Except for the
JSON object to be parsed( examobj), it also receives two
input parameters: current parsed parameters ( resparas), and
attribute name with value examobj (parentname). Finally,
it will return updated resparas with all parsed parameters out
of examobj.
197212 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
On the rst invocation of ParseRespara, examobj is the
value of attribute respexam in currentWeb API, resparas has
no element, and parentname is null. The algorithm rstly
judges value type of examobj, and gives different parsing
strategies for different types. When examobj is a value node
(e.g: string or integer value), data type and value example
attributes of the parameter called parentname will be
assigned (lines 03-09). When examobj is an object, data
type of the parameter called parentname rstly is assigned
object, then, for each attribute in this object, ParseRespara
is called again to continue to parse value of the attribute
(lines 10-21). Specially, during each loop, a new parameter
with structure relationship is created (lines 15-18). When
examobj is an array, its rst element is parsed, and data type
of the parameter called parentname is respectively assigned
array.value, array.object or array.array according value type
of this element (lines 22-39). When the value type is an
object, ParseRespara is called again to further parse the
element (line 32).
FIGURE 9. Some parsed response parameters for Weather Query API.
According to this algorithm, some parsed parameters for
the response example in Fig. 1 are shown in Fig. 9. Here,
paramname and datatype can reect current parameter's
structure in the response result. The information can help
users to directly obtain value of this parameter from corresponding
response result, and to facilitate interaction with
other Web APIs. In addition, after parsing, the attribute
pararemark of every parameter also is set according to its
meaning description in the response list. This process is easy,
and aren't shown here.
C. SEMANTIC ANNOTATION SPECIFICATION
Given an API-JSON document, JWASA can semantically
annotate the document and nally generate an extension version
of this document: API-JSONLD document. Compared
with the API-JSON document, the API-JSONLD document
adds 3 JSON-LD elements to annotate semantic information
(@context, @id, @type), and introduces 6 new attributes
related to semantic features (domains, function, inputs, out-
puts, preconditions, and effects).
Element @context is an array including some information
related to semantics, eg: dened mapping from attributes
to semantic concepts, used name spaces etc.; element @id
species the URI of current Web API or every parameter
in request/response; element @type species semantics of
current JSON document, parameters in requestparas and
responseparas, or exceptions in exceptions.
Attribute inputs, outputs, preconditions, and effects are
used to describe functional semantics of a semantic Web
API. Attribute domains and function are added to identify
concrete business category. Here, attribute domains includes
vocabularies about business domain of current API; attribute
function includes two elements: the rst species function
type of current API, and the second is a detailed text description
about function of current API. Denition 5 shows the
details about API-JSONLD document.
Denition 5 API-JSONLD Document: Given a semantic
Web API swa, WebAPIOnto, and a set of business domain
ontologies ontos, and ad is the API-JSON document of
swa.webapi. An API-JSONLD document for swa is an extension
of ad through adding other components of swa and
semantic information conforming to JSON-LD specication,
where,
 WebAPIOnto provides semantic vocabularies about
attributes related to features of swa and exception
semantic vocabularies in swa.exSemVs, and is introduced
by @context element;
 ontos provides functional semantic vocabularies in
swa.funcsemVs, and is introduced by@context element;
 Mappings in swa.funcSem and swa.exSem are specied
through introducing @type element in corresponding
parameters or exceptions.
 Each parameter in inputs and outputs of swa.funcSem is
uniquely identied through introducing @id element.
Specially, in an API-JSONLD document, both attribute
inputs and outputs are JSON objects where each attribute
represents a parameter. Each parameter is expressed as a
attribute-value pair pid:psem, where pid and psem respectively
represent parameter ID and its semantics.
During annotation, except for attribute inputs and outputs,
values of other attributes need to be manually assigned by
annotators. Values of the two attributes can be automatically
generated according to annotated request/response parameters.
An concrete example for an API-JSONLD document is
shown in Fig. 3.
In every API-JSONLD document, except for JSON-LD
elements, semantics of other attributes are declared by a
mapping from attributes to concepts in ontology WebA-
PIOnto. The mapping is saved to a JSON-LD le, and
is introduced into the document by attribute @context
(shown in Fig. 10(a)). Here, the rst element in @context
species the mapping le's location: D:/selfadapt/webapi/
jsonld/api.jsonld, and Fig. 10(b) shows a fragment in this
le. In Fig. 10(b), @vocab is used to declare default
name space of semantic vocabularies in current document,
and in the following annotation, no prexes are required
for vocabularies in the default name space. For example,
pname:ProviderName means semantics of attribute pname
VOLUME 8, 2020 197213
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
FIGURE 10. Some fragments in an API-JSONLD document.
is ProviderName from http://sdjzu.edu.cn/cs/onto/WebAPI#
(ontology WebAPIOnto).
The second element in @context is an object which
declares source paths of resources (``a:'' as default prex)
and ontologies to be used in current document. Semantic
annotators can modify these prex names and their source
paths or add new prex denitions to introduce new ontologies.
In Fig. 10(a), three source paths are declared, and
respectively specify path of resources in current document
(e.g: request/response parameters) and paths of two introduced
ontologies.
Values for attribute domain and function are easily speci
ed according to some text description from providers.
Specially, for a Web API, its function type in attribute
function may be information providing, world altering, or
dictionary service according to concrete function effect. For
example, Weather Query API is an information providing
API, because it only query some relevant data; Order Train
Ticket API is a world altering API, because the world status
will be changed after this API runs; Weather Query cities
API is a dictionary service API, because it can run without
any request parameters and return all cities related to weather
query. Based on response result of Weather Query cities API,
according to a given city name, a user can nd the city's ID,
code etc. This is just like a dictionary.
After attribute @context, domain, and function of a template
are specied, the core semantic annotation operation
can start. The core of semantic annotation is to specify semantics
of parameters in attribute requestparas and responsepa-
ras, and to declare literals in preconditions and effects. That
information can directly reect IOPE features of currentWeb
API, and is important for following automatic composition.
However, in realworld, this annotation task will encounter the
following ve main problems, because of diversity of Web
APIs.
(1) A lot of response parameters make annotation
tedious and time-consuming. For example, Weather Query
API has 3 format parameters (msg, result, status) and 71
business parameters. These 71 parameters describe weather
information of today including various air quality indexes,
hourly weather details, and daily weather details.
(2) Some Web APIs can receive different request
parameters and return similar response. For example,
Weather Query API can receive any one of city, cityid, city-
code, location, and all return the weather information.
(3) Multiple parameters describing a business object
aren't specially declared. This makes the expression of
P/E (precondition/effect) difcult. For example, a Web API
can obtain weather information according to two given GPS
coordinate parameters: lon, lat. They respectively represent
longitude and latitude of a location, but this relationship of the
two parameters isn't clearly declared in response parameters
of the API.
(4) Business parameters are crucial elements reecting
I/O features of aWeb API, but, they always are mixed with
format parameters in request and response. For instance,
return data format, request data number, application key are
format parameters in request; execution status code and execution
message both are format parameters in the response.
(5) Some Web APIs don't have request, and only have
response. For example, Cities for weather Query API can
return all cities used for weather query APIs, and users don't
need to input any request parameters.
Considering those problems above, in our semantic annotation,
we design a semantic annotation specication from
the perspective of developers, shown in the following. The
specication make IOPE and other features of a Web API
clearly and easily integrate with other Web APIs.
(1) General JSON-LD element@id and@type are used
to respectively specify unique identify and semantics of
a parameter. For format parameters (e.g. application key,
result, execution message, status code), only their @type
attributes are specied, because format parameters with the
same semantics are unique in a Web API. Some business
parameters, that may interoperate with other Web APIs, are
picked. And both @id and @type attributes are specied for
those picked parameters. An annotation fragment following
this specication is shown in Fig. 11, where parameters without
@id and @type aren't shown.
(2) For a Web API with multiple alternative request
parameters, users can create multiple API-JSONLD doc-
uments. In each document, only one alternative parameter is
picked, and other components are the same. For example, for
Weather Query API, its request parameters may be city, cityid,
citycode, or location. According to these request parameters,
a user can create four similar API-JSONLD documents for
this Web API.
197214 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
FIGURE 11. An annotation fragment for Flight Query API.
(3) To gather relevant parameters together, various vir-
tual parameters representing business objects are intro-
duced. Their data types are assigned to virtualobject. These
parameters can exist in request or response. For example,
in annotated Flight Query API (Fig 11), there are
three virtual parameters in request (requestparas): a:ight,
a:endcityobj, a:startcityobj, and two virtual parameters in
response (responseparas): a:arrivalportobj, a:departportobj.
Relationships between virtual and real parameters are presented
in preconditions or effects. Specially, each literal in
preconditions or effects is a string including three components
(split by ``-''). The middle component represents an
object property from an ontology, and the rst and last components
respectively represent domain and range values of
this property.
FIGURE 12. An annotation fragment for Flight Cities Query API.
(4) Function type of a Web API without request will
be assigned dctionary service (rst element of attribute
function). In the API, some parameters are picked as query
keys, and an example is shown in Fig. 12. Here, attribute key
of each picked parameter is assigned to 1, e.g: a:cityname
and a:cityobj. The two parameters will be considered as input
parameters of the API, and other parameters with@id will be
as output parameters. Specially, a virtual parameter a:cityobj
is introduced to gather all real parameters for city features
together.
(5) Business exceptions (value of attribute errortype is
api) in attribute exceptions also are annotated. This can
help users to automatically handle business exceptions during
invocation. An exception annotation fragment is shown
in Fig. 13. Here,@type is used to specify exception semantics
of each exception.
FIGURE 13. An exception annotation fragment of Flight Cities Query API.
D. FUNCTIONAL SEMANTICS EXTRACTION
According to previous annotation specications, except
attribute inputs and outputs, other attributes in an
API-JSONLD document can be specied by current user.
Thus, P/E components in IOPE features of a Web API can
be directly obtained from attribute preconditions and effects.
Meanwhile, I/O components can be automatically extracted
from annotated request/response parameters. The generation
process is shown in Fig. 14.
FIGURE 14. Algorithm for extracting I/O parameters.
FIGURE 15. An example for extracted input and output parameters.
Firstly, the algorithm extracts request/response parameters
from a given API-JSONLD document (line 01). Only
those parameters with attribute @id and @type are picked.
Secondly, if current API is dictionary service, and then those
response parameters with attribute key will be considered
as request parameters (lines 02-05). Thirdly, it respectively
creates input and output parameters according to extracted
request/response parameters (lines 06-15). An example for
extracted input and output parameters is shown in Fig. 15.
VOLUME 8, 2020 197215
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
It is noticed that it is easily to convert IOPE data of an annotated
API-JSONLD document into specic formats required
by existing discovery and composition tools.
E. AUTOMATIC ONTOLOGY GENERATION
In practices, Web APIs are from various business domains.
Generally, few of suitable existing ontologies can be
used to provide semantics for all Web APIs. Therefore,
when no vocabularies from existing ontologies are suitable,
new vocabularies may be used during annotating a
Web API. To raise reuse rate of ontologies, it is necessary
to generate new ontologies or modify existing ontologies.
Here, an automatic ontology generation algorithm is
designed, and is shown in Fig. 16. It will extract semantic
vocabularies from an API-JSONLD document, and then
create new ontologies or add new vocabularies into existing
ontologies.
FIGURE 16. Algorithm for automatically generating ontology during
annotation.
The algorithm rstly parses ontologies, annotated parameters
in request/response, and literals in preconditions/effects
out of an API-JSONLD document (line 01). Then, it loads
all introduced ontologies in this document (line 02). Thirdly,
it parses semantic concepts out of parameters, and creates
new ontologies or adds new classes into existing ontologies
according to whether ontologies and semantic concepts for
parameters are new or not (lines 03-15). Lastly, it parses
object properties out of literals, and carries out the similar
process with the semantic concepts (lines 16-30).
The algorithm will be invoked when an API-JSONLD
document is saved. Thus, during annotation of followingWeb
APIs, these newly generated ontologies can be reused.
F. SEMI-AUTOMATIC BRIDGE RULE GENERATION
During annotation, a user can pick vocabularies from existing
ontologies, and also can create new vocabularies. Thus,
three main semantic conicts among two vocabularies from
different ontologies may occur. The rst is that the two
vocabularies from different ontologies have the same name
and meaning. However, they can't be considered as the same
vocabulary, because their name spaces are different. The second
is that the two vocabularies have the same name, but
different meanings. This means any two vocabularies with
the same name shouldn't be directly considered as the same
meaning. The third is that the two vocabularies have different
names, but the similar meaning. Judgement of the second and
third conicts needs users' assistance, that is, users need manually
to specify which two vocabularies the conict occurs
between. Also, for the third conict, further relationship
between the two vocabularies should be specied, such as
sub-class, super-class, or equality. In the following, the three
semantic conicts respectively are called semconict1, sem-
conict2, and semconict3.
To solve the conicts above, we use bridge rule technology
in our previous work [22] to declare real relationship
between two vocabularies. A bridge rule can dene relationship
between two vocabularies, and different rule types mean
different relationship meanings. For instance, rule hns1:Train,
intoc, ns2:Vehiclei means concept Train in ontology ns1 is a
sub-class of Vehicle in ontology ns2. Other rule types have
been introduced in section 2. Here, an automatic bridge rule
generation algorithm is designed to improve efciency of
bridge rule creation, and is shown in Fig. 2. Based on given
vocabulary information with semconict2 and semconict3
(parameter vacabwith2 and manualbrs), the algorithm can
automatically infer various new bridge rules implied by given
ontologies (parameter ontos) with the help of Jena ontology
tool kit.
The algorithm rstly loads all ontologies into an ontology
model, and extracts all concepts and properties from the
model (lines 01-03). Then, it automatically generates basic
bridge rules according to relationship declarations in existing
ontologies and situation in semconict1 (lines 04-19). Lastly,
based on the basic bridge rules and manual rules given by
users, all implied rules are obtained (line 20). Specially,
in this algorithm, three new operations are invoked: isEqualc
(line 06), isEqualr (line 14), generateImpBR (line 20).
Operation isEqualc/isEqualr is used to determine whether
two concepts/properties are equal or not. In isEqualc, two
197216 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
FIGURE 17. Algorithm for generating bridge rules among multiple
ontologies.
concepts are equal when one of two conditions in the following
is satised:
 They have the same local name and data type. Here, local
name means a name without name space.
 The equivalent relationship between them is declared
explicitly in ontologies.
In isEqualr, two properties are equal when three conditions
in the following all are satised:
 They have the same local name, or the equivalent relationship
between them is declared explicitly in ontologies.
 Their domains d1, d2 make isEqualc(d1, d2) true or rule
hd1, equalc, d2i exists.
 Their ranges r1, r2 make isEqualc(r1, r2) true or rule
hr1, equalc, r2i exists.
Operation generateImpBR is used to infer implied rules
according to the previous basic bridge rules and manual
bridge rules. The following steps show its inference process:
(1) Generate new bridge rules according to symmetry.
If hc1, rt, c2i exists, then hc2, inverseop(rt), c1i is created.
Here, rt means one of six rule types (intoc, ontoc, equalc,
intor, ontor, equalr), and operation inverseop is used to convert
rt into its inverse type. Specially the inverse type of
intoc/r is ontoc/r, and the inverse type of equalc/r is itself.
(2) Generate new bridge rules according to transitivity.
If hc1, rt, c2i and hc1', rt, c1i exist, then hc1', rt, c2i and
hc2, inverseop(rt), c1'i are created. And, if hc1, rt, c2i and
hc2, rt, c2'i exist, then hc1, rt, c2'i and hc2',inverseop(rt),c1i
exist.
(3 )Infer new bridge rules among rules with different
rule types. Here, the following four inference situations are
considered, where rt only represents intoc/r or ontoc/r:
 If hc1, rt, c2i and hc2, equalc/r, c2'i exist, then hc1, rt,
c2'i and hc2', inverseop(rt), c1i are created.
 If hc1, rt, c2i and hc1,equalc/r,c1'i exist, then hc1', rt,
c2i and hc2, inverseop(rt), c1'i are created.
 If hc1, equalc/r, c2i and hc1, rt, c1'i exist, then hc2, rt,
c1'i and hc1', inverseop(rt), c2i are created.
 If hc1, equalc/r, c2i and hc2, rt, c2'i exist, then hc1, rt,
c2'i and hc2', inverseop(rt),c1i are created.
It is noticed that generated bridge rules by this algorithm
declare various relationships between different two vocabularies
in given ontologies. These rules can effectively eliminate
semantic conicts among distributed knowledge.
VI. EXPERIMENT EVALUATION
In this section, a series of experiments are designed to evaluate
effectiveness and efciency of our semantic annotation
approach.
A. TEST CASE ILLUSTRATION
We crawl 183Web API descriptions from two open API platforms
(Jisu & Juhe), and 23 business domains are involved.
Main business domains and API numbers in them is shown
in Table 7. Four function types of APIs are involved: informa-
tion providing (134 APIs), world altering (1 APIs), dictionary
service (45 APIs), and value providing (3 APIs). It can be
seen that most APIs are information providing. Furthermore,
we store all interface description information into a database
including provider name, API type, API name, access URL,
return format, request method, request example, response
example, etc. Also, we assign an unique ID to every API.
TABLE 7. Main business domain details.
B. EXPERIMENT ENVIRONMENT
Based on JWASA, a semantic annotation tool is implemented
by means of JavaEE platform, and it adopts B/S
architecture to support simultaneous annotation by multiple
developers. Application server Tomcat8.0 is used to deploy
the tool. Jena3.8 is imported to implement reasoning and
VOLUME 8, 2020 197217
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
basic management operations about ontologies. Mysql5.1 is
picked as the tool's database to store original API description
information, generated bridge rules, and other information
about annotation. And the tool is installed on ThinkPad X1
(1.80GHz,1.99GHz, 16GRAM, Win10).
Based on JWASA, we design an experiment to complete
semantic annotation of allWeb APIs in the previous test case.
It includes the following ve steps:
 Step 1: Generate an API-JSON document for everyWeb
API according to its description crawled from Internet.
 Step 2: Generate an API-JSONLD template document
for every API-JSON document.
 Step 3: Manually add semantic vocabularies in every
template document, and save semantically annotated
API-JSONLD document.
 Step 4: Correct and improve ontologies generated in
Step 3.
 Step 5: Generate bridge rules among all used business
domain ontologies in annotation.
During annotation, three types of les are generated:
API-JSON, API-JSONLD, ontology. The rst two types of
documents all are saved in JSON format in les with sufx
.json and .jsonld. And the last are saved in OWL [25] format
in les with .owl sufx.
Furthermore, in following experiments, execution time of
an algorithm is the average of execution time of 5 runs under
the same environment.
TABLE 8. Details of parsed response parameters in part of business
domains.
C. EFFECTIVENESS AND EFFICIENCY
1) PARSING RESPONSE PARAMETERS AND GENERATING
UNITED API-JSON DOCUMENT
In Step 1 of the experiment, Algorithm 1 (ParseRespara)
is invoked to parse response parameters out of relevant
response example during generating every API-JSON document.
Finally, 183 API-JSON les are created. Table 8 shows
details of parsed response parameters in part of business
domains, including business domain (Domain), API number
(APInum), minimum of parsed parameters (Minimum),
and maximum of parsed parameters (Maximum). It can be
seen that response parameters are effectively parsed out of
response example with JSON format.
In Step 1, we also evaluate execution time of generating
API-JSON documents by an extra experiment. Based
on crawled API descriptions for all Web APIs in the test
case, we automatically create 183 API-JSON les at one
time. The creation process includes reading API descriptions
from Database, parsing response parameters from response
example, and saving to API-JSON les. The result shows
that it spent 5350 ms creating relevant 183 API-JSON
les. The most time is only 131ms for single Web API.
This means generation of an API-JSON document is very
fast.
2) JSON-LD BASED SEMANTIC ANNOTATION AND
FUNCTIONAL SEMANTICS EXTRACTION
It is noticed that many Web APIs have dozens of response
parameters. This makes annotation work tedious. To facilitate
the annotation work, JWASA provides user-friendly operation
interfaces to directly edit data in JSON format and to
retrieve vocabularies in existing ontologies.
Meanwhile, in Step 2 of the experiment, through adding
necessary attributes into API-JSON documents, 183 APIJSONLD
templates are created. Based on these templates,
we manually annotate 183 APIs in Step 3 of the experiment,
and nally generate 183 API-JSONLD documents.
Table 9 shows details of parameters in ve semantically
annotatedWeb APIs from ight domain, including API name,
the number of old request parameters (Reqpara), the number
of annotated request parameters(Areqpara), the number of
added virtual parameters in request (Reqvobj), the number
of old response parameters (Respara), the number of semantically
annotated response parameters (Arespara), the number
of added virtual parameters in response (Resvobj), and
function type (Functiontype). It is noticed that fewer parameters
are semantically annotated in request/response than
old parameters. Specially, those annotated parameters are
close to relevant business, and are distinguished from other
parameters with the annotator's experience. Also, except
API ``Flight No. Query'', for other four APIs, some virtual
parameters are introduced in their request or response
parameters.
In addition, for 183 API-JSONLD documents, we carry out
Algorithm 2 to set attribute inputs and outputs in each document.
Finally, the two attributes are set correctly according to
annotated request/response parameters and function type of
current document. Algorithm 2 is invoked when an annotated
API-JSONLD document is saved, and can be completed in
several milliseconds.
3) AUTOMATIC ONTOLOGY GENERATION
In Step 3 of the experiment, Algorithm 3 (OntologyGen-
eration) is invoked to generate ontologies used in an APIJSONLD
document, when this document is saved. During
annotation process of the 183 APIs, 14 business ontologies
are automatically generated and saved as OWL les. Details
of these ontologies are shown in Table 10, including domain,
concept number (CNum), object property number (PNum),
197218 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
TABLE 9. Details of five annotated APIs in flight domain.
TABLE 10. Details of generated ontologies.
and number of APIs using current ontology (APInum). It is
noticed that an ontology can be used by multiple APIs, such
as 60 APIs for ontology common, 87 APIs for ontology
book.
We also design an extra experiment to evaluate efciency
of ontology generation. In the experiment, we assume that
semantic vocabularies in all annotated API-JSONLD documents
are new vocabularies, and then, based on semantic
vocabularies from 183 annotated API-JSONLD documents,
we carry out Algorithm 3 to create all business ontologies
at one time. The creating process includes reading
API-JSONLD les, creating ontologies, and saving to OWL
les. The result shows that it spent 3172 ms creating all
14 business ontologies. Thus, for every API-JSONLD document,
the time spending in generating ontologies only is about
tens of milliseconds.
In Step 4 of the experiment, for those automatically generated
ontologies, we manually correct and improve fewer
part of concepts' comments, and add comments of all
object properties. Meanwhile, we add some abstract classes/
properties into ontology common, and they can be set super
class/property of those in concrete business ontologies. This
can make more relevant APIs be found. For example, Loca-
tion is a new class in ontology common, and its subclasses
include Address, GPSLocation, Station, Flightport in
other ontologies; property locationInCity is added into the
ontology, and it is the super-properties of some properties
in other ontologies. Furthermore, previous three semantic
conicts also exist among these ontologies. It is noticed
that there are 26 groups of concepts with the same name.
Specially, concept City appears in 6 different ontologies. City
in ontology weather and ight means a city object, but in
ontology common, vehicle, administrative division and hos-
pital only means city name.
4) AUTOMATIC BRIDGE RULE GENERATION
In Step 5 of the experiment, we carry out Algorithm 3
(BridgeRuleGeneration) to facilitate composition among
APIs, which can infer implied relationships and eliminate
various semantic conicts among concepts/properties
among ontologies. The concrete results under two situations
is shown in Table 11, including number of generated
bridge rules (BRnum), number of bridge rules for various
rule types (equalc, intoc, etc.), number of vocabularies that
have different meanings from vocabularies with the same
name (Diffvocab), and number of manually added bridge
rules (MBRnum).
TABLE 11. Details of generated bridge rules under two situations.
In the rst situation (row 1 in Table 11), there are no
vocabularies in diffvocab and no bridge rules in mBrnum,
and the total number of generated bridge rules is 272.
Here, equalc and equalr rules account for most of them,
because there are many vocabularies with the same name.
Specially, before running the algorithm, we manually set subclass
relationship between Location and Address in ontology
common. Thus, ve intoc and ve ontoc bridge rules
are inferred. In the second situation (row 2 in Table 11),
there are 3 vocabularies in diffvocab and 9 bridge rules are
in mBRnum, and 274 bridge rules are generated. Except
for equalc and equalr rules, other four types of rules also
are generated. It is noticed that, compared with the rst
situation, equalc rules are less, and intoc/r, ontoc/r rules
become more. This means the vocabularies in diffcocab and
manual bridge rules are considered during execution of the
algorithm.
In the second situation, we found it spent about 2521ms to
generate 274 bridge rules among 14 ontologies. The execution
time in seconds can be accepted in practice.
Furthermore, generated bridge rules include various relationships
between two vocabularies in two different ontologies
or in the same ontology. Therefore, these rules can play
VOLUME 8, 2020 197219
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
an important role in future API automatic discovery and
composition.
VII. CONCLUSION
In this article, a semi-automaticWeb API semantic annotation
approach is provided, namely JWASA. It adopts lightweight
JSON-LD format to implement semantic annotation of aWeb
API, and meanwhile, proposes a whole solution forWeb API
semantic annotation. In JWASA, two types of documents in
JSON format are designed: API-JSON and API-JSONLD,
and respectively describe Web APIs and semantic Web
APIs. Meanwhile, a common Web API description ontology
WebAPIOnto is designed to provide semantic vocabularies
for common features of Web APIs from different providers.
Furthermore, a semantic annotation specication and a series
of algorithms are designed to improve effectiveness and
efciency of annotation. These algorithms includes parsing
response parameters, extracting I/O parameters, automatic
domain ontology generation, and semi-automatic bridge rule
inference. Finally, for crawled Web APIs from Internet,
JWASA can generate three types of artifacts: API-JSONLD
documents, domain ontologies, and bridge rules. All of
them are crucial elements for following semantic-based Web
API manipulation, e.g: discovery [12] and composition [26].
Based on a prototype system of JWASA and realWeb APIs on
Internet, a series of experiments are carried out. Experiment
results show JWASA is effective and efcient.
JWASA mainly is used to semantically annotate features
related to function of Web APIs. Differences among description
format from different providers are efciently handled.
This can facilitate future API automatic composition.
However, picking semantic vocabulary is completed manually.
This requires annotators are professional for relevant
business domains. Therefore, in futher, we will improve
degree of automation of our JWASA through semantic recommendation
technologies [27]. Also, on artifacts of JWASA,
we will research automatic invocation, composition and
ecosystem evolution [28] of Web APIs.
ACKNOWLEDGMENT
Xianghui Wang thanks her colleagues from Shandong
Jianzhu University for their comments.
REFERENCES
[1] I. Nadareishvili, R. Mitra, M. Mclarty, and M. Amundsen, Microservice
Architecture: Aligning Princ., Practices, Culture. Newton, MA, USA:
O'Reilly Media, 2016.
[2] M. Maleshkova, C. Pedrinaci, and J. Domingue, ``Semantic annotation
of Web apis with sweet,'' in Proc. 6th Workshop Scripting
Develop. Semantic Web, Colocated, Heraklion, Crete, Greece, May 2010,
pp. 113.
[3] C. Luo, Z. Zheng, X. Wu, F. Yang, and Y. Zhao, ``Automated structural
semantic annotation for restful services,'' Int. J.Web Grid Services, vol. 12,
no. 1, pp. 2641, 2016.
[4] M. Garriga, C. Mateos, A. Flores, A. Cechich, and A. Zunino, ``RESTful
service composition at a glance:Asurvey,'' J. Netw. Comput. Appl., vol. 60,
pp. 3253, Jan. 2016.
[5] A. Ranabahu, A. Sheth, M. Panahiazar, and S. Wijeratne, Semantic Anno-
tation and Search for Resources in the Next Generation Web With Sa-Rest.
Pune, Italy: Knoesis, 2011.
[6] C. Bizer, K. Eckert, R. Meusel, H. Mãhleisen, M. Schuhmacher, J. Vãlker,
H. Alani, L. Kagal, A. Fokue, and P. Groth, ``Deployment of rdfa, microdata,
and microformats on the Web-a quantitative analysis,'' in Proc. Int.
Semantic Web Conf., 2013, pp. 1732.
[7] R. Verborgh, A. Harth, M. Maleshkova, S. Stadtmäller, T. Steiner,
M. Taheriyan, and R. V. deWalle, Survey of Semantic Description of REST
APIs. New York, NY, USA: Springer, 2014.
[8] M. N. Lucky, M. Cremaschi, B. Lodigiani, A. Menolascina, and
F. D. Paoli, ``Enriching api descriptions by adding api proles through
semantic annotation,'' in Proc. Int. Conf. Service-Oriented Comput., 2016,
pp. 780794.
[9] C. Peng and G. Bai, ``Using tag based semantic annotation to empower
client and REST service interaction,'' in Proc. 3rd Int. Conf. Complex.,
Future Inf. Syst. Risk, 2018, pp. 6471.
[10] C. Marco and D. P. Flavio, ``Toward automatic semantic api descriptions to
support services composition,'' in Proc. Service-Oriented Cloud Comput.,
vol. 10465, 2017, pp. 159167.
[11] J. Li, ``A fast semantic Web services matchmaker for owl-s services,''
J. Netw., vol. 8, no. 5, p. 1104, 2013.
[12] M. D. Wilkinson, B. Vandervalk, and L. McCarthy, ``The semantic automated
discovery and integration (SADI) Web service design-pattern, API
and reference implementation,'' J. Biomed. Semantics, vol. 2, no. 1,
p. 8, 2011.
[13] G.Kellogg, ``JSON-LD: JSON for linked data,'' in Proc. Semantic Technol.
Bus. Conf., 2012, pp. 14.
[14] S. M. Sohan, C. Anslow, and F. Maurer, ``SpyREST in action: An automated
RESTful API documentation tool,'' in Proc. 30th IEEE/ACM Int.
Conf. Automated Softw. Eng. (ASE), Nov. 2015, pp. 813818.
[15] D. Booth and K. L. Canyang, ``Web services description language (wsdl)
version 2.0 part 0: Primer,'' W3C Recommendation, vol. 26, pp. 3941,
Dec. 2007.
[16] W. A. Bernstein, ``Sawsdl-imatcher: A customizable and effective semanticWeb
service matchmaker,'' J.Web Semantics, vol. 9, no. 4, pp. 402417,
2011.
[17] M. D. L. Calache and C. R. G. D. Farias, ``Graphical and collaborative
annotation support for semantic Web services,'' in Proc. IEEE Int. Conf.
Softw. Archit. Companion (ICSA-C), Mar. 2020, pp. 210217.
[18] U. Lampe, S. Schulte, M. Siebenhaar, D. Schuller, and R. Steinmetz,
``Adaptive matchmaking for RESTful services based on hRESTS and
MicroWSMO,'' in Proc. 5th Int. Workshop Enhanced Web Service Tech-
nol., 2010, pp. 1017.
[19] D. Roman, J. Kopecky, T. Vitvar, J. Domingue, and D. Fensel, ``Wsmolite
and hrests: Lightweight semantic annotations for Web services and
restful apis,'' in Proc.Web Semantics Sci. Services AgentsWorldWideWeb,
vol. 31, 2015, pp. 3958.
[20] R. Alarcon, R. Safe, N. Bravo, and J. Cabello, RESTWeb Service Descrip-
tion for Graph-Based Service Discovery. Cham, Switzerland: Springer,
2015.
[21] C. Marco and D. P. Flavio, ``A practical approach to services composition
through light semantic descriptions,'' in Proc. Service-Oriented Cloud
Comput., vol. 11116, 2018, pp. 130145.
[22] X. Wang, Z. Feng, and K. Huang, ``D3L-based service
runtime self-adaptation using replanning,'' IEEE Access, vol. 6,
pp. 1497414995, 2018.
[23] X. Wang, Z. Feng, K. Huang, and W. Tan, ``An automatic self-adaptation
framework for service-based process based on exception handling,'' Con-
currency Comput., Pract. Exper., vol. 29, no. 5, p. e3984, Mar. 2017.
[24] A. Cheron, J. Bourcier, O. Barais, and A. Michel, ``Comparison matrices
of semantic restful apis technologies,'' in Proc. Int. Conf. Web Eng., 2019,
pp. 425440.
[25] Owl 2 Web Ontology Language Document Overview, W. W. W. Consortium,
Cambridge, MA, USA, 2012.
[26] X. Wang and Z. Feng, ``Semantic Web service composition considering
iope matching,'' J. Tianjin Univ., vol. 50, no. 9, pp. 984996, 2017.
[27] H. Zhang, D. Ge, and S. Zhang, ``Hybrid recommendation system based
on semantic interest community and trusted neighbors,'' Multimedia Tools
Appl., vol. 77, no. 4, pp. 41874202, Feb. 2018.
[28] X.Wang, Z. Feng, S. Chen, and K. Huang, ``DKEM: A distributed knowledge
based evolution model for service ecosystem,'' in Proc. IEEE Int.
Conf. Web Services (ICWS), Jul. 2018, pp. 18.
197220 VOLUME 8, 2020
X. Wang et al.: JSON-LD Based Web API Semantic Annotation Considering Distributed Knowledge
XIANGHUI WANG (Member, IEEE) received the
B.S. and M.S. degrees from the School of Computer
Science and Technology, Shandong University,
China, in 2002 and 2005, respectively, and the
Ph.D. degree from the School of Computer Science
and Technology, Tianjin University, China,
in 2018. She is currently an Assistant Professor
with the School of Computer Science and Technology,
Shandong Jianzhu University, China. Her
research interests include knowledge engineering
and service computing.
QIAN SUN received the B.S. and M.S. degrees
from the School of Computer Science and Technology,
Tongji University, China, in 2004 and
2007, respectively. She is currently an Instructor
with the School of Computer Science and Technology,
Shandong Jianzhu University, China. Her
research interests include workow technology
and service computing.
JINLONG LIANG received the B.S. degree from
the School of Computer Science and Technology,
Shandong University, China, in 2006, and the M.S.
degree from the Qilu Software College, Shandong
University, in 2017. He is currently a Senior
Engineer with the Information Center, Shandong
Provincial Qianfoshan Hospital, First Afliated
Hospital of Shandong First Medical University,
China. His research interest includes enterprise
information integration.
VOLUME 8, 2020 197221
Using linked data to interpret tables?
Varish Mulwad, Tim Finin, Zareen Syed, and Anupam Joshi
Department of Computer Science and Electrical Engineering
University of Maryland, Baltimore County, Baltimore, MD USA 21250
fvarish1,nin,joshig@cs.umbc.edu, zareensyed@gmail.com
Abstract. Vast amounts of information is available in structured forms
like spreadsheets, database relations, and tables found in documents and
on the Web. We describe an approach that uses linked data to interpret
such tables and associate their components with nodes in a reference
linked data collection. Our proposed framework assigns a class (i.e. type)
to table columns, links table cells to entities, and inferred relations between
columns to properties. The resulting interpretation can be used
to annotate tables, conrm existing facts in the linked data collection,
and propose new facts to be added. Our implemented prototype uses
DBpedia as the linked data collection and Wikitology for background
knowledge. We evaluated its performance using a collection of tables
from Google Squared, Wikipedia and the Web.
Keywords: Semantic Web, linked data, human language technology,
entity linking, information retrieval
1 Introduction
Resources like Wikipedia and the Semantic Web's linked open data collection
[1] are now being integrated to provide experimental knowledge bases containing
both general purpose knowledge as well as a host of specic facts about signif-
icant people, places, organizations, events and many other entities of interest.
The results are nding immediate applications in many areas, including improv-
ing information retrieval, text mining, and information extraction. Still more
structured data is being extracted from text found on the web through several
new research programs [2, 3].
We describe a prototype system that automatically interprets and extracts
information from table found on the web. The system interprets such tables using
common linked data knowledge bases, in our case DBpedia, and Wikitology [4], a
custom hybrid knowledge base for background knowledge. To develop an overall
interpretation of the table, we assign a class to every table column and link every
table cell to an entity from the LOD cloud. We also present preliminary work in
identifying relations between table columns. This interpretation can be used for
variety of tasks; in this paper we describe the task of annotation of web tables
?
Research supported in part by a gift from Microsoft Research, a Fulbright fellowship, NSF award
IIS-0326460 and the Human Language Technology Center of Excellence.
2 Varish Mulwad, Tim Finin, Zareen Syed, Anupam Joshi
for the Semantic Web. We describe a template used to publish the annotations
as N3. Our implemented prototype was evaluated using a collection of tables
from Google Squared, Wikipedia and tables found on the Web.
2 Motivation and Related Work
While the availability of data on the Semantic Web has been progressing slowly,
the Web continues to grow at a rapid pace. In July 2008, Google announced that
they had indexed one trillion unique documents on the web1. And much of this
data on the Web is stored in HTML tables. Caferella et al. [5] estimated that
there are around 14.1 billion HTML tables, out of which 154 million contain
high quality relational data.
As a part of the Linked Open Data initiative US, UK and various other gov-
ernments have also shared publicly available government data in tabular form.
This represents a huge source of knowledge currently unavailable on the Se-
mantic Web. There is a need for systems that can automatically generate data
in suitable formats for the Semantic Web from existing sources, be it unstruc-
tured (e.g., free text), semi-structured (e.g., text embedded in forms or Wikis)
or structured (e.g., data in spreadsheets and databases).
Extracting and representing tabular data as RDF is not a new problem.
Signicant research has been done in the area of mapping relational databases
to RDF; various manual and semi-automatic approaches have been proposed(see
[6{10]). To standardize the mapping language, for mapping relational databases
to RDF and OWL, the W3C has formed a working group RDB2RDF2. On
June 8, 2010 the group published its rst working draft, capturing use-cases and
requirements to map Relational Databases to RDF [11].
The other research focus has been on mapping spreadsheets into RDF (see
[12, 13]). While existing systems like RFD123 [12] are practical and useful for
extracting knowledge from tables they suer from several shortcomings. Such
systems require human intervention, for e.g., requiring the users to choose classes
and properties from appropriate ontologies to be used in the annotations. These
systems do not oer any automated (or semi-automated) mechanisms for asso-
ciating the columns headers with known classes or linking the entities in spread-
sheets to known entities from the linked data cloud.
While these systems generate triples, since the columns and entities are not
linked, the triples are not much of use to other applications that want to exploit
this data. In certain cases the triplied data is as useless as raw data would have
been on the Semantic Web. Just triplifying the data may not be that useful.
While Han et al. [14] focused on the problem of associating possible types
with column headers, it did not focus on a complete interpretation of the table,
nor integrating the table with the linked open data cloud. Limaye et al. [15] do
the exact same sub-tasks as we do, however their goal is answering search queries
1 http://googleblog.blogspot.com/2008/07/we-knew-web-was-big.html
2 http://www.w3.org/2001/sw/rdb2rdf/
Using linked data to interpret tables 3
over web tables. The focus of this paper is an automatic framework for inter-
preting tables using existing linked data knowledge and using the interpretation
generating linked annotated RDF from web tables for the Semantic Web.
3 Interpreting a table
Consider the table shown in Fig-
Name Team Position
Michael Jordan Chicago Shooting guard
Allen Iverson Philadelphia Point guard
Yao Ming Houston Center
Tim Duncan San Antonio Power forward
Fig. 1. In this simple table about basketball
players, the column header represents the type
of data stored in columns; values in the columns
represent instances of that type.
ure 1. The column headers sug-
gest the type of information in
the columns: Name and Team -
might match classes in a target
ontology such as DBpedia [16];
Position could match properties
in the same or related ontologies.
Examining the data values, which
are initially just strings, provides
additional information that can
conrm some possibilities and disambiguate between possibilities for others. The
strings in column one can be recognized as entity mentions that are instances of
the dbpedia-owl:Person class and can be linked to known entities in the LOD.
Additional analysis can automatically generate a narrower description, such as
dbpedia-owl:BasketballPlayer.
However just examining the string values in the column may not be enough.
Consider the strings in column two. A initial examination of just the strings
would suggest that they may be instances of the dbpedia-owl:PopulatedPlace
class and that the strings should be linked to the respective cities. But in this
case, this analysis would be wrong, since they are referring to NBA basketball
teams.
Thus it is important to consider additional context evidence, provided by the
column header and rest of the row values. In this example, given the evidence
that values in column one are basketball players and values in column three are
their playing position, we would be able to infer correctly that values in column
two are basketball teams and not cities in the United States.
Identifying relations between columns will be important as well, since rela-
tions can help identify the columns which can be mapped as properties of some
other column in the table. For example, the values in column three are values
of the property dbpedia-owl:position which can be associated with the players in
column one.
Producing an overall interpretation of a table is a complex task that requires
developing an overall understanding of the intended meaning of the table as
well as attention to the details of choosing the right URIs to represent both the
schema as well as instances. We break down the process into following tasks:
{ assign every column a class label from an appropriate ontology
{ link table cell values to appropriate LD entities, if possible
4 Varish Mulwad, Tim Finin, Zareen Syed, Anupam Joshi
{ discover relationships between the table columns and link them to linked
data properties
In this paper we focus on the rst two tasks - associating type/class label
with a column header and linking table cell to entity.We also present preliminary
work on the discovering relations between columns. We also present how this
interpretation can be used to annotate webtables. The details of our approach
and its prototype implementation are described in Section 4 and the results of
the evaluation are described in Section 5.
4 Approach
Our approach comprises four steps: associating ontology classes with columns,
linking cell values to instances of those classes, discovering implicit relations
between columns in the table, and generating annotation output. We discuss
each step in turn.
4.1 Associating Classes with Columns
In a typical well formed table, each column contains data of a single syntactic
type (e.g., strings) that represent entities or values of a common semantic type
(e.g., people, yearly salary in US dollars). The column's header, if present, may
name or describe the semantic type or perhaps a relation in which the column
participates. Our initial goal is to predict a semantic class from among the pos-
sible classes in our linked data collection that best characterizes the column's
values. Our approach is to map each cell value to a ranked list of classes and
then to select the one which best characterizes the entire column. Algorithm 1
describes the steps involved in the process.
The algorithm rst determines the type or class of each string in the column,
by submitting a complex query to the Wikitology KB. The KB returns a ranked
list of top N instances for each string in the column and their class. Using the
classes of the instances returned by the KB, a set of possible class labels for a
column is generated. Each class label in this set is assigned a score based on
the weighted scoring technique described in algorithm 1. The class labels in the
set are paired with strings in the column and each pair gets scored. The score
is based on the highest ranked instance of the string matching the class being
scored. The score is a weighted sum of the instance's Wikitology rank for the
query and it's approximate page rank [17]. The class label that maximizes its
score over the entire column is chosen as the class label to be associated with
the column. We predict class labels from four vocabularies - DBpedia Ontology,
Freebase [18], WordNet [19], and Yago [20].
In the following sections we describe our knowledge base and our custom
query module, used to the query the knowledge base.
Using linked data to interpret tables 5
Algorithm 1 \PredictClassLabel" - An algorithm to pick the best class to be
associated with a column
1: Let S be the set of k strings in a table column.
2: For each s in S, query the Wikitology KB to get a ranked list of top N possible
Wikipedia instances along with their types or class labels and their predicted page
ranks.
3: From the k  N instances, generate a set of class labels that can be associated with
a column. Let C be the set of all associated classes for a column.
4: Create a matrix V [ci; sj ] of class label-string pairings where 0 < i < size of (C),
0 < j < size of (S)
5: Assign a score to each V [ci; sj ] based on the highest ranking instance that matches
ci. The instance's rank R and its predicted Page Rank is used to assign a weighted
score to V [ci; sj ] (we use w = 0.25):
Score = w  (1 / R) + (1 - w)  (PageRank)
6: If none of the instances for a string match the class label being evaluated assign
the pair V [ci; sj ] a score of 0.
7: Choose the class label ci which maximizes its score over the entire column (S) to
be associated with the column.
Input: Table Cell Value (String)
Table Row Data (RowData)
Table Column Header (ColumnHeader)
Output: Top \N" matching instances from KB (TopN)
Query = wikiTitle: String (or)
redirects: String (or)
rstSentence: String, ColumnHeader (or)
types: ColumnHeader (or)
categories: ColumnHeader (or)
contents: (String) ^ 4.0, RowData (or)
linkedConcepts: (String) ^ 4.0, RowData (or)
propertiesValues: RowData
Fig. 2. Description of the query to Wikitology for a table cell
Knowledge Base. We use DBpedia as our linked data knowledge base. We also
use Wikitology, a hybrid KB of structured and unstructured information ex-
tracted from from Wikipedia augmented with structured information from DB-
pedia, Freebase, WordNet and Yago. The interface to Wikitology is via a spe-
cialized information retrieval index implemented using Lucene [21] that allows
unstructured, structured as well as hybrid queries. Given the simple, yet power-
ful query mechanism augmented with the fact that the backbone of Wikitology is
Wikipedia, one of the most comprehensive collaborative encyclopedia, we think
Wikitology along with DBpedia are appropriate choices as KBs. The approach
we have described so far and the approaches we describe further are KB inde-
pendent, allowing the use of any appropriate and suitable linked data knowledge
bases as and when needed.
6 Varish Mulwad, Tim Finin, Zareen Syed, Anupam Joshi
Mapping table to Wikipedia. The table cell string that is being queried for along
with its row data and column header are mapped to the various elds of the
Wikitology index. The cell string is mapped to the title, redirects and the rst
sentence elds of the index. If there's a dierence in spelling between the string
in question and the title or a pseudo name is used, it may appear in the redirects.
The column header is mapped to the rst sentence, types and categories, since
the column header of a table often describes the type of instances present in the
column and the type is also likely to appear in the rst sentence as well.
The string (with a Lucene query weight boost of 4.0) along with the row
data is mapped to contents as well as the linked concepts elds. In a table the
data present in a given row are likely to have some kind of relation amongst
themselves, hence we map the row data to the linked concept elds which cap-
tures the linked concepts (article) to a given Wikipedia concept (article). The
row data (excluding the string) is mapped to property values eld, since the row
data can be values of a property associated with the string in question. Figure 2
describes the query. All the elds are\ored" with each other. The query returns
top N instances that the string in the query could be associated with, along with
their types, page length and their approximate PageRank.
Augmenting types from DBpedia. For every instance returned by Wikitology,
we also query DBpedia using its public SPARQL endpoint3 to fetch the types
associated with that instance on DBpedia. The types returned by Wikitology
are augmented with the types returned by DBpedia to the get a complete and
accurate set of types for a given instance.
4.2 Linking Table Cells to Entities
We have developed an algorithm \LinkTableCells" (see algorithm 2) to link table
cell strings to entities from the Linked Open Data cloud. For every string in the
table, the algorithm re-queries the KB using the predicted class labels for the
column to which the string belongs to, as additional evidence. The predicted class
labels are mapped to the typesRef eld of the Wikitology index and \anded" in
the query in Figure 2 , thus restricting the type of entities returned by the KB
to the predicted types (class labels).
For each of the top N entities returned by the KB, a feature vector is gener-
ated. The feature vector consists of the entity's index score, entity's Wikipedia
page length, entity's page rank, (all popularity measures) the Levenshtein dis-
tance [22] between the entity and the string in the query and the Dice score
[23] between the entity and the string (similarity measures). The Levenshtein
distance and the Dice score is calculated between the query string and all labels
(all possible names) for the entity. To obtain all other possible names, we query
DBpedia to get the values associated with the rdfs:label property of the entity.
The best Levenshtein distance (i.e. the smallest) and the best Dice score (i.e.
the largest) are selected as a part of the feature vector. We choose popularity
3 http://dbpedia.org/sparql
Using linked data to interpret tables 7
Algorithm 2 \LinkTableCells" - An algorithm to link table cell to entities
1: Let S be the set of strings in a table.
2: for all s in S do
3: Query the KB and get top N instances that the string can be linked to. Let I be
this set of instances for the string.
4: for all i in I do
5: Get all the other names associated with i. Let this set be O
6: Calculate the Levenshtein distance between s and all o 2 O
7: Choose the best (smallest) Levenshtein distance between s and any o 2 O
8: Similarly calculate the Dice score between s and all o 2 O
9: Choose the best (largest) Dice score
10: Create a feature vector for i. The vector includes the following features: i0s
Wikitology index score, i0s page rank, i0s page length, best Levenshtein distance
and best Dice score
11: end for
12: Input feature vectors of all i 2 I to a SVM Rank Classier. The Classier outputs
a ranked list of instances in I
13: Select the instance which is top ranked. Let it be topi
14: To feature vector of topi, append two new features - the SVM rank score for the
topi and the dierence of scores between the top two instances ranked by SVM
Rank
15: Input this vector to another classier which produces a label \yes" or \no" for
the given vector
16: If the classier labels the feature vector a \yes", link the string s to instance
topi else Link it to NIL.
17: end for
measures as a part of the feature vector because in cases where it is dicult
to disambiguate between entities, the most popular entity is often the correct
answer and choose similarity measures because the entity that will get linked to
query string will be similar if not same in terms of string comparison.
For each query string, a set of feature vectors is generated from the top N
instances returned as query results. A classier built using SVM-rank [24] ranks
the entities based on the feature vector set. A second classier is trained to
decide whether the evidence is strong enough to link to the top ranked entity
or not. The classier decides based on the feature vector of top ranked entity
which now include two additional features - the SVM-rank score of the entity
and the dierence in scores between the top two ranked entities by SVM-rank.
If the evidence is strong enough, the classier suggests to link to the top ranked
entity, else it suggests to link to \NIL". The above process is repeated for all the
strings in the table.
The second SVM classier was trained using Weka. In cases where linking to
the top ranked entity returned by SVM-rank based classier would be incorrect
for example, if the entity is not present in the KB, the second classier is useful to
determine to link the query string to the entity or to predict a link to \NIL".This
step is useful in discovery of new entities in a given table.
8 Varish Mulwad, Tim Finin, Zareen Syed, Anupam Joshi
@prex rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prex dbpedia: <http://dbpedia.org/resource/> .
@prex dbpedia-owl: <http://dbpedia.org/ontology/> .
@prex yago: <http://dbpedia.org/class/yago/> .
\Name"@en is rdfs:label of dbpedia-owl:BasketballPlayer .
\Team"@en is rdfs:label of yago:NationalBasketballAssociationTeams .
\Michael Jordan"@en is rdfs:label of dbpedia:Michael Jordan .
dbpedia:Michael Jordan a dbpedia-owl:BasketballPlayer .
\Chicago Bulls"@en is rdfs:label of dbpedia:Chicago Bulls .
dbpedia:Chicago Bulls a yago:NationalBasketballAssociationTeams .
Fig. 3. A example of N3 representation of a table as linked RDF
4.3 Relation identication
We have developed a preliminary approach for identifying relations between table
columns. The algorithm generates a set of candidate relations from the relations
that exist between the concepts associated with the strings in each row of the
two columns. To identify relation between the pair of strings, we query DBpedia
using its public SPARQL endpoint.
Each candidate relation is scored as follows - each pair of strings in the two
columns vote for the candidate relation with a score of 1, if the candidate relation
appears in the set of relations between the the pair of strings. The sum of score of
each of the candidate relation is normalized by the number of rows in the table.
The relation with the highest score is selected to represent relation between the
two columns. Our work on relations identication is pretty preliminary and we
have still have to develop approach to identify columns that can be mapped as
properties of some other column.
4.4 Annotating the webtable
In the previous section (sections 4.1, 4.2 , 4.3) we described approaches that help
us develop an overall interpretation of the table. We now describe how this can
be used for annotating a webtable. We have developed a template for annotating
and representing tables as linked RDF. We choose N3 because it is compact as
well as human readable. Figure 3 shows an example of a N3 representation of
a webtable. To associate the column header with its predicted class label, the
rdfs:label property from RDF Schema is used. The rdfs:label property is also
used to associate the table cell string with its associated entity from DBpedia.
To associate the table string with its type (i.e. class label of the column header),
the rdf:type property is used.
Using linked data to interpret tables 9
# of Tables 15
# of Rows 199
# of Columns 56 (52)
# of Entities 639 (611)
(a)
Category # of Columns (%) # of Entities (%)
Place 40 45
Person 25 20
Organization 12 10
Other types 23 25
(b)
Fig. 4. (a) provides a summary of the data set. (b) presents the distribution of columns
and entities across the four categories.
Mean Average Precision columns
m = 1 11.53%
0 < m < 1 69.23%
m = 0 19.24%
(a)
Recall columns
r = 1 46.15%
0 < r < 1 34.61%
r = 0 19.24%
(b)
Fig. 5. The percentage of columns with various MAP (see a) and recall (see b) scores.
5 Evaluation
Our implemented prototype was evaluated against 15 tables obtained from Google
Squared, Wikipedia and from a collection of tables extracted from the Web4. We
consider simple regular tables with column headers and tables where the number
of cells is equal to the product of number rows and columns. We do not consider
tables which have been used for formatting. The task of assigning class label
to column header was evaluated against 52 columns; linking the table cell to
entity against 611 entities. The distribution of the columns and entities across
the four categories - Persons, Places, Organizations and Other (movies, songs,
nationality etc.) is as shown in Figure 4(b)
5.1 Class label prediction for columns
We used human judgments to evaluate the correctness of the class labels pre-
dicted by our approach.We evaluated the class label predicted from the DBpedia
ontology, since it would have been fairly easy for our evaluators to browse the
DBpedia ontology. In the rst evaluation of the algorithm for assigning class
labels to columns, we compared the ranked list of possible class labels generated
by the system against the list of possible class labels ranked by the evaluators.
As shown in Figure 5 for 80.76% of the columns the Mean Average Precision
(MAP) [25] between the system and evaluators list is greater than 0 which in-
dicates that there was at least one relevant label in the top three of the system
ranked list. For 75% of the columns, the recall of the algorithm was greater than
or equal to 0.6. A high recall value shows that there is a high match between
the labels in the top three of the system as compared to the top three list of the
evaluators5.
4
Set of tables available online at www.cs.umbc.edu/varish1/t2ld-tables/
5
While the top three from the system and evaluator's list were compared; the total length of the
list varied between 5 and 11 which depended upon the set of possible class labels for every column
10 Varish Mulwad, Tim Finin, Zareen Syed, Anupam Joshi
Fig. 6. Category wise accuracy for \column correctness" is shown in (a) and for entity
linking in (b)
In the nal evaluation, we tried to assess whether our predicted class labels
were reasonable based on the judgment of human evaluators. Even though a
more accurate class label may exist for a given column, the evaluators needed to
determine whether the predicted class was reasonable. For example, for a column
of cities, a human might judge dbpedia-owl:City as the most appropriate class,
consider dbpedia-owl:PopulatedPlace and dbpedia-owl:Place as acceptable, and
consider other classes as unacceptable (e.g., dbpedia-owl:AdministrativeRegion,
owl:Thing, etc). 76.92% of the class labels predicted were considered correct by
the evaluators. The accuracy in each of the four categories is shown in Figure
6. We enjoyed moderate success in assigning class labels for Organizations and
Other types of data probably because of sparseness of data in the KB about
these types of entities.
5.2 Linking table cells to entities
For the evaluation of linking table cells to entities, we manually hand-labeled
the 611 table cells to their appropriate Wikipedia / DBpedia pages. The system
generated links were compared against the expected links. 66.12% of the table
cell strings were correctly linked. A look at the breakdown of accuracy based
on the categories (Figure 6) shows that we had the highest accuracy in linking
Persons (83.05%) followed by linking Places (80.43%).We have moderate success
in linking Organization (61.90%), but we fare poorly in linking other types of
data like movies, nationality, songs, types of business and industry etc. with an
accuracy of just 29.22% probably because of sparseness of data in the KB about
these types of entities.
Our dataset had 24 entities which were unknown to the KB and in all the
24 cases, the system was able to predict correctly that the table cell should be
linked to \NIL". Comparing the entity linking results against our previous work
where we used a heuristic based method for linking table cells to entity [17], we
have improved our accuracy in linking places by a good margin (18.79 %) and
Using linked data to interpret tables 11
accuracy for linking persons and organizations slightly decreased (by 7.71 % and
4.77 % respectively). However this would not be that fair a comparison since the
initial results from the previous method are for a small subset6 of the current
data set.
5.3 Relation identication
We did a preliminary evaluation for identication of relation between columns.
We asked human evaluators to identify pairs of columns in a table between which
a relation may exist and compared that against the pairs of columns identied
by the system. For ve tables, used in this evaluation, in 25% of the cases, the
system was able to identify the correct pairs of columns.
6 Conclusion
We presented an automated framework for interpreting data in a table using ex-
isting Linked Data KBs. Using the interpretation of the table we generate linked
RDF from webtables. Evaluations show that we have been fairly successful in
generating correct interpretation of webtables. Our current work is focused on
improving relationship discovery and generating new facts and knowledge from
tables that contain entities not present in the LOD knowledge bases. To deal
with web scale analytics, we plan to focus on adapting our algorithms for paral-
lelization using Hadoop or Azure type frameworks. We are also exploring ways
to apply this work to create an automated (or semi-automated / human in the
loop) framework for interpreting and representing public government datasets
as linked data.
References
1. Bizer, C.: The emerging web of linked data. IEEE Intelligent Systems 24 (2009)
87{92
2. Etzioni, O., Banko, M., Cafarella, M.: Machine reading. In: Proceedings of the
National Conference on Articial Intelligence. Volume 21., Menlo Park, CA; Cambridge,
MA; London; AAAI Press; MIT Press; 1999 (2006) 1517
3. McNamee, P., Dang, H.: Overview of the TAC 2009 knowledge base population
track. In: Proceedings of the 2009 Text Analysis Conference. (2009)
4. Finin, T., Syed, Z.: Creating and Exploiting a Web of Semantic Data. In: Proc.
2nd International Conference on Agents and Articial Intelligence, Springer (2010)
5. Cafarella, M.J., Halevy, A.Y.,Wang, Z.D.,Wu, E., Zhang, Y.: Webtables: exploring
the power of tables on the web. PVLDB 1 (2008) 538{549
6. Barrasa, J., Corcho, O., Gomez-perez, A.: R2o, an extensible and semantically
based database-to-ontology mapping language. In: Proc. 2nd Workshop on Semantic
Web and Databases(SWDB2004). Volume 3372. (2004) 1069{1070
6 The subset had 171 entities to link
12 Varish Mulwad, Tim Finin, Zareen Syed, Anupam Joshi
7. Hu, W., Qu, Y.: Discovering simple mappings between relational database schemas
and ontologies. In Aberer, K., Choi, K.S., Noy, N.F., Allemang, D., Lee, K.I.,
Nixon, L.J.B., Golbeck, J., Mika, P., Maynard, D., Mizoguchi, R., Schreiber, G.,
Cudre-Mauroux, P., eds.: ISWC/ASWC. Volume 4825 of Lecture Notes in Computer
Science., Springer (2007) 225{238
8. Papapanagiotou, P., Katsiouli, P., Tsetsos, V., Anagnostopoulos, C., Hadjiefthymiades,
S.: Ronto: Relational to ontology schema matching. In: AIS SIGSEMIS
BULLETIN. (2006)
9. Lawrence, E.D.: Composing mappings between schemas using a reference ontology.
In: Proceedings of International Conference on Ontologies, Databases and
Application of Semantics (ODBASE), Springer (2004) 783{800
10. Sahoo, S.S., Halb, W., Hellmann, S., Idehen, K., Thibodeau Jr, T., Auer, S., Sequeda,
J., Ezzat, A.: A survey of current approaches for mapping of relational
databases to rdf. Technical report, W3C (2009)
11. Auer, S., Feigenbaum, L., Miranker, D., Fogarolli, A., Sequeda, J.: Use cases
and requirements for mapping relational databases to RDF, W3C working draft.
Technical report (2010)
12. Han, L., Finin, T., Parr, C., Sachs, J., Joshi, A.: RDF123: from Spreadsheets to
RDF. In: Seventh International Semantic Web Conference, Springer (2008)
13. Langegger, A., Wob, W.: Xlwrap - querying and integrating arbitrary spreadsheets
with sparql. In: 8th International Semantic Web Conference (ISWC2009). (2009)
14. Han, L., Finin, T., Yesha, Y.: Finding Semantic Web Ontology Terms from Words.
In: Proceedings of the Eigth International Semantic Web Conference, Springer
(2009) (poster paper).
15. Limaye, G., Sarawagi, S., Chakrabarti, S.: Annotating and searching web tables
using entities, types and relationships. In: Proc. of the 36th Int'l Conference on
Very Large Databases (VLDB). (2010)
16. Bizer, C., Lehmann, J., Kobilarov, G., Auer, S., Becker, C., Cyganiak, R., Hellmann,
S.: Dbpedia - a crystallization point for the web of data. Journal of Web
Semantics 7 (2009) 154{165
17. Syed, Z., Finin, T., Mulwad, V., Joshi, A.: Exploiting a Web of Semantic Data for
Interpreting Tables. In: Proc. Second Web Science Conference. (2010)
18. Bollacker, K., Evans, C., Paritosh, P., Sturge, T., Taylor, J.: Freebase: a collaboratively
created graph database for structuring human knowledge. In: Proceedings
of the 2008 ACM SIGMOD international conference on Management of data. SIGMOD
'08, New York, NY, USA, ACM (2008) 1247{1250
19. Miller, G.A.: Wordnet: a lexical database for english. Commun. ACM 38 (1995)
39{41
20. Suchanek, F.M., Kasneci, G., Weikum, G.: Yago: A Core of Semantic Knowledge.
In: 16th Int. World Wide Web Conf., New York, ACM Press (2007)
21. Hatcher, E., Gospodnetic, O.: Lucene in Action (In Action series). Manning
Publications (2004)
22. Levenshtein, V.I.: Binary codes capable of correcting deletions, insertions, and
reversals. Technical Report 8 (1966)
23. Salton, G., Mcgill, M.J.: Introduction to Modern Information Retrieval. McGraw-
Hill, Inc., New York, NY, USA (1986)
24. Joachims, T.: Training linear svms in linear time. In: Proceedings of the 12th
ACM SIGKDD international conference on Knowledge discovery and data mining.
KDD '06, New York, NY, USA, ACM (2006) 217{226
25. Manning, C.D., Raghavan, P., Schutze, H.: Introduction to Information Retrieval.
1 edn. Cambridge University Press (2008)
Semantic Gateway as a Service architecture for IoT
Interoperability
Pratikkumar Desai
SeerLabs,
pratik@knoesis.org
Amit Sheth and Pramod Anantharam
Ohio Center of Excellence in
Knowledge-enabled Computing (Kno.e.sis),
Wright State University
Dayton, OH
amit@knoesis.org, pramod@knoesis.org
Abstract—The Internet of Things (IoT) is set to occupy a
substantial component of future Internet. The IoT connects sensors
and devices that record physical observations to applications
and services of the Internet[1]. As a successor to technologies
such as RFID and Wireless Sensor Networks (WSN), the IoT
has stumbled into vertical silos of proprietary systems, providing
little or no interoperability with similar systems. As the IoT
represents future state of the Internet, an intelligent and scalable
architecture is required to provide connectivity between these
silos, enabling discovery of physical sensors and interpretation of
messages between the things. This paper proposes a gateway and
Semantic Web enabled IoT architecture to provide interoperability
between systems, which utilizes established communication
and data standards. The Semantic Gateway as Service (SGS)
allows translation between messaging protocols such as XMPP,
CoAP and MQTT via a multi-protocol proxy architecture. Utilization
of broadly accepted specifications such as W3Cs Semantic
Sensor Network (SSN) ontology for semantic annotations of
sensor data provide semantic interoperability between messages
and support semantic reasoning to obtain higher-level actionable
knowledge from low-level sensor data.
I. IOT INTEROPERABILITY CRISIS
In the initial momentum of IoT, smart grid, smart appliances,
and wearable device powered health and fitness
are emerging as major application domains but with varying
architecture and data models. Figure 1 shows vertical silos for
these domains with examples including physical sensors to the
Internet service. In health care domain, the Fitbit, an activitymonitoring
device, provides complete sets of IoT components
creating its close silo. It provides graphical interface and uses
representational state transfer (REST) application interface to
connect the sensor to their cloud service. Similarly, a user can
connect and monitor his health by analyzing data from sensors
such as heart rate, glucose, weighing scale using any popular
open hardware platform such as Raspberry Pi or Arduino as
a gateway node. An IoT service such as Xively, previously
known as Pachube, can provide graphical interface for sensor
data aggregated from this gateway node. The current state of
IoT infrastructure lacks methods to provide interconnectivity,
for example between the Fitbit and the Xively silos, at each
of these layers: Network, Messaging and Data model.
A. Network layer interoperability
The power constrained sink nodes, connected to the physical
world objects, require efficient networking protocols. The
Fig. 1. Vertical silos of IoT service deployment
IoT domain is scattered between various low power networking
protocols (ZigBee, ZWave, and Bluetooth), traditional
networking protocols (Ethernet, WiFi) and even hardwired
connections. These protocols are designed for domain specific
applications with distinctive features. Solving interoperability
issue at this level requires standardization at the hardware level.
Various commercial products have been developed to support
multiple networking protocols by assembling the required
hardware components together. This paper reports on the
research on solving the interoperability problem at the application
level, bypassing the networking protocol interoperability
challenge.
B. Interoperability between messaging protocol
In contemporary IoT applications, multiple competing application
level protocols such as CoAP (Constrained Application
Protocol), MQTT (Message Queue Telemetry Transport)
and XMPP (Extensible Messaging and Presence Protocol) are
proposed by various organizations to become the de facto
standards to provide communication interoperability[2], [3],
[4]. Each of the protocol possesses unique characteristics
and messaging architecture helpful for different types of IoT
applications, which require effective utilization of limited processing
power and energy. However, a scalable IoT architecture
should be independent of messaging protocol standards, while
2015 IEEE International Conference on Mobile Services
978-1-4673-7284-8/15 $31.00 © 2015 IEEE
DOI 10.1109/MS.2015.51
Semantic Gateway as a Service architecture for IoT
Interoperability
Pratikkumar Desai1, Amit Sheth, Pramod Anantharam
Ohio Center of Excellence in Knowledge-enabled Computing (Kno.e.sis),
Wright State University
Abstract
The Internet of Things (IoT) is set to occupy a substantial component of future Internet. The IoT
connects sensors and devices that record physical observations to applications and services of the
Internet[1]. As a successor to technologies such as RFID and Wireless Sensor Networks (WSN),
the IoT has stumbled into vertical silos of proprietary systems, providing little or no
interoperability with similar systems. As the IoT represents future state of the Internet, an
intelligent and scalable architecture is required to provide connectivity between these silos,
enabling discovery of physical sensors and interpretation of messages between the things. This
paper proposes a gateway and Semantic Web enabled IoT architecture to provide interoperability
between systems, which utilizes established communication and data standards. The Semantic
Gateway as Service (SGS) allows translation between messaging protocols such as XMPP,
CoAP and MQTT via a multi-protocol proxy architecture. Utilization of broadly accepted
specifications such as W3C’s Semantic Sensor Network (SSN) ontology for semantic
annotations of sensor data provide semantic interoperability between messages and support
semantic reasoning to obtain higher-level actionable knowledge from low-level sensor data.
Note to the reviewers: Unlike traditional academic journal publications, IEEE IC has a preference to limit
number of references, so we welcome any suggestions on removing references, especially if additional
references are suggested for inclusions. We have also included some introductions to communication
technologies and an overview on current IoT ecosystem to make this manuscript as self contained as
possible, especially for IC’s wider audience. However, if needed, some of these can be removed if we
want to assume that readers will be; actionable suggestions and recommendations on these matters will
be valuable.
1. IoT Interoperability crisis
In the initial momentum of IoT, smart grid, smart appliances, and wearable device powered
health and fitness are emerging as major application domains but with varying architecture and
data models. Figure 1 shows vertical silos for these domains with examples including physical
sensors to the Internet service. In health care domain, the Fitbit, an activity-monitoring device,
provides complete sets of IoT components creating its close silo. It provides graphical interface
and uses representational state transfer (REST) application interface to connect the sensor to
their cloud service. Similarly, a user can connect and monitor his health by analyzing data from
1 Pratikkumar Desai is now with SeerLabs, an IoT startup.
sensors such as heart rate, glucose, weighing scale using any popular open hardware platform
such as Raspberry Pi or Arduino as a gateway node. An IoT service such as Xively, previously
known as Pachube, can provide graphical interface for sensor data aggregated from this gateway
node. The current state of IoT infrastructure lacks methods to provide interconnectivity, for
example between the Fitbit and the Xively silos, at each of these layers: Network, Messaging and
Data model.
Figure 1: Vertical silos of IoT service deployment
1.1 Network layer interoperability
The power constrained sink nodes, connected to the physical world objects, require efficient
networking protocols. The IoT domain is scattered between various low power networking
protocols (ZigBee, ZWave, and Bluetooth), traditional networking protocols (Ethernet, WiFi)
and even hardwired connections. Figure 2 shows IoT networking protocols with traditional
devices associated with them. These protocols are designed for domain specific applications with
distinctive features. Solving interoperability issue at this level requires standardization at the
hardware level. Various commercial products have been developed to support multiple
networking protocols by assembling the required hardware components together. This paper
reports on the research on solving the interoperability problem at the application level, bypassing
the networking protocol interoperability challenge.
Figure 2: Present state of IoT network architecture
1.2 Interoperability between messaging protocol
In contemporary IoT applications, multiple competing application level protocols such as CoAP
(Constrained Application Protocol), MQTT (Message Queue Telemetry Transport) and XMPP
(Extensible Messaging and Presence Protocol) are proposed by various organization to become
the de facto standard to provide communication interoperability[2]–[4]. Each of the protocol
possesses unique characteristics and messaging architecture helpful for different types of IoT
applications, which require effective utilization of limited processing power and energy.
However, a scalable IoT architecture should be independent of messaging protocol standards,
while also providing integration and translation between various popular messaging protocols.
Figure 3 shows an example of REST based messages transfer between CoAP client and server,
while the Figure 4 shows publisher/subscriber based message delivery for MQTT protocol.
Figure 3: An example of CoAP message transfer
Figure 4: An example of publisher-subscriber based message transfer
We describe a semantic IoT architecture where the gateway, located between physical level
sensors and cloud-based services, provides translation between widely used CoAP, MQTT and
XMPP protocols, making their semantic integration possible and seamless.
1.3 Interoperability at data annotation level
The traditional paradigm of the IoT service model provides raw sensor data to the software
agent, captured from the heterogeneous sink nodes. This raw sensor data do not contain any
semantic annotation and requires extensive manual effort in order to build practical applications.
An IoT service can provide raw sensor data with added metadata but due to absence of
annotation standards, it cannot be exploited by other services. Typically IoT applications are
deployed in a bottom-up (sensors, gateways, service and application) manner from a common
provider. These providers control the sensor data and data structures, which help them to create
intelligent application on top of it. Due to the proprietary approach employed by these providers,
the IoT domain has turned into a domain of vertical silos of various IoT applications with no
horizontal connectivity between them. This lack of interoperability with independent services
currently endangers the wide acceptability and adoption of the IoT domain, especially for
applications that can benefit from multiple devices.
2. Background
IoT interconnects physical world “Things” by utilizing software and networking technologies.
Due to its roots in traditional sensor networks, connected physical objects are resourceconstrained
devices, and require competent communication protocol for energy efficiency.
First wave of IoT application in smart city domain emphasized on connecting sensor interfacing
with physical-world using lightweight protocols such as CoAP and XMPP [5][6]. In later stages,
traditional Internet state transfer protocol such as REST is used for similar applications, where
event-centric frameworks had been implemented to reduce number of messages transmitted [7].
The ‘Smart-Object’ devices with domain specific intelligence are rapidly replacing first wave of
IoT devices [8]. Although these devices do not utilize semantic technologies, they provide
higher-level of awareness from the sensor than just plain raw sensor data.
The IoT domain has been started getting congested with heterogeneous applications using
different communication protocols and data models [9]. Various organizations such as the
OpenIoT alliance, AllSeen alliance, and IPSO alliance are working on standardization of
communication protocols to provide interoperability between various vendors silos [10][11][12].
Organization such as Internet Engineering Task Force (IETF) and XMPP standards foundation
are trying to scale their messaging protocols, CoAP and XMPP, respectively, to align with other
protocols. These efforts are scattered and largely focus on solving problems around one protocol
instead of providing integration solution.
In Web-centric infrastructure, acquisition of contextual information from raw sensor data
requires annotation of sensor data with semantic metadata. Key standardization efforts that have
sought to establish sensor data models for sensors to be accessible and controllable via the Web
include:
• OGC Sensor Web Enablement (SWE)
The SWE efforts established by the Open Geospatial Consortium include following
important specifications: Observation & Measurement (O&M), Sensor Model Language
(SensorML) and Sensor Observation Service (SOS)[13]. The O&M and SensorML
contain standard model and XML schema for observations/measurements and
sensors/processes respectively. The SOS is a standard service model, which provides
mechanism for querying observation and sensor metadata.
• Semantic Sensor Network (SSN) ontology
The SSN ontology, developed by W3C provides a standard for modeling sensor devices,
sensor platforms, knowledge of the environment and observations[14] [15]. The SSN
provides a foundation in the direction of achieving interoperability between the
interconnected IoT Silos.
• Semantic Sensor Observation Service (SemSOS)
The Semantic Web enabled implementation of SOS, SemSOS, provides a rich semantic
backend (knowledge base) while retaining the standard SOS specifications/service
interactions. A semantically intelligent client can utilize this capability of SemSOS to
derive higher level abstractions from the annotated sensor data [16] by implementing a
semantic reasoning service acting on the knowledge base. SemSOS is the principal
component of Semantic Sensor Web [17].
Although the utilization of these standards provide integration of Semantic Web with sensor
applications, the interoperability challenges on IoT is far from being solved and a semantic IoT
architecture is required to provide interoperability between connected IoT systems. This
architecture should support multiple IoT protocols and severe resource and energy constrains.
One of the major initiatives, which utilizing Semantic Web for IoT architecture, includes the
OpenIoT project, funded by Europe Union’s framework program. The OpenIoT focuses on
developing open source middleware for IoT interoperability using linked sensor data[10].
In standard IoT applications the sink nodes are energy-constrained devices and utilizes minimum
resources to conserve the energy. Various proposals seek to optimize the resources and provide
translation between application layer protocol via the gateway devices[9][6]. These approaches
fail in achieving interoperability at defining sensor annotation model, which is required to
provide service level interoperability between IoT systems.
3. Semantic IoT Architecture
In the present IoT ecosystem, various IoT components can be broadly categorized into three
classes: sink nodes, gateway nodes, and IoT services. Typical sink nodes consist of household
appliances or sensors observing the physical environment, which possess low computational
resources, stringent energy constraints and limited communication resources. The gateway node
works as a sensor data aggregator and provides connectivity with other sink nodes and service
providers. The gateway nodes have more computing resources compared to the sink nodes and
occasionally provide replacement for the sink nodes. The IoT services collect data from the
various gateway nodes and provide user or event specific services using a graphics interface, a
notification or application.
Although they consist of each components mentioned above, the current IoT silos only provide
end-to-end message delivery and lacks accessibility to semantic data. Organizations such as
IETF, which manages CoAP standards, and XMPP are working on standardizing sensor data
models as steps toward semantic data annotation[18]. In process of solving the data model
interoperability problem in IoT silos, these efforts are advancing in direction of creating silos
around these protocols, where these data models are protocol centric and incompatible with other
data models.
Semantic annotation of sensor data by utilizing a standard mechanism and vocabulary can
provide interoperability between IoT vertical silos. Semantic Web community has created and
optimized standard ontologies for sensor observation, description, discovery and services via
O&M, SensorML, SOS and SSN. By integrating these annotated data and providing Semantic
Web enabled messaging interface, a third party service can convert heterogeneous sensor
observations to higher level abstractions[19].
Figure 5: Proposed IoT architecture with Semantic Gateway.
Because gateway nodes have sufficient computational resources, we can implement necessary
technologies to provide interoperability. Similarly, utilizing semantic technologies at the service
level can also enable interconnection between them. We propose the concept of Semantic
Gateway as Service (SGS) as a bridge between sink nodes and IoT services. In the proposed
semantic IoT architecture, the gateway acts as the center of data communication between the
physical-world and the Cloud. This architecture can be categorized as a Semantic Service
Oriented Architecture (SSOA) for IoT systems as it fulfills technical requirements such as
service-oriented architecture, standard based design, and semantic-based computing leveraging
application agents to autonomously interpret sensor data and interact mutually [20][21].
The sink nodes can be connected to each other in a mesh or a hierarchical topology with wired or
wireless connection. A node in the topology acts as the endpoint and connects to the gateway
using CoAP, XMPP or MQTT protocol. Due to the lower processing capabilities of the sink
nodes, they can be only utilized as clients. The CoAP protocol provides data in JSON or XML
format while the MQTT only support XML. The data transferred from the sink nodes to the
gateway is in raw format without any semantic annotations. As described in Figure 5, the SGS
provides interfaces to Application services via REST and publisher/subscriber based protocols.
The data is semantically annotated at the gateway and hence these services can exploit the sensor
information for further analysis.
This architecture is well suited to addresses privacy issues by allowing the users to control sensor
data at the gateway, and hence may make it more acceptable. The gateway also implements high
security standards by letting user specify the public and private sensor features, where private
sensor features are only accessible after secure authorization using OAuth.
4. Semantic Gateway as Service (SGS)
The heart of the semantic IoT architecture is the SGS, which bridges low level raw sensor
information with knowledge centric application services by facilitating interoperability at
messaging protocol and data modeling level. The description below is complemented by Open
Source code available at https://github.com/chheplo/node-sgs which is further being enhanced and
evaluated in the context of CityPulse (http://www.ict-citypulse.eu/), a large multi-institutional EU FP7
supported project along with an effort for additional community engagement and development.
Figure 6: SGS architecture.
The SGS has three core components as described in Figure 6: (1) multi-protocol proxy, (2)
semantic annotation service, and (3) gateway service interface. The SGS also has components for
required capabilities such as message store and topics router, which assist multi-protocol proxy
and gateway service interface in translation between messaging protocol. At a high level, SGS
architecture connects external sink nodes to the gateway component using primitive client
agents, which support MQTT, XMPP or CoAP. In contrast, the gateway service interface
connects cloud services or other SGSs via REST or pubsub protocol. Before raw sensor data is
forwarded from proxy to gateway interface, it is annotated using SSN and domain specific
ontologies. Although the semantically annotated data is in RDF format at the multi-protocol
proxy, the gateway interface converts the data into JSON, specifically linked data (JSON-LD)
format to support RESTful protocols.
5. Multi-protocol proxy
Figure 7: Multi-protocol proxy, communicating with sensor nodes.
The multi-protocol proxy is the SGS component facing the physical-world. Due to computation
capability constrains, the sink level sensor nodes can support messaging protocols only as clients
with limited support. CoAP is an optimized REST protocol for sensor applications, which
supports request/response and resource/observer architecture. MQTT is a telemetry protocol and
uses the publisher/subscriber (pubsub) model, where publisher manages list of resources also
known as ‘topics’ and subscriber can register to ‘topics’ to obtain information when an event
occurs. Similarly, XMPP is extended to implements pubsub model, which implements resources
as ‘nodes’ instead of topics[22]. The SGS architecture provides interfaces to all sink level
clients, by supporting these protocols via multi-protocol proxy. Similarly on the other side, the
multi-protocol proxy is connected to the gateways as service, which is the Internet facing
component of the SGS.
The translation of messages between sink nodes and Internet services is not required when ends,
where data is produced and where data is consumed, implement identical messaging mechanism,
either REST or pubsub. In cases where the client and server devices have different messaging
mechanism, the translation of the message is mandatory at the gateway. The multi-protocol
proxy solves the message translation problem via introducing two additional components,
message stores and topic router. Each meaningful state of sensor information or resources are
described as topics and managed by the topic router, which also tracks publisher and subscriber
of the topic.
Figure 8 shows message translation between a CoAP client and an MQTT subscriber. When the
sensor generates a data or changes its state, the CoAP client sends that change to the SGS as a
POST message, which gets captured by the multi-protocol proxy. The proxy aligns that resource
with appropriate topic from the topic router and fetches the list of subscriber. The proxy then
forwards that message to these subscribers after passing through semantic annotation block.
Figure 8: Message translation from CoAP client to MQTT service.
Figure 9 shows the translation of messages between a MQTT publisher and REST interface. In
this translation process, the message store component is used to buffer the latest message from
the publisher to supplement GET request received from the REST interface. The multi-protocol
proxy thus solves one of the major interoperability problems at messaging level.
The modular approach of the framework leads to an extensibility, providing interoperability for
other IoT protocols such as Advanced Message Queuing Protocol (AMQP) and Data Distribution
Service (DDS).
Figure 9: Message translation from MQTT publisher to REST interface
6. Semantic data annotation
Figure 10: Semantic data annotation of sensor messages
The semantic annotation service component process each sensor message received from the sink
node before forwarding it further to gateway interface. The annotation process provides
standardization at three levels: (1) service description and discovery, (2) sensor and observation
description, and (3) domain specific descriptions.
The services based on SOS utilize O&M and SensorML data annotation standards for service
description. The SGS annotates the raw sensor data using these OGC standards. This annotation
is required for service-oriented systems and for systems to be dynamically discovered by other
services. The annotation using OGC standards is optional where number of resources being used
are known and well defined.
The semantic sensor and observation description are provided using SSN ontology after
annotated with OGC standards. As the primary data model of the proposed architecture, each
message is annotated with sensor description using SSN ontology. The semantic sensor
description helps other software agents to operate at the level of semantic abstraction, further
enabling processing and reasoning over the data[23]. Figure 11 shows a graph describing a
temperature sensor observation using various components of SSN ontology.
Figure 11: An example of resource graph for single instance of temperature reading
For various domain specific applications such as health care, farming, and environmental
monitoring, the SGS can be equipped with optional domain specific ontologies. These ontologies
describe domain specific concepts to service elements. In a system, which utilizes domain
specific ontologies, the SGS is required to communicate those specific ontologies to participating
service or other SGSs.
7. Gateway service interface
Figure 12: Gateway as service architecture
The gateway service is the primary component of the SGS concept as it establishes gateway as
the center of the semantic IoT architecture. This component provides service level
interoperability for vertical silos of IoT applications keeping physical level implementation
independent of cloud based service architecture. The SGS provides endpoint to services using a
resource interface via REST and publisher/subscriber mechanism. The MQTT and XMPP
protocols are supported via implementing a micro broker in the resource interface. Thus various
services can implement response/request and publisher/subscriber mechanism via the SGS
component to obtain semantically annotated sensor data. The SGS also provides a layer security
via implementing OAuth 2.0 authentication server, which let user decide the private and public
resources. Figure 12 shows the gateway service component of the overall SGS architecture,
which establishes connectivity between the SGS and higher-level cloud based IoT services.
The cloud based IoT services can be used to provide higher-level knowledge abstractions from
the raw sensor data. Various services such as Xively and ThingSpeak provide data analysis and
visualization over the collected sensor data but lack implementation of any semantic standards.
The semantic annotation of the sensor data obtained from the SGS assists the IoT services to
implement analysis and reasoning algorithms. One of the examples of semantic service is the
SemSOS implementation, which models sensor and sensor observations utilizing OGC
standards[16] with a semantic backend. The SemSOS utilize SSN ontology SSN ontology to
model sensors and their observations allowing the implementation of a Semantic reasoner.
Figure 13 shows implementation of SemSOS service connected with multiple SGS gateways via
Internet. The figure also shows extended version of SemSOS implementation, which includes
SSN and domain ontologies to infer sensor description, obtained from SGS implementations.
The extended SemSOS can subscribe to the semantic gateways for specific sensor information
via selected topics.
Figure 13: Higher-level IoT service - SemSOS.
The semantic annotation using SSN standardizes sensor data making it machine interpretable and
thus enabling Machine-to-Machine (M2M) communication. Once data is semantically annotated,
various Semantic Web tools can also enable reasoning and higher-level knowledge discovery
over sensor data. As the SGS implemented OGC schemas before annotating the sensor data with
SSN, the SGS can also provides resource discovery and descriptions/specification for services
such as SemSOS. In summary, the sensor data obtained from the multiple SGS is annotated with
the standard ontologies enabling service level interoperability.
8. Conclusion
Interoperability is one of the major challenges in achieving the vision of Internet of Things. The
SGS provides intelligent solution by integrating Semantic Web technologies with existing sensor
and services standards. The SGS also provides mechanism to integrate popular IoT application
protocol, CoAP and MQTT, to co-exist in a single gateway system. The SGS is integrated with
semantic service such as SemSOS to further elevate interoperability at service level. Such a
semantic IoT infrastructure can better enable realization of applications spanning the physical
world (as observed by IoT), cyberworld (with its rapidly growing data and knowledge about
everything in the world, spanning community created Wikipedia to Linked Open Data and
repositories of ontologies, as well as its ability to collect and interoperate with all forms of data),
and the social world (supporting activities and needs of a person to collective social actions)
[24].
Acknowledgements: We acknowledge collaboration with and inputs from the members of EU
FP7 project CityPulse http://www.ict-citypulse.eu/ .
References
[1] D. Lake, A. Rayes, and M. Morrow, “The Internet of Things,” Internet Protoc. J., vol. 15, no. 3,
Dec. 2012.
[2] C. Bormann, “Coap: An application protocol for billions of tiny internet nodes,” Internet Comput.
IEEE, 2012.
[3] M. Kirsche and R. Klauck, “Unify to bridge gaps: Bringing XMPP into the Internet of Things,”
2012 IEEE Int. Conf. Pervasive Comput. Commun. Work., no. March, pp. 455–458, Mar. 2012.
[4] U. Hunkeler, H. L. Truong, and A. Stanford-Clark, “MQTT-S — A publish/subscribe protocol for
Wireless Sensor Networks,” 2008 3rd Int. Conf. Commun. Syst. Softw. Middlew. Work.
(COMSWARE ’08), pp. 791–798, Jan. 2008.
[5] Robert L. Szabo and K. Farkas, “Publish/Subscribe Communication for Crowd-sourcing Based
Smart City Applications,” in ICTIC - Proceedings in Conference of Informatics and Management
Sciences, 2013, no. 1.
[6] O. Bergmann, K. T. Hillmann, and S. Gerdes, “A CoAP-gateway for smart homes,” 2012 Int.
Conf. Comput. Netw. Commun., pp. 446–450, Jan. 2012.
[7] R. Pillai, S. Elias, S. Shivashankar, and P. Manoj, “A REST Based Design for Web of Things In
Smart Environments Department of Information Technology,” in 2012 2nd IEEE International
Conference on Parallel, Distributed and Grid Computing, 2012, no. i, pp. 337–342.
[8] G. Kortuem, F. Kawsar, D. Fitton, and V. Sundramoorthy, “Smart objects as building blocks for
the Internet of things,” IEEE Internet Comput., vol. 14, no. 1, pp. 44–51, Jan. 2010.
[9] S. Bandyopadhyay and A. Bhattacharyya, “Lightweight Internet protocols for web enablement of
sensors using constrained gateway devices,” 2013 Int. Conf. Comput. Netw. Commun., pp. 334–
340, Jan. 2013.
[10] OpenIoT, “http://www.openiot.eu/.” .
[11] Allseen Alliance, “https://www.allseenalliance.org.” .
[12] IPSO Alliance, “http://www.ipso-alliance.org.” .
[13] G. Percivall, C. Reed, and J. Davidson, “OGC Sensor Web Enablement : Overview And High
Level Architecture,” OGC White Pap., no. December, pp. 1–14, 2007.
[14] K. eds. Lefort, L., Henson, C., and Taylor, “Semantic Sensor Network XG Final Report,” 2011.
[Online]. Available: http://www.w3.org/2005/Incubator/ssn/XGR-ssn/.
[15] M. Compton, P. Barnaghi, L. Bermudez, R. García-Castro, O. Corcho, S. Cox, J. Graybeal, M.
Hauswirth, C. Henson, A. Herzog, V. Huang, K. Janowicz, W. D. Kelsey, D. Le Phuoc, L. Lefort,
M. Leggieri, H. Neuhaus, A. Nikolov, K. Page, A. Passant, A. Sheth, and K. Taylor, “The SSN
ontology of the W3C semantic sensor network incubator group,” Web Semant. Sci. Serv. Agents
World Wide Web, vol. 17, pp. 25–32, Dec. 2012.
[16] C. a. Henson, J. K. Pschorr, A. P. Sheth, and K. Thirunarayan, “SemSOS: Semantic sensor
Observation Service,” 2009 Int. Symp. Collab. Technol. Syst., pp. 44–53, 2009.
[17] A. Sheth, C. Henson, and S. S. Sahoo, “Semantic Sensor Web,” IEEE Internet Comput., vol. 12,
no. 4, pp. 78–83, Jul. 2008.
[18] P. Waher, “XEP-xxxx: Sensor Data Interchange over XMPP.” [Online]. Available:
http://xmpp.org/extensions/inbox/sensor-data.html.
[19] H. Patni, C. Henson, and A. Sheth, “Linked sensor data,” 2010 Int. Symp. Collab. Technol. Syst.,
pp. 362–370, 2010.
[20] M. Deriaz and G. Serugendo, “Semantic service oriented architecture,” Switz. Univ. Geneva, 2004.
[21] A. Haller, J. M. Gomez, and C. Bussler, “Exposing Semantic Web Service principles in SOA to
solve EAI scenarios.”
[22] P. Millard, P. Saint-Andre, and R. Meijer, “XMPP Extension XEP-0060: Publish-Subscribe.”
XMPP Standards Foundation, 12-Jul-2010.
[23] C. Henson, A. Sheth, and K. Thirunarayan, “Semantic Perception: Converting Sensory
Observations to Abstractions,” IEEE Internet Comput., vol. 16, no. 2, pp. 26–34, Mar. 2012.
[24] A. Sheth, P. Anantharam, and C. Henson, “Physical-Cyber-Social Computing: An Early 21st
Century Approach,” IEEE Intell. Syst., vol. 28, no. 1, pp. 78–82, Jan. 2013.
DOI: 10.4018/IJBAN.2020100101
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
﻿
Copyright © 2020, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.
﻿
1
Semantic Annotation of Web of
Things Using Entity Linking
Ismail Nadim, Ibn Tofail University, Faculty of Sciences, Kenitra, Morocco
https://orcid.org/0000-0002-2208-3375
Yassine El Ghayam, SMARTiLab, EMSI Rabat Honoris Universities, Morocco
Abdelalim Sadiq, Ibn Tofail University, Faculty of Sciences, Kenitra, Morocco
https://orcid.org/0000-0003-1478-8807
ABSTRACT
The web of things (WoT) improves syntactic interoperability between internet of things (IoT) devices
by leveraging web standards. However, the lack of a unified WoT data model remains a challenge
for the semantic interoperability. Fortunately, semantic web technologies are taking this challenge
over by offering numerous semantic vocabularies like the semantic sensor networks (SSN) ontology.
Although it enables the semantic interoperability between heterogeneous devices, the manual
annotation hinders the scalability of the WoT. As a result, the automation of the semantic annotation
of WoT devices becomes a prior issue for researchers. This paper proposes a method to improve the
semi-automatic semantic annotation of web of things (WoT) using the entity linking task and the
well-known ontologies, mainly the SSN.
Keywords
Dbpedia, Disambiguation, Internet of Things, IoT, Knowledge Base, Ontology, Probabilistic Model, Sensor, SSN
INTROD UCTION
The Internet of Things (IoT) can be viewed as the extension of the current Internet to more things and
places in the physical world. The efficient connection of these things facilitates the creation of useful
applications and services in numerous domains such as: transport and logistics, health, agriculture
etc.However, the IoT is facing numerous challenges such as the interoperability which means that the
integration of data and services from various devices- on a large scale- is extremely complex and costly.
In order to improve the interoperability between Internet of Things (IoT) devices, the Web of
Things (WoT) publishes the devices capabilities on the Web in form of Web APIs. Indeed, connecting
heterogeneous devices to the web makes the integration across systems and applications much simpler.
This Web of Things vision allows a syntactic interoperability between devices and make easy the
consumption of WoT services. However, the ambiguity of WoT data and the lack of a standardized
and unified machine readable and clear semantics model hinder the semantic interoperability
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
2
(Guinard, Trifa, Mattern, & Wilde, 2011). In addition to this, the WoT provides the interoperability
at only the hardware and communication protocol level and does not add intelligence to the things or
facilitate unambiguous interpretation of their data (De, Zhou, & Moessner, 2017). In contrast, service
description, common practices, standards and discovery mechanisms should be interoperable to allow
interactions between different objects (Elkhodr, Shahrestani, & Cheung, 2017). Thus, the semantic
interoperability is essential to build a scalable WoT network because applications have to easily find
and understand the WoT devices just by using their URLs. To reach this goal, the different WoT
devices have to share - not only a unified syntactic form like Json or Xml- but a unified vocabulary
with clear semantics as well. The process of describing WoT devices with such vocabulary is known
by the semantic annotation.
The Web semantic technologies like RDF and OWL offer a framework to represent rich and
complex knowledge about things, groups of things, and relations between things in a machine
understandable form. These technologies have simplified a lot the sharing of semantic vocabularies
like the vocabulary described by the Semantic Sensor Network (SSN) ontology (Compton et al.,
2012). However, a large domain like the Web of Things needs to be open on a large knowledge from
different domains. As a result, automating the semantic annotation process becomes a common goal
for researchers to keep up the permanent development of WoT knowledge.
The automatic semantic annotation is usually preceded by the famous Entity linking (EL) task.
EL task consists in linking a piece of data called mention from a source document to the entity it
represents in a knowledge base (KB) through three steps. Given a source document, the first step is
the detection of the mentions to be annotated. Once the mentions are defined, the second step consists
in generating a set of candidate entities for each mention. Finally, to be able of selecting the correct
entity of a mention a third step is necessary: the disambiguation. The disambiguation consists in
ranking the discovered candidate sets using some features (Shen, Wang, & Han, 2015) in order to
map each mention to the entity it represents the best in the KB.
In this paper, the authors focus on the disambiguation task. Specifically, they propose a collective
disambiguation approach through a probabilistic graphical model which takes advantage of different
types of features (in particular the semantic relatedness between candidate entities) in order to improve
both the accuracy and the efficiency of the semantic annotation of WoT data. The approach aims to
annotate a WoT table that is to say WoT data stored in form of Web table (header and cells).
The remaining of this paper is organized as follows: Section 2 presents the problem description
and the requirements. Section 3 presents some related works. Section 4 details and discusses the
proposed approach and Section 5 concludes this paper.
PROBLEM DESCRIPTION AND REQUIREMENTS
Within this first section, the authors explains formally the entity linking task and shed light, particularly,
on the importance of the features it uses. Formally, given a text document D, a knowledge base KB
and N mentions M={m1 , m2 ,...,mN }, M⊂ D. The EL task consists in identifying a set of entities
E ={ e1 , e2 ,..., eN }, E ⊂ KB such as: ei represents the referent entity of the mention mi , i∈[1,N].
In general, for a given mention, several candidate entities may be generated when querying the
KB. Fortunately, there are a set of features (statistics) that could be used for the disambiguation task
such as:
• String similarity: indicates how similar is the query mention to the title of the candidate entity.
• Prior Popularity: indicates how “famous” is a candidate entity in the KB.
• Entity Type: indicates the coherence between the mention and the candidate entity types (location,
person, etc..).
• Context: indicates how similar is the contextual texts of the mention and the candidate entity.
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
3
• Semantic coherence: measures the semantic relatedness between the candidate’s entities
The features above can be categorized in three categories: (1) the context-independent features
which rely basically on the surface form of the mention and the candidate entities, (2) the local
context-dependent features which take into consideration the local context in which the mention
appears and (3) the global context-dependent features which means the semantic relatedness between
entities. Many disambiguation approaches have been proposed, as will be mentioned on the related
works section. However, only few initiatives have combined these three types. Two disambiguation
approaches are worth noting here:
• Local disambiguation: this approach ranks the candidate entities using some context-independent
features as well as some local context features. After that, the best ranked entities are mapped to
their corresponding mentions. However, this approach doesn’t consider the interdependencies
between the candidate entities.
• Global or collective disambiguation: considers that the correct disambiguation entities are not only
the most similar to their corresponding mentions but further are the most “coherent” concepts. In
most cases, this approach leverages the local and the global context-dependent features without
considering the context-independent ones.
Accordingly, the collective disambiguation approach can be used to improve the accuracy of the
entity linking task on Web tables. Indeed, considering the global context of the mentions - which means
the semantic relatedness between their candidate entities- may increase the likelihood of choosing the
correct mapping entities, especially because relational data tend to be semantically related. However,
the local approach is still providing a baseline which is very hard to beat (Ratinov, Roth, Downey, &
Anderson, 2011). The combination between these two approaches seems to be a promising solution.
In addition, the context independent features like surface form similarities, entity popularity and
entity type are also significantly important for the EL task, Shen et al. (2015) reported that a naive
candidate ranking method only based on the Web popularity can achieve 71% accuracy. The surface
form similarity and the entity type features are also important since they help to capture the most
probable entities to link the mention while maintaining a small set of candidates. Despite this, the
authors have noted that few initiatives take this type of features into account during the collective
disambiguation. Consequently, the main aim of this paper is to improve the EL task accuracy through
a collective disambiguation method that takes advantage of different types of features. This early
work toward the development of a semantic knowledge base framework is guided by similar works
on EL task and knowledge engineering. In what follows some of these works are stated.
RELATED WORK
The ultime goal behind using the Entity Linking task is to automate the process of the semantic
annotation. This automation should however take into account the choice of the best features to ensure
the accuracy of the task. Besides, it should consider the computation time and the convergence of the
EL task algorithms. In this section, the authors focus on giving some related works.
During the last years, alternative approaches for semantic annotation using the Entity Linking
task and the collective disambiguation were proposed. For intance, Han et al. (2011) have proposed a
global interdependence model to link mentions from text document. The proposed method leveraged
the local context features, then the semantic relation between entities. Similarly, Rong et al. (2016)
have used three features in their graphical model: the local similarities, the semantic relatedness and
the prior popularity of a candidate entity. Although, they have added this context-independent feature
to reinforce the collective disambiguation, the authors have used the Normalized Google Distance
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
4
(Cilibrasi, & Vitanyi, 2007) to measure the semantic coherence just between entities and the remaining
name mentions in the same document and not between each pair entities. This consideration which
can save a large amount of calculation, may affect the final accuracy of the EL task. Ganea et al.
(2016) have conducted a probabilistic approach which consists in learning a conditional probability
model from data and employing approximate probabilistic inference in order to find the maximum
a posteriori (MAP) assignment (Koller, & Friedman, 2009). The authors have not considered any
additional context-independent feature. Ratinov et al. (2011) have conducted both a local and global
disambiguation to Wikipedia articles. The authors have leveraged a relatedness measure to calculate
the semantic relatedness between Wikipedia entities. However, they have not mentioned the use of
the context independent features in their approach.
As far as the tables annotation is concerned, Limaye et al. (2010) have used a probabilistic method
to annotate web table columns and cells values with entities (persons, organizations, locations, etc.).
In addition, they have used the table content (headers and data rows), and also some amount of
textual context around table as a context feature. Recently, Wu et al. (2016) have provided a unified
WoT Knowledge Base construction framework, and used it to annotate two types of data: plain and
formatted. They have leveraged semi-automatic annotation to annotate web tables. The EL framework
they have proposed, annotates entities, types and relations using features from (Mulwad, Finin, Syed,
& Joshi, 2010). The authors (Mulwad et al., 2010) have used a probabilistic graphical model to manage
a collective disambiguation. To infer the best disambiguation entities, they have finally adopted an
iterative message passing algorithm from (Mulwad, Finin, & Joshi, 2013).
According the aforementioned related works, a categorization and reorganization of the features
used by the entity task seems necessary to take the most of them. In addition to this, the semantic
annotation of a formatted document may help to improve the task accuracy. Therefore, the authors
assume that the WoT data to be annotated are presentable as a two-dimensional table.
PROPOSED APPROACH
In this section, the authors present their collective disambiguation approach. Firstly, the approach
combines both local context-dependent and context-independent features in a local disambiguation.
Secondly, the outputs of this local disambiguation is combined with a semantic relatedness measures
to perform a global disambiguation. The approach is applied to a simple WoT table modeled as a
probabilistic graph. An inference method is finally used to select the mapping entities leveraging a
loopy message passing algorithm.
Schema Annotation
The WoT devices data can be represented as WoT tables. The approach proposes a manual annotation
of the header (schema or keys) and an automatic annotation of the cells (values).
The manual annotation of the header is based on two assumptions: (1) the manual annotation is
not anymore a tedious task when the number of the data to be annotated is reasonable (2) the manual
annotation is safer when the data to be annotated are used as an important context to annotate other
data. For example: the location (place), the type (sensor, actuator), the property observed or acts on,
the unit of measurement, the value of properties for a given WoT device are important contextual
data. The complete manual annotation of these data may guarantee a well construction of the KB, and
helps in search and mash ups (Mulwad et al., 2010). For the moment, the first step is to determine
the semantic vocabulary to use for annotating WoT devices.
Numerous conceptual models have been proposed to model devices using generic vocabularies,
but no standard is yet defined: Hachey et al. (2013) grouped high-level concepts and their relations
that describes three examples of real devices. CG1: Actuator, Sensor, System, CG2: Global and Local
Coordinates, CG3: Communication Endpoint, CG4: Observations, Features of Interest, Units, and
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
5
Dimensions, CG5: Vendor, Version, Deployment Time. Mulwad et al. (2010) formalized that typical
semantic triples in IoT scenarios as: Sensor- observes Observation, Observation-Generates-Event,
Actuator-Triggers-Action, Action-Changes-Observation (State), Object Locates-Location and Ownerowns-
Object. Guinard et al. (2011) proposed the web of things model which is a conceptual model
of a web Thing that can describe the resources of a web Thing using a set of well-known concepts.
The authors specified four resources to describe a web thing: Model, Properties, Actions and Things.
As can be noted, the ontology modelling efforts have largely concentrated on the WoT objects
like sensors while other important elements like actuators, produced data, services, localization and
domain ontologies should require also the same attention. Besides, the existence of different ontologies
modelling the same knowledge domain like units of measurement or localization require alignment
techniques to determine the correspondences between the concepts in these ontologies. For simplicity
purposes, the authors propose a four components to model a WoT device.
In general, the key elements of a WoT device can be formalized as follows: System which is
The WoT device and its meta-data, Sensors which are the sensors of the system and its meta-data
and Actuators which represent the actuators of the system and its meta-data. And service which is
the service offered by the device.
The components in Figure 1 summarizes the key concept of WoT devices:
• System: System is used here to represent the WoT device which may have subsystems mainly
sensors and actuators. A system has several meta-data (name, description, manufacturer, owner
…) which can be considered as a product meta-data from schema.org/Product. A system has also
a location which indicates simply its deployment place or its Geo-coordinates.
• Sensor: is a subsystem of a System that can observes some property.
• Actuator: is a subsystem of a System that can acts on some property.
• Service: the service offered by the device. The service allows the control and the monitoring of
the devices by capturing the sensing data or submitting actuating actions.
Figure 1. Key concepts of a WoT device
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
6
The manual annotation can be performed using a predefined mapping file which contains the
mapping between the different concepts to annotate and their corresponding concepts from ontologies
(SSN, SAN, Schema.org...). The data of these four elements can be stored in form of WoT tables
(columns and cells). An example of such table is shown in Figure 2.
After annotating the WoT schema (table header) manually with the appropriate entities and
properties from ontologies (e.g. “Location” which means the location of the device is annotated
manally by the entity type “http://dbpedia.org/ontology/Place”). The next step is to annotate the
content of the cells. As already mentioned, the authors use the Entity Linking task to automate this
process because of the huge number of WoT data contained in the WoT tables. For this end, they first
query the knowledge base (Dbpedia, …) to generate initial candidate entities sets. After that, they
rank in a local disambiguation the generated sets using some features. Finally, they use - through a
global disambiguation - a probabilistic graphical model to infer the best combinations of the candidate
entities. In what follows, these two disambiguation methods are described.
Local Disambiguation
The search or the candidate entity generation is the process of generating a set of candidate KB entities
for a mention. According to Hachey et al. (2013), this process is as important as the disambiguation
task since it should capture the most probable entities to link the mention while maintaining a small
set of candidates.
To improve the search task, the authors generate the initial sets of candidate entities for each cell
mention by performing a string comparison between the surface form of the entity mention and the
Figure 2. A WoT device in form of WoT table
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
7
name of the entity existing in the KB. Then, by using the table header which is already annotated as
context when querying the KB.
The example bellow (Table 1) shows the result of a Sparql query against Dbpedia to generate
20 top candidate entities to the mention “Rabat”. The example uses the surface form, the entity type
“Place” and the entity popularity to have better results.
The use of these three features is explained below:
• The surface form: the individuals of the knowledge base Dbpedia which contain the string
“Rabat” will be chosen.
• The entity type: the individuals which have the entity type “http://dbpedia.org/ontology/Place”
will be privilegied.
• The entity popularity: the filtred individuals and which are the best ranked -in terms of presence
in the knowledge base- will be chosen. For example, the candidate “http://dbpedia.org/resource/
Rabat” having the rank 41.0279 has more chance to be the reference entity of the mention “Rabat”
than the candidate “http://dbpedia.org/resource/Victoria,_Gozo” which has only the rank 4.6521.
Once the candidate entities set is generated for each mention, these initial lists are ranked using
the following features:
• By measuring the surface form similarity between the mention and the entity, using features
from (Mulwad et al., 2010).
• By measuring the context similarity between the mention and the candidate entities. For that, a
relevant context is created for the mention from the text surrounding it, and from the description
of the column headers. The context of each candidate entity is extracted from its text description.
Then, the bag of words model can be used to represent the contexts as vectors. Finally, the cosine
similarity (Equation 1) is used to measure the similarity between these vectors.
cosine(m,e) =
m e
m e
*
*
(1)
Table 1. Example of Sparql query and its result
PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>﻿
PREFIX dbo:<http://dbpedia.org/ontology/>﻿
PREFIX vrank:<http://purl.org/voc/vrank#>﻿
SELECT ?p ?c ﻿
FROM <http://dbpedia.org> ﻿
FROM <http://people.aifb.kit.edu/ath/#DBpedia_PageRank> ﻿
WHERE {﻿
?p rdf:type dbo:Place.﻿
?p vrank:hasRank/vrank:rankValue ?c.﻿
?p rdfs:label ?x .﻿
?x bif:contains “(Rabat)” .﻿
Filter regex (str(?p),”resource”).﻿
}﻿
ORDER BY DESC(?c) LIMIT 20
http://dbpedia.org/resource/Rabat 41.0279﻿
http://dbpedia.org/resource/Rabat 41.0279﻿
http://dbpedia.org/resource/Rabat 41.0279﻿
http://dbpedia.org/resource/Rabat 41.0279﻿
http://dbpedia.org/resource/Rabat 41.0279﻿
http://dbpedia.org/resource/Rabat 41.0279﻿
http://dbpedia.org/resource/Rabat 41.0279﻿
http://dbpedia.org/resource/Rabat 41.0279﻿
http://dbpedia.org/resource/Victoria,_Gozo 4.6521﻿
http://dbpedia.org/resource/Victoria,_Gozo 4.6521﻿
http://dbpedia.org/resource/Victoria,_Gozo 4.6521﻿
http://dbpedia.org/resource/Rabat,_Malta 4.23087﻿
….
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
8
where the mention m and the entity e are represented as vectors of their context. Alternatively, some
frameworks can be used like Word2Vec which is able to guess the similarity between two words
based on their contexts, or Wiki2Vec that generates vectors for DBpedia entities via Word2Vec and
Wikipedia Dumps.
• By considering the popularity of each entity for example the entity PageRank.
These features are computed for each candidate entity and a SVM (Support vector machine)
classifier is used to rank the candidate entities for a given mention. The final result of the local
disambiguation is a set of ranked candidate entities. The different steps of this process are summarized
in the algorithm (Table 2) below:
Global Disambiguation
As mentioned before, the main goal of the local disambiguation process is to take the most of the
context-independent features as well as the local context ones in order to get the most relevant sets
of candidate entities. However, only one candidate entity should be chosen in each candidate set.
Consequently an inference process should be done which is the global disambiguation.
The author’s approach consists in using a global disambiguation through a probabilistic graphical
model (Koller et al., 2009). The idea behind using a collective disambiguation is that the entities in
a given row or column of a table tend to be related. This relation can be represented mathematically
through a probabilistic graphical models. For this reason, the authors represent the table cells as a
Markov Network Graph (MNG) (Koller et al., 2009) such as the cells mentions represent the variable
nodes and the relatedness between them represent the graph edges. To capture the dependency between
a variable node (circle) and its neighbors a factor node (square) ψ is defined.
Table 2. Local disambiguation algorithm
Algorithm 1: Local disambiguation
Input: M= m ,m ...,m the KB 1 2 N { , },
Output: Indexed and ranked entities list L .
1: Let SVM be a SVM classifier.﻿
2: For each m M do
3: Query KB to get an initial, not null, candidate entities set Im for the mention m.
4: For each I ∈ Im do
5: Create a feature vector VI .
6: Calculate and store features (surface form, popularity, context similarity etc.) in VI .
7: Input VI to SVM.
8: End For﻿
9: GetLm : the SVM output list.
10: AddLm to L .
11: End For
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
9
In Figure 3, the circles represent the variables and the squares represent the factor nodes of
the MNG.
• ψ estimation
The ψ function can be defined as the product of two functions: R(a,b) representing the score
of two candidate entities a and b in the local disambiguation, and SR(a,b) measuring the semantic
relatedness between a and b.
• R(a,b): as previously seen, the output of the local disambiguation algorithm (Table 2) is a list
of indexed and ranked entities.
Let Ra and Rb be the respective rank scores of the candidate entities a and b. The authors define
the rank score of a and b as the average of their rank scores: R(a,b)=
Ra b +R
2
.
• SR(a,b): The Milne and Witten (equation 2) (Milne et al., 2008) equation is leveraged to measure
the semantic relatedness.
SR(a,b)=1-
log max log
log log min
A B A B
W A B
,
,
( ( ))− (  )
( )− ( ( )) (2)
where a and b are two Wikipedia (or Dbpedia) entities, A and B are the sets of all entities that link to
a and b in Wikipedia (or Dbpedia) respectively, and W is the entire Wikipedia (or Dbpedia) entities.
Consequently, the function ψ can be defined as follows: ψ(a,b)= R(a,b) x SR(a,b)
And the set of mapping entities E can be determined by equation 3:
Figure 3. WoT table represented as a Factor Graph
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
10
j=1,
,e
j i
N
i j e

 ( ), i∈ [1, N] (3)
• Graph inference
After defining the aim of the graph (equation 3), the problem to face is a computation one. Usually,
to face the inference problem of high connected graphs the message passing algorithm - which is an
approximate algorithm for graphs with loops -is used. The approach adopts a variation of this algorithm
used by Mulwad et al. (2013) to avoid the pre-computation of the probability distribution tables
which is costly. A brief description of the global disambiguation algorithm is given below (Table 3).
Table 3. Global disambiguation algorithm
Algorithm 2: Global disambiguation
Input: The list L (Output of Algorithm 1), A maximum of iterations MaxIter, An agreement threshold T, A factor graph
G(X,F) where:X x x xN = { } 1 2 , ,..., is the set of variable nodes and F is the set of factor nodes.
Output: E e e eN = { } 1 2 , ,...,
# Initialize the variable nodes of the graph with candidate entities from the list L: ei,R , i is the mention index, R is the
first ranked candidate score and R-1 is the second ranked candidate score etc.﻿
1. for each x X i  do x e i = i,R end for
2. converge = False, count=0﻿
3. While (converge = False and count < MaxIter) do﻿
4. for each x X i  do
xi sends its current value to all the factors is connected to.
5. end for﻿
6. for all the Factors nodes do﻿
7. If  x T i j ( ,x )  Send a no-change message to nodes xi and xj .
8. Else Send a change message to these nodes.﻿
end for﻿
9. converge = True﻿
10. for each x X i  do
11. Let Msg be the set of messages received by xi .
12. If all m ∈ Msg are no-change do nothing﻿
13. Else x e i = i,R−1 , converge = False
14. end for﻿
15. count = count +1﻿
16. end While﻿
17. If (converge = True) ﻿
18. for each i   N



1, do e x i i = end for
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
11
First the variable nodes of the graph are initialized with the top ranked candidate entities from
the list L. After that, the variable nodes in the graph send their current assignment to the factor nodes
they are connected to. Once the factors receive the values of their neighboring variable nodes, they
calculate the agreement between the received values using the function ψ. To decide if two values
agree or not the result of the function ψ is compared to a threshold T. the value of T can be adjusted
during the implementation of the approach (the higher this threshold is, the better the results after
convergence are). If the value of ψ is higher than the threshold T the variable nodes values are accepted
else, they are rejected and the variables receive a change message to update their assignments. The
algorithm converges when no variable node receives a change message.
DISCUSSION
The authors approach combines both local context-dependent and context-independent features in a
local disambiguation. After that, the outputs of this local disambiguation is combined with a semantic
relatedness measures. An inference method is finally used to select the mapping entities leveraging a
loopy message passing algorithm. The main advantage of this three steps approach is on one hand to
ensure the quality of candidate entities. Effectively, using different features in to generate and rank the
sets of candidate entities increase the probability to get better Entity Linking final result. In addition
to this, the number of the candidate entities can be reduced to a reasonable number (e.g. 20 entries)
without impacting the results quality. Moreover, this small number will decrease the computation
task. However, some remarks are worth to mention here: (1) While the authors justified the use of the
SVM classifier by the small number of entries (just dozens of entries.), the SVM classifier has proven
the ability to handle large dimensions (i.e. high variables). (2) On the other hand, the approach allows
the use of the relation between the cells in a table. For this end, the inference algorithm uses two
thresholds which are the maximum of iterations and the convergence thresholds that must be given as
inputs. While the first threshold can be chosen quit high, the second threshold should be well quantified
because it may affect the convergence of the algorithm. For these remarks, the implementation of the
approach is necessary to validate its efficiency. Moreover, the implementation should be preceded
by a bench-marking study concerning: text processing tools, data Models, knowledge bases, training
data-sets, ranking algorithms, graphical models, test data-sets, baselines, etc. This prior study will
pave the path to an experiment study and a comparative evaluation of the approach.
CONCLUSION
Among the factors that improve significantly the entity linking accuracy, the authors have shed the light
on the involvement of different types of features which are: the context-independent, the local contextdependent
and the global context-dependent features. In this paper, they have proposed a method to
combine these three types of features. First, the authors have conducted a local disambiguation in
which they have reduced the contribution of the used features to a simple ranking score. After that the
authors have combined this ranking score with a semantic relatedness measure in order to perform a
global disambiguation through a probabilistic graphical model. Finally, they have proposed the use
of a loopy message passing algorithm to infer the mapping entities.
This work is a first step towards the construction of a semantic knowledge base framework, the
future step is to perform an experiment study and a comparative evaluation to prove the validity of
the approach.
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
12
REFERENCES
Cilibrasi, R. L., & Vitanyi, P. M. (2007). The google similarity distance. IEEE Transactions on Knowledge and
Data Engineering, 19(3), 370–383. doi:10.1109/TKDE.2007.48
Compton, M., Barnaghi, P., Bermudez, L., Garcca-Castro, R., Corcho, O., Cox, S., … Taylor, K. (2012). The
SSN Ontology of the W3C Semantic Sensor Network Incubator Group. SSRN Electronic Journal.
De, S., Zhou, Y., & Moessner, K. (2017). Ontologies and context modeling for the Web of Things. In Managing
the Web of Things (pp. 3–36). Morgan Kaufmann. doi:10.1016/B978-0-12-809764-9.00002-0
Elkhodr, M., Shahrestani, S., & Cheung, H. (2017). Internet of things research challenges. In Security solutions
for hyperconnectivity and the internet of things (pp. 13–36). IGI Global. doi:10.4018/978-1-5225-0741-3.ch002
Ganea, O.-E., Ganea, M., Lucchi, A., Eickhoff, C., & Hofmann, T. (2016). Probabilistic Bag-Of-Hyperlinks
Model for Entity Linking. Proceedings of the 25th International Conference on World Wide Web - WWW ’16.
doi:10.1145/2872427.2882988
Guinard, D., Trifa, V., Mattern, F., & Wilde, E. (2011). From the Internet of Things to the Web of Things:
Resource-oriented Architecture and Best Practices. Architecting the Internet of Things, 97–129.
Hachey, B., Radford, W., Nothman, J., Honnibal, M., & Curran, J. R. (2013). Evaluating entity linking with
Wikipedia. Artificial Intelligence, 194, 130–150. doi:10.1016/j.artint.2012.04.005
Han, X., Sun, L., & Zhao, J. (2011). Collective entity linking in web text. Proceedings of the 34th International
ACM SIGIR Conference on Research and Development in Information - SIGIR ’11. doi:10.1145/2009916.2010019
Kolchin, M., Klimov, N., Andreev, A., Shilin, I., Garayzuev, D., Mouromtsev, D., & Zakoldaev, D. (2015,
September). Ontologies for Web of things: a pragmatic review. In International Conference on Knowledge
Engineering and the Semantic Web (pp. 102-116). Springer International Publishing. doi:10.1007/978-3-319-
24543-0_8
Koller, D., & Friedman, N. (2009). Probabilistic graphical models: principles and techniques. MIT Press.
Limaye, G., Sarawagi, S., & Chakrabarti, S. (2010). Annotating and searching web tables using entities, types
and relationships. Proceedings of the VLDB Endowment International Conference on Very Large Data Bases,
3(1-2), 1338–1347. doi:10.14778/1920841.1921005
Mulwad, V., Finin, T., & Joshi, A. (2013, October). Semantic message passing for generating linked data from
tables. In International Semantic Web Conference (pp. 363-378). Springer. doi:10.1007/978-3-642-41335-3_23
Mulwad, V., Finin, T., Syed, Z., & Joshi, A. (2010, November). Using linked data to interpret tables. In Proceedings
of the First International Conference on Consuming Linked Data-Volume 665 (pp. 109-120). Academic Press.
Ratinov, L., Roth, D., Downey, D., & Anderson, M. (2011, June). Local and global algorithms for disambiguation
to wikipedia. In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics:
Human Language Technologies-Volume 1 (pp. 1375-1384). Association for Computational Linguistics.
Rong, S., & Iwaihara, M. (2016). A collective approach to ranking entities for mentions. 2016 IEEE/ACIS 15th
International Conference on Computer and Information Science (ICIS).
Shen, W., Wang, J., & Han, J. (2015). Entity Linking with a Knowledge Base: Issues, Techniques, and Solutions.
IEEE Transactions on Knowledge and Data Engineering, 27(2), 443–460. doi:10.1109/TKDE.2014.2327028
Wu, Z., Xu, Y., Zhang, C., Yang, Y., & Ji, Y. (2016). Towards Semantic Web of Things: From Manual to
Semi-automatic Semantic Annotation on Web of Things. Lecture Notes in Computer Science, 9784, 295–308.
doi:10.1007/978-3-319-42553-5_25
International Journal of Business Analytics
Volume 7 • Issue 4 • October-December 2020
13
Ismail Nadim obtained his Bachelor’s Degree on mathematical sciences in 2007 from Sijilmassa High School,
Errachidia, Morocco. He is an engineer in computer sciences from the National School of Mineral Industry of Rabat,
Morocco. He graduated in 2013 and continues his studies in the doctoral cycle at the Ibn Toufail University of
Kénitra. He is a professor of Computer Sciences in Engineering School (EMSI-Rabat) where he teaches relational
databases and programming. His domain of study is Web semantic, Internet of Things, Web of Things, data
sciences as well as artificial intelligence. Ismail is also a senior SQL Server and Oracle database administrator.
Yassine El Ghayam currently works at the SMARTiLab, EMSI-RABAT. Yassine did research in Software Engineering
and Artificial Intelligence. He obtained a PhD degree in 2011 in the subject of Teleconferencing systems in a mobile
environment, from National School of Computer Science and Systems Analysis (ENSIAS) of Rabat, Morocco.
He is a professor of Computer Sciences in Engineering School (EMSI-Rabat) where he teaches programming,
databases, information systems modelisation, etc. His domain of study is Web semantic, Internet of Things, Web
of Things, data sciences as well as artificial intelligence. Yassine has numerous publications and contributions,
namely in intelligent systems and Internet of Things.
Abdelalim Sadiq was born in Errachidia, Morocco. He received a B.S in software engineering from Sciences and
technologies Faculty Moulay Ismail University - Errachidia in 1999, and DESA degree in computer network and
telecommunication from National School of Computer Science and Systems Analysis (ENSIAS) Mohammed V
University - Rabat Morocco in 2002 and Ph.D. degree in Computer Science from ENSIAS, Mohammed V University
- Rabat, Morocco, in 2007. He is currently an Associate Professor in computer science Department of Sciences
Faculty, Ibn Tofail University - Kenitra, Morocco and Team Leader Information System and Multimedia (SIM). His
research interests include multimedia information retrieval and processing, sentiments analysis, IoT and data
science. He has served as a reviewer for several international conferences and journals.
Semi-automatic Semantic Annotation of Images 551
Annotated
Images
Intelligent Annotation Tool
USER
Raw Images
Keywords Schema Ontology
Fig. 1. Intelligent image annotation tool: conceptual diagram
metadata schemas and structures for very large media databases. Our research
addresses this topic and suggests an intelligent, user-assisted, semi-automatic
solution for annotating (potentially huge) repositories of raw images, and storing
the result (e.g., in XML-formatted RDF-schema) in an ‘annotated image’
repository (Figure 1). The resulting annotated image archive would then be
available for queries by visual content (giving an image as an example) and/or
keywords as well as for data exchange with other Web-based applications.
In addition to its primary goals – consistent, cost-effective, fast, intelligent
annotation of visual data – the method proposed in this paper also aims at
improving the performance of subsequent image query and retrieval operations
on the annotated image repository. The image retrieval problem has not been
successfully solved yet, despite almost a decade of work [24] and dozens of research
prototypes and commercial products developed as a result. The use of
keywords only does not provide satisfactory results (as anyone who has used the
‘Images’ option in GoogleTM [8] knows), mostly because the correlation between
the keywords used in the query and the desired image file has to be established
by unreliable, vague, not always available metadata, in the form of surrounding
text and/or HTML tags, such as the contents of the alt attribute of the img element
in the HTML document. Pure content-based image retrieval (CBIR) also
falls short of providing an adequate solution to the problem, mostly due to the
limitations of current computer vision techniques in bridging the gap between
visual features and their semantic meaning. There is a clear need to cleverly
combine the two in order to yield a better solution, and several researchers (e.g.,
[21]) have been working on techniques that combine textual and visual cues to
improve retrieval results.
Skip to content
Home
Fundamentals
What is IoT?
Hardware Platforms for IoT
Basic IoT Sensors
Basic IoT Actuators
Application Protocols for IoT
Wireless Networking Technologies for IoT
Open Source Tools for IoT Software Applications
ESP8266
Introduction
Pinout
Initial Setup
Flashing Cradle
3.3v Power Supply
NodeMCU
Introduction
Pinout
Initial Setup
File Management
WiFi Configuration
Check WiFi Connection Status
MQTT
Raspberry Pi
Introduction
Pinout
Raspberry Pi IP Network Configuration
MQTT Broker on Raspberry Pi
SQLite DB on Raspberry Pi
Python Flask Web Application on Raspberry Pi with NGINX and uWSGI
Send Email from Raspberry Pi using Python Script and Gmail SMTP
Post a Tweet on Twitter from Raspberry Pi using Python Script
APCUPSD on Raspberry Pi
MQTT
Introduction
Capturing and Analysing MQTT Packets
Paho MQTT with Python
MQTT Broker on Raspberry Pi
MQTT over WebSockets
Storing MQTT Data from Sensors into SQL Database
MQTT with NodeMCU
Publish APC UPS Power Events on MQTT
MQTT Based Shutdown Button for WD My Cloud
AWS IoT
Getting Started with AWS IoT
AWS IoT CLI on Raspberry Pi
MQTT with AWS IoT Platform using Python and Paho
Basics of AWS IoT Policies
Device Shadows – Part 1 (MQTT Topics and REST APIs)
Device Shadows – Part 2 (MQTT Based Prototype using Python and Raspberry Pi)
Device Shadows – Part 3 (RESTful API Based Prototype using Python)
Containers
Basics of Containers, Docker, and Container Orchestration
Docker Containers and IoT Applications
Setup Docker on Raspberry Pi and Run hello-world Container
Raspberry Pi Cluster for Docker Containers
Virtualization and Cloud
Hack Single Bay WD My Cloud NAS Drive to Create NFS Share for VMware vCenter Datastore
About Me
Contact Me
About Me
Search

IOT BYTES
Bits and Bytes of IoT
Basic IoT Actuators
 

Pradeep Singh | 1st Feb 2017

actuator

Actuators convert an electrical signal into a corresponding physical quantity such as movement, force, sound etc. An actuator is also classed as a transducer because it changes one type of physical quantity into another and is usually activated or operated by a low voltage command signal. Actuators can be classed as either binary or continuous devices based upon the number of stable states their output has.

For example, a relay is a binary actuator as it has two stable states, either energized and latched or de-energised and unlatched, while a motor is a continuous actuator because it can rotate through a full 360o motion.

Let’s explore some of the basic actuators you may use in your IoT projects –

1. Servo Motors:
servo_micro_metal

A Servo is a small device that incorporates a two wire DC motor, a gear train, a potentiometer, an integrated circuit, and a shaft (output spine). The shaft can be positioned to specific angular positions by sending the servo a coded signal.  Of the three wires that stick out from the servo casing, one is for power, one is for ground, and one is a control input line.

When a control signal is applied to a Servo that represents a desired output position of the servo shaft, it (servo) applies power to its DC motor until its shaft turns to that position. It uses the position-sensing device to determine the rotational position of the shaft, so it knows which way the motor must turn to move the shaft to the commanded position.

2. Stepper Motors:
CTP11ELF04MAA00 001

Stepper motors are DC motors that move in discrete steps. They have multiple coils that are organized in groups called “phases”. By energizing each phase in sequence, the motor will rotate, one step at a time. With a computer controlled stepping, you can achieve very precise positioning and/or speed control.

A servomotor consumes power as it rotates to the commanded position but then the servomotor rests. Stepper motors continue to consume power to lock in and hold the commanded position.

3. DC Motors (Continuous Rotation Motors):
DCMotor
Direct Current (DC) motor is the most common actuator used in electronics projects. They are simple, cheap, and easy to use. Also, they come in a great variety of sizes, to accommodate different tasks.  DC motors convert electrical into mechanical energy. They consist of permanent magnets and loops of wire inside. When current is applied, the wire loops generate a magnetic field, which reacts against the outside field of the static magnets.

4. Linear actuator:
linear_actuator

A linear actuator is an actuator that creates motion in a straight line, in contrast to the circular motion of a conventional electric motor. Linear actuators are used in machine tools and industrial machinery, in computer peripherals such as disk drives and printers, in valves and dampers, and in many other places where linear motion is required.

5. Relay:
relay-switch

A relay is an electrically operated switch. Many relays use an electromagnet to mechanically operate a switch, but other operating principles are also used, such as solid-state relays. The advantage of relays is that it takes a relatively small amount of power to operate the relay coil, but the relay itself can be used to control motors, heaters, lamps or AC circuits which themselves can draw a lot more electrical power.

6. Solenoid:
solenoids

A solenoid is simply a specially designed electromagnet. Solenoids are inexpensive, and their use is primarily limited to on-off applications such as latching, locking, and triggering. They are frequently used in home appliances (e.g. washing machine valves), office equipment (e.g. copy machines), automobiles (e.g. door latches and the starter solenoid), pinball machines (e.g., plungers and bumpers), and factory automation.

 

Share this:
TwitterFacebook
Loading...
LEAVE A REPLY
Enter your comment here...
AUTHOR:
 Pradeep Singh
BLOG STATS:
982,700 hits
TOP POSTS & PAGES:
Connect, Configure and Test USB Microphone and Speaker with Raspberry Pi
Store MQTT Data from Sensors into SQL Database
SQLite DB on Raspberry Pi
piCore (Tiny Core) Linux on Raspberry Pi
Create a Docker Container for Raspberry Pi to Blink an LED
3.3v Step Down Power Supply For ESP 8266
Configure SSH Server on Tiny Core Linux using openSSH
Bitcoin Mining with NVIDIA GeForce GTX 760 GPU (Gigabyte Brix)
Assign Persistent Static IP Address to Tiny Core Linux
Install Tiny Core Linux on Local Disk (Frugal)
ALL POSTS & PAGES:
3.3v Step Down Power Supply For ESP 8266
About Me
Add TP-Link USB 3.0 Ethernet Adapter to Intel NUC with VMware ESXi
Application Protocols for IoT
Assign Persistent Static IP Address to Tiny Core Linux
AWS IoT CLI on Raspberry Pi
Basic IoT Actuators
Basic IoT Sensors
Basics of AWS IoT Policies
Basics of Container Registry, Repository, Tags, and Docker Hub
Basics of Containers, Docker, and Container Orchestration
Bitcoin Mining with NVIDIA GeForce GTX 760 GPU (Gigabyte Brix)
Blink an LED with Raspberry Pi
Capturing and Analysing MQTT Packets
Change piCore (Tiny Core) Linux Boot Codes (Boot Options)
Checking WiFi Status Before Performing any Operation on ESP8266
Common IoT Hardware Platforms
Configure SSH Server on Tiny Core Linux using openSSH
Configure Tiny Core Linux as an IP Router
Configure Tiny Core Linux as DHCP Server using udhcpd
Configure Tiny Core Linux as NAT (P-NAT) Router using iptables
Connect, Configure and Test USB Microphone and Speaker with Raspberry Pi
Contact Me
Control Raspberry Pi GPIO Pins with piCore and RPi.GPIO
Create a Docker Container for Raspberry Pi to Blink an LED
Create new Swap Disk and Disable Zswap on PiCore
Device Shadows – Part 1 (MQTT Topics and REST APIs)
Device Shadows – Part 2 (MQTT Based Prototype using Python and Raspberry Pi)
Device Shadows – Part 3 (RESTful API Based Prototype using Python)
Do Analog Dial-Up Modems Still Have Some Relevance in the 4G / 5G World?
Docker Containers and IoT Applications
DS18B20 Temperature Sensor with Arduino
ESP8266
ESP8266 Flashing and Programming Cradle
ESP8266 Pinout
Getting Started with Arduino
Getting Started with AWS IoT
Hack Single Bay WD My Cloud NAS Drive to Create NFS Share for VMware vCenter Datastore
Incoming Call Details Logger with Raspberry Pi
Initial Setup for ESP8266
Initial Setup for NodeMCU
Install Tiny Core Linux on Local Disk (Frugal)
LDR (Light Dependent Resistor) Based Light Sensor using Arduino
Let’s Decipher IoT…
Managing Arduino Libraries
Managing Files with NodeMCU
Modem Events and DTMF Tone Detection with Raspberry Pi
Monitor UPS Power Events on MQTT Client
Mosquitto MQTT Broker on Raspberry Pi
MQTT
MQTT Based Shutdown Button for WD My Cloud
MQTT over WebSockets
MQTT with AWS IoT Platform using Python and Paho
MQTT with NodeMCU
NodeMCU
NodeMCU Pinout
NodeMCU Wifi Configuration
Open Source Tools for IoT Software Applications
Paho MQTT with Python
piCore (Tiny Core) Linux on Raspberry Pi
Play Audio File on Phone Line with Raspberry Pi
Post a Tweet on Twitter from Raspberry Pi using Python Script
Python Flask Web Application on Raspberry Pi with NGINX and uWSGI
Python Script to Autodetect Modem COM Port on Raspberry Pi
Python Script to Reset USB Modem COM Port on Raspberry Pi
Raspberry Pi
Raspberry Pi 3 Built-in WiFi Module with piCore
Raspberry Pi Cluster for Docker Containers
Raspberry Pi IP Network Configuration
Raspberry Pi Pinout
Record Audio from Phone Line with Raspberry Pi
Send DTMF Tones with Raspberry Pi
Send Email from Raspberry Pi using Python Script and Gmail SMTP
Setup Docker on Raspberry Pi and Run hello-world Container
SQLite DB on Raspberry Pi
Store MQTT Data from Sensors into SQL Database
Tiny Core Persistence – Notes
USB Analog Modem with Raspberry Pi
What is IoT?
Wireless Networking Technologies for IoT
Search for:
Search
Search

© 2022 IOT BYTES

CREATE A FREE WEBSITE OR BLOG AT WORDPRESS.COM.
Skip to content
Tutorials
Student
Jobs
Courses

Write
Write
Come write articles for us and get featured
Practice
Practice
Learn and code with the best industry experts
Premium
Premium
Get access to ad-free content, doubt assistance and more!
Jobs
Jobs
Come and find your dream job with us
Geeks Digest
Quizzes
Geeks Campus
Gblog Articles
IDE
Campus Mantri
Sign In
Sign In
Home
Saved Videos
Courses
Practice DS & Algo.
Algorithms
Analysis of Algorithms
Data Structures
Interview Corner
Languages
CS Subjects
GATE
Web Technologies
Software Designs
School Learning
Mathematics
Maths Notes (Class 8-12)
NCERT Solutions
RD Sharma Solutions
Physics Notes (Class 8-11)
ISRO CS
UGC NET CS
Student
Jobs
GBlog
Puzzles
What's New ?
 Change Language
Data Structures
Algorithms
Interview Preparation
Topic-wise Practice
C++
Java
Python
Competitive Programming
Machine Learning
Web Development
Puzzles
Project Ideas
GFG School
Related Articles
Removing stop words with NLTK in Python
Naive Bayes Classifiers
Linear Regression (Python Implementation)
Agents in Artificial Intelligence
Supervised and Unsupervised learning
Decision Tree
Reinforcement learning
Decision Tree Introduction with example
Search Algorithms in AI
Python | Decision tree implementation
Elbow Method for optimal value of k in KMeans
Convert Text to Speech in Python
Activation functions in Neural Networks
Running Python script on GPU.
ML | Linear Regression
Python | Lemmatization with NLTK
Confusion Matrix in Machine Learning
Getting started with Machine Learning
Best Python libraries for Machine Learning
Introduction to Hill Climbing | Artificial Intelligence
ML | Underfitting and Overfitting
ML | One Hot Encoding to treat Categorical data parameters
Association Rule
Clustering in Machine Learning
K means Clustering - Introduction
Null Space and Nullity of a Matrix
ML | Label Encoding of datasets in Python
Regression and Classification | Supervised Machine Learning
Random Forest Regression in Python
Understanding Logistic Regression
Table of Contents
Removing stop words with NLTK in Python
Naive Bayes Classifiers
Linear Regression (Python Implementation)
Agents in Artificial Intelligence
Supervised and Unsupervised learning
Decision Tree
Reinforcement learning
Decision Tree Introduction with example
Search Algorithms in AI
Python | Decision tree implementation
Elbow Method for optimal value of k in KMeans
Convert Text to Speech in Python
Activation functions in Neural Networks
Running Python script on GPU.
ML | Linear Regression
Python | Lemmatization with NLTK
Confusion Matrix in Machine Learning
Getting started with Machine Learning
Best Python libraries for Machine Learning
Introduction to Hill Climbing | Artificial Intelligence
ML | Underfitting and Overfitting
ML | One Hot Encoding to treat Categorical data parameters
Association Rule
Clustering in Machine Learning
K means Clustering - Introduction
Null Space and Nullity of a Matrix
ML | Label Encoding of datasets in Python
Regression and Classification | Supervised Machine Learning
Random Forest Regression in Python
Understanding Logistic Regression

Actuators in IoT
Difficulty Level : Easy
Last Updated : 24 Feb, 2021
An IoT device is made up of a Physical object (“thing”) + Controller (“brain”) + Sensors + Actuators + Networks (Internet). An actuator is a machine component or system that moves or controls the mechanism or the system. Sensors in the device sense the environment, then control signals are generated for the actuators according to the actions needed to perform.

A servo motor is an example of an actuator. They are linear or rotatory actuators, can move to a given specified angular or linear position. We can use servo motors for IoT applications and make the motor rotate to 90 degrees, 180 degrees, etc., as per our need.

Resolution Days 2022 GeeksforGeeks

The following diagram shows what actuators do, the controller directs the actuator based on the sensor data to do the work.
 


Working of IoT devices and use of Actuators

The control system acts upon an environment through the actuator. It requires a source of energy and a control signal. When it receives a control signal, it converts the source of energy to a mechanical operation. On this basis, on which form of energy it uses, it has different types given below.



Types of Actuators :

1. Hydraulic Actuators –

A hydraulic actuator uses hydraulic power to perform a mechanical operation. They are actuated by a cylinder or fluid motor. The mechanical motion is converted to rotary, linear, or oscillatory motion, according to the need of the IoT device. Ex- construction equipment uses hydraulic actuators because hydraulic actuators can generate a large amount of force.

Advantages :

Hydraulic actuators can produce a large magnitude of force and high speed.
Used in welding, clamping, etc.
Used for lowering or raising the vehicles in car transport carriers.
Disadvantages :

Hydraulic fluid leaks can cause efficiency loss and issues of cleaning.
It is expensive.
It requires noise reduction equipment, heat exchangers, and high maintenance systems.
2. Pneumatic Actuators –

A pneumatic actuator uses energy formed by vacuum or compressed air at high pressure to convert into either linear or rotary motion. Example- Used in robotics, use sensors that work like human fingers by using compressed air.

Advantages :

They are a low-cost option and are used at extreme temperatures where using air is a safer option than chemicals.
They need low maintenance, are durable, and have a long operational life.
It is very quick in starting and stopping the motion.
Disadvantages :

Loss of pressure can make it less efficient.
The air compressor should be running continuously.
Air can be polluted, and it needs maintenance.
3. Electrical Actuators –

An electric actuator uses electrical energy, is usually actuated by a motor that converts electrical energy into mechanical torque. An example of an electric actuator is a solenoid based electric bell. 

Advantages :

It has many applications in various industries as it can automate industrial valves.
It produces less noise and is safe to use since there are no fluid leakages.
It can be re-programmed and it provides the highest control precision positioning.
Disadvantages :

It is expensive.
It depends a lot on environmental conditions.
Other actuators are –

Thermal/Magnetic Actuators – 
These are actuated by thermal or mechanical energy. Shape Memory Alloys (SMAs) or Magnetic Shape‐Memory Alloys (MSMAs) are used by these actuators. An example of a thermal/magnetic actuator can be a piezo motor using SMA.
Mechanical Actuators – 
A mechanical actuator executes movement by converting rotary motion into linear motion. It involves pulleys, chains, gears, rails, and other devices to operate. Example – A crankshaft.
Soft Actuators
Shape Memory Polymers
Light Activated Polymers
With the expanding world of IoT, sensors and actuators will find more usage in commercial and domestic applications along with the pre-existing use in industry.

Like
0
Previous
How to Upload PDF Files in Firebase Storage in Android?
Next
How to Stand Out as a Software Engineer in 2021
RECOMMENDED ARTICLES
Page :
1
2
3
Introduction to Internet of Things (IoT) | Set 1
14, Aug 18
IoT Home Automation
01, Jul 21
Communication Models in IoT (Internet of Things )
01, Mar 21
Combining IoT and Machine Learning makes our future smarter
23, May 19
Challenges Faced By IoT in Agricultural Sector
06, Dec 19
Components of IOT and relation with Cloud Computing
06, Feb 20
Different Ways to Prepare an IT Network for IoT
10, Mar 20
Advantages and Disadvantages of IoT
01, Jun 21
Benefits of Internet of Things(IoT) in Manufacturing Industry
12, Apr 20
World Of IoT Boards
31, May 20
Difference between IoT and M2M
16, May 20
How Blockchain Technology Can Accelerate the Potential of IoT?
20, May 20
10 Security Tips for IoT Devices
26, May 20
Sustainable development with 5G/IOT
28, May 20
IOT as a key in Digital Health Care System
05, Jun 20
Trust Based Energy-Efficient and Secure Routing Protocols for IoT
12, Jun 20
Difference between IIOT and IOT
25, Jun 20
7 Best Languages to Learn IoT Development in 2020
12, Sep 20
Most Common Threats to Security and Privacy of IoT Devices
11, Oct 20
10 Applications of IoT in Creating Smart Cities
19, Dec 20
Revolutionized IoT - Internet of Everything
12, Mar 21
IoT and Cloud Computing
01, Feb 21
Access Control for Disaster Avoidance in Google Cloud IoT Core using IAM Policy
01, Mar 21
3 layer IoT architecture
01, Apr 21
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
MuskanKalra1
@MuskanKalra1
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Article Tags :
IoT
Technical Scripter 2020
Machine Learning
Practice Tags :
Machine Learning
Improve Article
Report Issue
Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.


Load Comments
ADS BY ADRECOVER

WHAT'S NEW

Complete Interview Preparation
View Details

System Design-Live Classes for Working Professionals
View Details

Data Structures & Algorithms- Self Paced Course
View Details
ADS BY ADRECOVER

MOST POPULAR IN MACHINE LEARNING
10 Best Data Visualization Tools in 2020
Pattern Recognition | Introduction
ML | Types of Learning – Supervised Learning
K-Nearest Neighbours
Introduction to Recurrent Neural Network
MORE RELATED ARTICLES IN MACHINE LEARNING
Implementing Apriori algorithm in Python
Introduction to Dimensionality Reduction
ML | Linear Discriminant Analysis
DBSCAN Clustering in ML | Density based clustering
ML | Expectation-Maximization Algorithm
ADS BY ADRECOVER

ADVERTISEMENT BY ADRECOVER

5th Floor, A-118,
Sector-136, Noida, Uttar Pradesh - 201305
feedback@geeksforgeeks.org
Company
About Us
Careers
Privacy Policy
Contact Us
Copyright Policy
Learn
Algorithms
Data Structures
Languages
CS Subjects
Video Tutorials
Web Development
Web Tutorials
HTML
CSS
JavaScript
Bootstrap
Contribute
Write an Article
Write Interview Experience
Internships
Videos
@geeksforgeeks , Some rights reserved
Lightbox
Start Your Coding Journey Now!
Login
Register

Privacy policyAbout WikipediaDisclaimersContact WikipediaMobile viewDevelopersStatisticsCookie statementWikimedia FoundationPowered by MediaWiki 1-919-230-9951  info@bridgera.com
Login |   
Bridgera Logo
Services
 Solutions
 Products
 Ecosystem
 Resources
 Contact Careers Get a Free Consultation
Sensors and Actuators in IoT | Enabling Industrial Automation
Sensors and Actuators in IoT | Enabling Industrial Automation
By Joydeep Misra  June 26, 2017
facebook sharing buttontwitter sharing buttonpinterest sharing buttonlinkedin sharing buttonwhatsapp sharing button
The Internet of Things is a major contributing factor of the new Data Economy. The value of an IoT system goes beyond the original intended use case, for instance in automation. This is because further value lies in the intelligence that an IoT system creates. Sensors are the source of IoT data. Furthermore, sensors and actuators in IoT can work together to enable automation at industrial scale. Finally, analysis of the data that these sensors and actuators produce can provide valuable business insights over time.

Driven by new innovations in materials and nanotechnology, sensor technology is developing at a never before seen pace, with a result of increased accuracy, decreased size and cost, and the ability to measure or detect things that weren’t previously possible. In fact, sensing technology is developing so rapidly and becoming so advanced that we will see a trillion new sensors deployed annually within a few years.

Custom IoT Solutions Designed to Enhance Your Business 
Sensors
A better term for a sensor is a transducer. A transducer is any physical device that converts one form of energy into another. So, in the case of a sensor, the transducer converts some physical phenomenon into an electrical impulse that determines the reading. A microphone is a sensor that takes vibrational energy (sound waves), and converts it to electrical energy in a useful way for other components in the system to correlate back to the original sound.

Actuators
Another type of transducer that you will encounter in many IoT systems is an actuator. In simple terms, an actuator operates in the reverse direction of a sensor. It takes an electrical input and turns it into physical action. For instance, an electric motor, a hydraulic system, and a pneumatic system are all different types of actuators.

Controller
In a typical IoT system, a sensor may collect information and route to a control center. There, previously defined logic dictates the decision. As a result, a corresponding command controls an actuator in response to that sensed input. Thus, sensors and actuators in IoT work together from opposite ends. Later, we will discuss where the control center resides in the greater IoT system.

Sensors and Actuators in IoT
IoT Variety is Key
There are many different types of sensors in an IoT system. Flow sensors, temperature sensors, voltage sensors, humidity sensors, and the list goes on. In addition, there are multiple ways to measure the same thing. For instance, a small propeller like the one you see on a weather station can measure airflow. However, this method would not work in a moving vehicle. As an alternative, vehicles can measure airflow by heating a small element and measuring the rate at which it cools.

Different applications call for different ways of measuring the same thing. At the same time, a single variable could trigger multiple actions. As a result, sensors and actuators in IoT must work together reliably.

The Importance of Accurate Sensors
Imagine that you are a bar owner and you want to measure the amount of beer coming out of one of your taps. One way you might do this is to install a sensor in line with the line that runs from the keg of beer to the tap. This sensor would most likely have a small impeller inside of it. When the beer ran through the sensor, it would cause the impeller to spin, just like the propeller on a weather station.

When the impeller spins, it will send a stream of electrical impulses to a computer. The computer will interpret the impulses to determine how much beer is flowing through. Sounds simple, right?

This is where sensors get interesting. If you look back at our description, you’ll see that we never directly measured the amount of beer flowing through the sensor; we interpreted it from a stream of electrical impulses. That means that we must first figure out how to interpret it.

Sensor Calibration
To calibrate the sensor, we’d have to take a container with a known carrying capacity, say, a pint glass. Then we’d have to fill that container under a variety of conditions to determine what the electrical pulse signal looked like. Then, monitor the actuator that is responsible to turn on and off the flow on the other end.

For instance, the first pour off a new keg might tend to have more foam, which would read differently than a pour from the middle of the keg that was all beer. It’s only through repeated trials and a lot of data that we gain confidence that we can interpret the data. Sensors and actuators in IoT can work together to automate processes, such as filling bottles.

The Importance of Accurate Calibration
With this correlation identified, a protocol can always assure the sensor is reading correctly. This process is calibration. Reputable manufacturers will deliver fully calibrated devices and provide instruction on how to re-calibrate to verify sensor accuracy.

The accuracy of sensed data is paramount, since you will make mission-critical decisions based on later analysis of the data, which will hold little value if the data is wrong.

Important Next Steps
Sensors and actuators in IoT work together like bookends. Once you have your device engineering completed, you will be ready to prototype your IoT System which is most effective with an IoT cloud solution that can ingest device data and provide a way to query or visualize the data. Bridgera IoT is a cloud platform and a service that allows companies to produce something quickly that works, without the compromise of a poorly built back end or generic UI, therefore enabling a more meaningful demonstration and supporting a more effective test/validation effort. Then, most importantly, converting right into a highly scalable model when ready.    

Bridgera IoT Introduction and 5 Step IoT Acceleration Video

About the Author:  This is an excerpt from our eBook co-authored by Bridgera LLC and RIoT.

Bridgera LLC is a Raleigh, NC based software company specializing in IoT software solutions with Bridgera IoT, not just another IoT Platform but Custom Software-as-a-Service for the Internet of Things.

RIoT is a registered trademark of the Wireless Research Center of North Carolina. RIoT represents a network of technologists, engineers, business leaders, academics, policy makers, and entrepreneurs, all of whom have a stake in the Internet of Things industry.

Download IoT eBook
Previous Post
Next Post
Subscribe to Bridgera's newsletter.
Get Bridgera's latest articles straight to your inbox.

Email Address
Search Our Blog
Search...

Most Recent
IoT Security – Challenges and Solutions
Optimizing Your Supply Chain with Industrial IoT Solutions
Condition Monitoring: A Pillar of Industry 4.0
Optimizing IoT Implementation Costs
IoT Rapid Prototyping: Why Is It Necessary?
Planning for a new IoT Project?
First Name*
Last Name*
Email ID*
Company Name*
Phone Number*
Message
Bridgera will use any of the data provided in accordance with the Privacy Policy.


Our Products
First slide
Bridgera Rescue
Mobile Personal Emergency Response System

Second slide
Bridgera TrackMe
Real-time driver & asset tracking

Previous
Next
Request a Demo

Bridgera is a custom software development and service company specialized in building Internet of Things solutions. Our mission is to help our customers to reach their IoT goals faster by utilizing our proprietary tool set and deep experience in the IoT field.

   
Contact Us
500 W Peace St, Raleigh, NC 27603, United States

info@bridgera.com

+1 919-230-4531 [Sales]

Quick Links
Careers
News & Events
Our History & Mission
Get eBook Now
Privacy Policy
California Applicants
California Privacy Policy
Website terms of use
Get In Touch
Subscribe to Bridgera's newsletter.
Get Bridgera's latest articles straight to your inbox.

Email Address
Copyright © 2022 Bridgera | www.bridgera.com
Sensors in IoT
Sensors are everywhere. ... The IoT and its counterpart, the Industrial Internet of Things (IIoT), are bringing sensor usage to a new level. Broadly speaking, sensors are devices that detect and respond to changes in an environment. Inputs can come from a variety of sources such as light, temperature, motion and pressure.12 Oct 2021
Software Development Company
SERVICES
TECHNOLOGIES
OUR WORK
SUCCESS STORIES
RESOURCES
REQUEST QUOTE
Top 15 Sensor Types Being Used Most By IoT Application Development Companies
Blog, Digital Transformation
 By Rita Sharma

Industries and organizations have been using various kinds of sensors for a long time but the invention of the Internet of Things has taken the evolution of sensors to a completely different level.

IoT platforms function and deliver various kinds of intelligence and data using a variety of sensors. They serve to collect data, pushing it and sharing it with a whole network of connected devices. All this collected data makes it possible for devices to autonomously function, and the whole ecosystem is becoming “smarter” every day.

By combining a set of sensors and a communication network, devices share information with one another and are improving their effectiveness and functionality.

Take Tesla vehicles as an example. All of the sensors on a car record their perception of the surroundings, uploading the information into a massive database.

The data is then processed and all the important new pieces of information are sent to all other vehicles. This is an ongoing process, through which a whole fleet of Tesla vehicles is becoming smarter every day.

Let’s take a look at some of the key sensors, extensively being used in the IoT world.

Temperature sensors
By definition, “A device, used to measure amount of heat energy that allows to detect a physical change in temperature from a particular source and converts the data for a device or user, is known as a Temperature Sensor.”

These sensors have been deployed for a long time in a variety of devices. However, with the emergence of IoT, they have found more room to be present in an even greater number of devices.

Only a couple of years ago, their uses mostly included A/C control, refrigerators and similar devices used for environmental control. However, with the advent of the IoT world, they have found their role in manufacturing processes, agriculture and health industry.

In the manufacturing process, many machines require specific environment temperature, as well as device temperature. With this kind of measurement, the manufacturing process can always remain optimal.

On the other hand, in agriculture, the temperature of soil is crucial for crop growth. This helps with the production of plants, maximizing the output.

Followed are some sub-categories of Temp Sensors:
Thermocouples: These are voltage devices that indicate temperature measuring with a change in voltage. As temperature goes up, the output voltage of the thermocouple rises.
Resistor temperature detectors (RTD): The resistance of the device is directly proportional to the temperature, increase in a positive direction when the temperature rises resistance going up.
Thermistors: It is a temperature sensitive resistor that changes its physical resistance with the change in temperature.
IC (Semiconductor): They are linear devices where the conductivity of the semiconductor increases linearly and it takes advantage of the variable resistance properties of semiconductor materials. It can provide a direct temperature reading in digital form, especially at low temperatures.
Infrared sensors: It detects temperature by intercepting a portion of emitted infrared energy of the object or substance, and sensing its intensity, can be used to measure temperature of solids and liquids only, not possible to use it on gases because of their transparent nature.
Proximity sensor
A device that detects the presence or absence of a nearby object, or properties of that object, and converts it into signal which can be easily read by user or a simple electronic instrument without getting in contact with them.

Proximity sensors are largely used in the retail industry, as they can detect motion and the correlation between the customer and product they might be interested in. A user is immediately notified of discounts and special offers of nearby products.

Another big and quite an old use-case is vehicles. You are reversing your car and are alrmed about an obstacle while taking reverse, that’s the work of proximity sensor.

They are also used for parking availability in places such as malls, stadiums or airports.

Following are some of the Proximity Sensors sub-categorised:
Inductive Sensors: Inductive proximity sensors are used for non-contact detection to find out the presence of metallic objects using electromagnetic field or a beam of electromagnetic radiation.It can operate at higher speeds than mechanical switches and also seems more reliable because of its robustness.
Capacitive Sensors: Capacitive proximity sensors can detect both metallic as well as non-metallic targets. Nearly all other materials are dielectric different from air. It can be used to sense very small objects through a large portion of target. So, generally used in difficult and complicated applications.
Photoelectric Sensors: Photoelectric sensor is made up of light-sensitive parts and uses a beam of light to detect the presence or absence of an object. It is an ideal alternative of inductive sensors. And used for long distance sensing or to sense non-metal object.
Ultrasonic Sensors: Ultrasonic sensors are also used to detect the presence or to measure the distance of targets similar to radar or sonar. This makes a reliable solution for harsh and demanding conditions.
Pressure sensor
A pressure sensor is a device that senses pressure and converts it into an electric signal. Here, the amount depends upon the level of pressure applied.

There are plenty of devices that rely on liquid or other forms of pressure. These sensors make it possible to create IoT systems that monitor systems and devices that are pressure propelled. With any deviation from standard pressure range, the device notifies the system administrator about any problems that should be fixed.

Deployment of these sensors is not only very useful in manufacturing, but also in the maintenance of whole water systems and heating systems, as it is easy to detect any fluctuation or drops in pressure.

Water quality sensor
Water quality sensors are used to detect the water quality and Ion monitoring primarily in water distribution systems.

Water is practically used everywhere. These sensors play an important role as they monitor the quality of water for different purposes. They are used in a variety of industries.

Following is a list of the most common kind of water sensors in use:
Chlorine Residual Sensor: It measures chlorine residual (i.e. free chlorine, monochloramine & total chlorine) in water and most widely used as disinfectant because of its efficiency.
Total Organic Carbon Sensor: TOC sensor is used to measure organic element in water.
Turbidity Sensor: Turbidity sensors measure suspended solids in water, typically it is used in river and stream gaging, wastewater and effluent measurement.
Conductivity Sensor: Conductivity measurements are carried out in industrial processes primarily to obtain information on total ionic concentrations (i.e. dissolved compounds) in water solutions.
pH Sensor: It is used to measure the pH level in the dissolved water, which indicates how acidic or basic (alkaline) it is.
Oxygen-Reduction Potential Sensor: The ORP measurement provides insights into the level of oxidation/reduction reactions occurring in the solution.
Chemical sensor
Chemical sensors are applied in a number of different industries. Their goal is to indicate changes in liquid or to find out air chemical changes. They play an important role in bigger cities, where it is necessary to track changes and protect the population.

Main use cases of chemical sensors can be found in Industrial environmental monitoring and process control, intentionally or accidentally released harmful chemical detection, explosive and radioactive detection, recycling processes on Space Station, pharma industries and laboratory etc.

Following are most common kind of chemical sensors in use:
Chemical field-effect transistor
Chemiresistor
Electrochemical gas sensor
Fluorescent chloride sensor
Hydrogen sulfide sensor
Nondispersive infrared sensor
pH glass electrode
Potentiometric sensor
Zinc oxide nanorod sensor
Gas sensor
Gas sensors are similar to the chemical ones, but are specifically used to monitor changes of the air quality and detect the presence of various gases. Like chemical sensors, they are used in numerous industries such as manufacturing, agriculture and health and used for air quality monitoring, detection of toxic or combustible gas, hazardous gas monitoring in coal mines, oil & gas industries, chemical laboratory research, manufacturing – paints, plastics, rubber, pharmaceutical & petrochemical etc.

Following are some common Gas sensors:
Carbon dioxide sensor
Breathalyzer
Carbon monoxide detector
Catalytic bead sensor
Hydrogen sensor
Air pollution sensor
Nitrogen oxide sensor
Oxygen sensor
Ozone monitor
Electrochemical gas sensor
Gas detector
Hygrometer
Smoke sensor
A smoke sensor is a device that senses smoke (airborne particulates & gases), and it’s level.

They have been in use for a long period of time. However, with the development of IoT, they are now even more effective, as they are plugged into a system that immediately notifies the user about any problem that occurs in different industries.

Smoke sensors are extensively used by manufacturing industry, HVAC, buildings and accommodation infra to detect fire and gas incidences. This serves to protect people working in dangerous environments, as the whole system is much more effective in comparison to the older ones.

Common Type of Smoke Sensors
Smoke sensors detect the presence of Smoke, Gases and Flame surrounding their field. It can be detected either optically or by the physical process or by the use of both the methods.

Optical smoke sensor (Photoelectric): Optical smoke sensor used the light scatter principle trigger to occupants.
Ionization smoke sensor: Ionization smoke sensor works on the principle of ionization, kind of chemistry to detect molecules causing a trigger alarm.
IR sensors
An infrared sensor is a sensor which is used to sense certain characteristics of its surroundings by either emitting or detecting infrared radiation. It is also capable of measuring the heat being emitted by the objects.

They are now used in a variety of IoT projects, especially in Healthcare as they make monitoring of blood flow and blood pressure simple. They are even used in a wide array of regular smart devices such as smartwatches and smartphones as well.

Other common use includes home appliances & remote control, breath analysis, Infrared vision (i.e. visualize heat leaks in electronics, monitor blood flow, art historians to see under layers of paint), wearable electronics, optical communication, non-contact based temperature measurements, automotive blind-angle detection.

Their usage does not end there, they are also a great tool for ensuring high-level security in your home. Also, their application includes environment checks, as they can detect a variety of chemicals and heat leaks. They are going to play an important role in the smart home industry, as they have a wide-range of applications.

Level sensors
A sensor which is used to determine the level or amount of fluids, liquids or other substances that flow in an open or closed system is called Level sensor.

Like IR sensors, level sensors are present in a wide array of industries. They are primarily known for measuring fuel levels, but they are also used in businesses that work with liquid materials. For example, the recycling industry, as well as the juice and alcohol industry rely on these sensors to measure the number of liquid assets in their possession.

Best use cases of level sensor is, fuel gauging & liquid levels in open or closed containers, sea level monitoring & Tsunami warning, water reservoirs, medical equipment, compressors, hydraulic reservoirs, machine tools, beverage and pharmaceutical processing, high or low-level detection etc.

This helps better streamline their businesses, as sensors collect all the important data at all times. With the use of these sensors, any product manager can precisely see how much liquid is ready to be distributed and whether the manufacturing should be stepped up.

There are two basic level measurement types:
Point level sensors: Point level sensors usually detect the particular specific level and respond to the user if the sensing object is above or below that level. It is integrated into single device to get an alarm or trigger
Continuous level Sensor: Continuous level sensors measure liquid or dry material levels within a specified range and provide outputs which continuously indicate the level. The best example of it is fuel level display in the vehicle.
Image sensors
Image sensors are instruments which are used to convert optical images into electronic signals for displaying or storing files electronically.

The major use of image sensor is found in digital camera & modules, medical imaging and night vision equipment,thermal imaging devices, radar, sonar, media house, Biometric & IRIS devices.

Two main types of sensors are used in:
CCD (charge-coupled device), and
CMOS (complementary metal-oxide semiconductor) imagers.
Although each type of sensor uses different technology to capture images, both CCD and CMOS imagers use metal-oxide semiconductors, having the same degree of sensitivity to light, and no inherent quality difference

An average consumer would think that this is a regular camera, but even though this is not far from the truth, image sensors are connected with a wide range of different devices, making their functionality much better.

One of the best-known uses includes the car industry, in which imagery plays a very important role. With these sensors, the system can recognize signs, obstacles and many other things that a driver would generally notice on the road. They play a very important role in IoT industry, as they directly affect the progress of driverless cars.

They are also implemented in improved security systems, where images help capture details about the perpetrator.

In the retail industry, these sensors serve to collect data about customers, helping businesses get a better insight into who is actually visiting their store, race, gender, age are only some of the useful parameters that retail owners get by using these IoT sensors.

Motion detection sensors
A motion detector is an electronic device which is used to detect the physical movement (motion) in a given area and it transforms motion into an electric signal; motion of any object or motion of human beings

Motion detection plays an important role in the security industry. Businesses utilize these sensors in areas where no movement should be detected at all times, and it is easy to notice anybody’s presence with these sensors installed.

These are primarily used for intrusion detection systems, automatics door control, boom barrier, smart camera (i.e motion based capture/video recording),toll plaza, automatic parking systems, automated sinks/toilet flusher,hand dryers,energy management systems(i.e. Automated Lighting, AC, Fan, Appliances Control) etc.

On the other hand, these sensors can also decipher different types of movements, making them useful in some industries where a customer can communicate with the system by waving a hand or by performing a similar action. For example, someone can wave to a sensor in the retail store to request assistance with making the right purchase decision.

Even though their primary use is correlated with the security industry, as the technology advances, the number of possible applications of these sensors is only going to grow.

Following are key motion sensor types widely used:
Passive Infrared (PIR): It Detects body heat (infrared energy) and the most widely used motion sensor in home security systems.
Ultrasonic: Sends out pulses of ultrasonic waves and measures the reflection off a moving object by tracking the speed of sound waves.
Microwave: Sends out radio wave pulses and measures the reflection off a moving object. They cover a larger area than infrared & ultrasonic sensors, but they are vulnerable to electrical interference and more expensive.
Accelerometer sensors
Accelerometer is a transducer that is used to measure the physical or measurable acceleration experienced by an object due to inertial forces and converts the mechanical motion into an electrical output. It is defined as rate of change of velocity with respect to time

These sensors are now present in millions of devices, such as smartphones. Their uses involve detection of vibrations, tilting and acceleration in general. This is great for monitoring your driving fleet, or using a smart pedometer.

In some instances, it is used as a form of anti-theft protection, as the sensor can send an alert through the system if an object that should remain stationary is moved.

They are widely used in cellular & media devices, vibration measurement, automotive control and detection, free fall detection, aircraft and aviation industries, movement detection, sports academy/athletes behavior monitoring, consumer electronics, industrial & construction sites etc.

There are various kinds of accelerometers and following are few mainly used in IoT projects:
Hall-effect accelerometers: Hall-effect accelerometers are using Hall principle to measure the acceleration, it measures the voltage variations caused by changes in a magnetic field around them.
Capacitive accelerometers: Capacitive accelerometers sensing output voltage dependents on the distance between two planar surfaces. Capacitive accelerometers are also less prone to noise and variation with temperature.
Piezoelectric accelerometers: Piezoelectric sensing principle is working on the piezoelectric effect. Piezo-film based accelerometers are best used to measure vibration, shock, and pressure.
Each accelerometer sensing technology has its own advantages and compromises. Before selecting, it’s important to understand the basic differences of the various types and the test requirements.

Gyroscope sensors
A sensor or device which is used to measure the angular rate or angular velocity is known as Gyro sensors, Angular velocity is simply defined as a measurement of speed of rotation around an axis. It is a device used primarily for navigation and measurement of angular and rotational velocity in 3-axis directions. The most important application is monitoring the orientation of an object.

Their main applications are in car navigation systems, game controllers, cellular & camera devices, consumer electronics, robotics control, drone & RC control helicopter or UAV control, vehicle control/ADAS and many more.

There are several different kinds of gyro sensors which are selected by their working mechanism, output type, power, sensing range and environmental conditions.

Rotary (classical) gyroscopes
Vibrating Structure Gyroscope
Optical Gyroscopes
MEMS(micro-electro-mechanical systems) Gyroscopes
These sensors are always combined with accelerometers. The use of these two sensors simply provides more feedback to the system. WIth gyroscopic sensors installed, many devices can help athletes improve the efficiency of their movements, as they gain access to the athletes movement during sports activities.

This is only one example of its application, however, as the role of this sensor is to detect rotation or twist, its application is crucial for the automation of some manufacturing processes.

Humidity sensors
Humidity is defined as the amount of water vapour in an atmosphere of air or other gases. The most commonly used terms are “Relative Humidity (RH)

These sensors usually follow the use of temperature sensors, as many manufacturing processes require perfect working conditions. Through measuring humidity, you can ensure that the whole process runs smoothly, and when there is any sudden change, action can be taken immediately, as sensors detect the change almost instantaneously.

Their applications and use can be found in Industrial & residential domain for heating, ventilating, and air conditioning systems control. They can also be found in Automotive, museums, industrial spaces and greenhouses , meteorology stations,Paint and coatings industries, hospitals & pharma industries to protect medicines

Optical sensors
A sensor which measures the physical quantity of light rays and convert it into electrical signal which can be easily readable by user or an electronic instrument/device is called optical sensor.

Optical sensors are loved by IoT experts, as they are practical for measuring different things simultaneously. The technology behind this sensor allows it to monitor electromagnetic energy, which includes, electricity, light and so on.

Due to this fact, these sensors have found use in healthcare, environment monitoring, energy, aerospace and many more industries. With their presence oil companies, pharmaceutical companies and mining companies are in a much better position to track environmental changes while keeping their employees safe.T

Their main use can be found in ambient light detection, digital optical switches, optical fibres communications,due to electrical isolation best suited for oil and gas applications, civil and transportation fields, high speed network systems, elevator door control, assembly line part counters and safety systems.

Following are key type of optical sensors:
Photodetector: It uses light sensitive semiconductor materials like photocells,photodiodes or phototransistors to work as photodetector
Fiber Optics: Fibers optics carry no current, So its immune to electrical & electromagnetics interference and even in damaged condition no sparking or shock hazard happens.
Pyrometer: It estimates the temperature of an object by sensing the color of the light and Objects radiate light according to their temperature and produce same colors at same temperature.
Proximity & Infrared: Proximity use light to sense objects nearby and Infrared are used where visible light would be inconvenient.
It is clear that IoT has become incredibly popular, and current trends show that it is the future. It simply helps with automation of various processes, making these systems quite useful for both regular consumers and businesses.

We are yet to see the full potential this technology carries, as the whole platform is becoming smarter through the fusion of all the abovementioned sensors. When you consider the fact that all of the measured data is collected and can be analyzed, it is obvious that IoT is going to become even smarter in the future.

Take This Quiz
Welcome to your Are You A sensor Expert? Take This Quiz

Next
Related Posts
Retail Industry
IoT in Retail - How IoT Works in Retail Industry
IoT, or the Internet of Things is considered to be one of the major game-changing…

5-Tips-for-Successful-IoT-App-Development
5 Tips for Successful IoT App Development
IoT app development is more than just connected devices and network. It is also about…

Categories
Business & Culture
Design & Development
Digital Transformation
Hire a Developer
Mobile App Development
News & Events
Software Development
Technology
Subscribe
Get updates on your email.


Email
Subscribe





USA
6565 N MacArthur Blvd, Suite 225, Irving, Texas, 75039, USA
Phone: +1 214.214.4510
INDIA
B-101, 1st Floor, Tower B, Noida One, Plot No.8, Block-B, Sector -62, Noida, UP-201309,
Phone: +91.120.796.1096, +91.120.796.1101
We use cookies to provide you with the best possible experience on our website

Visit our cookies policy for more information about cookies. Read more

Decline
Accept
OMRON Electronic Components - Americas
Electronic Components
Americas
Search
 
Select Region

 
Contact

Products
Sales & Technical Support
Solutions ＆ Industries
About Us
Login
Home Solutions What is IoT? 
What is IoT? 
What is IoT?

IoT is an abbreviation for the Internet of Things.
Until recently, many physical objects - with the exception of personal computers and smartphones- had no means to connect to the internet until the advent of IoT technology.
We are now entering an age where devices exchange information on the internet, enabling us to remotely operate devices and collect data. With this technology, you can remotely control the temperature and humidity levels of the air conditioner at your home and detect anomalies inside the house.
It is a never-ending challenge using sensors to help us collect a myriad of data!
In this article, we introduce sensors used in IoT applications.

Content
What are the roles of IoT sensors?
How and where are IoT sensors used?
Types of IoT Sensors in Daily Products & Services
Summary
1.What are the Roles of IoT sensors?
IoT innovation made it possible to connect everyday things to the internet. Nowadays, almost all entities, such as houses, office buildings, factories, and even cities are connected to the network to collect data and utilize the information for various purposes.
The importance of data has increased greatly, with many experts saying “data is the new oil.”
Sensors play an important role in creating solutions using IoT.
Sensors are devices that detect external information, replacing it with a signal that humans and machines can distinguish.
Sensors made it possible to collect data in most any situation and are now used in various fields - medical care, nursing care, industrial, logistics, transportation, agriculture, disaster prevention, tourism, regional businesses and many more.
With the expansion of the fields in which sensors play an important role, the market is still growing with a variety of sensors.

2.How and Where IoT Sensors are Used
There are a wide range of IoT sensors used to detect and measure various physical phenomena such as heat and pressure as well as the five human senses: sight, hearing, touch, taste and smell.

Example of sensors that detect physical properties
Temperature and humidity sensors
Acceleration sensors
Gyro sensors
and many more sensors.

Examples of sensors that detect the five human senses
Thermistors
Sound pressure sensors
Odor sensors
Imaging sensors
and many more sensors.

Sensor types by communication interface
Sensor types vary depending on the sensing object, but in terms of communication interface, they can be roughly categorized into three types.

2JCIE-BU Environment Sensor
USB sensors
This type of sensor incorporates a common standard interface like USB which you can connect directly to your IoT devices or a single-board computer to add sensing capabilities.
With a USB extended type sensor, you can plug into a USB port of a single-board computer to receive power and create a data acquisition program to load the sensor data.
Moreover, this type of sensor allows connection to the internet via a single-board computer which you can easily build IoT devices.

2JCIE-BU Environment Sensor, etc.

2JCIE-BL Environment Sensor
Wireless & Bluetooth® sensors
The major wireless communication used in this type of sensor is Bluetooth® but there are also options based on 3G, 4G and LPWA network communications.
The Bluetooth®-enabled sensor, which is the most commonly offered wireless type sensor, allows data to be transferred to the central terminal for processing on a regular basis. For 3G, 4G and LPWA-enabled sensors, data is sent to the cloud for processing.
Many of the wireless type sensors incorporate button or coin cell batteries that allow sensors to acquire data as long as the battery keeps feeding power. The wireless communication function included in these sensors enables you to send the acquired data to other devices.

2JCIE-BL Environment Sensor, etc.

D6T MEMS Thermal Sensors,HVC-P2 (B5T)
Embedded sensor modules
Embedded type sensor is installed inside a single board computer or a power drive case.
A sensor module is placed on the printed circuit board so at the very least, all you need is a power supply circuit.
This type of sensor is integrated into robots and single-board computers to monitor the operating condition.

D6T MEMS Thermal Sensors

HVC-P2 (B5T), etc.

3.Types of IoT Sensors in Daily Products & Services
In today’s world, IoT sensors are extensively used in various fields.
Here are successful examples of IoT sensor applications.

Examples of IoT sensor applications
Home security service
Home security service
Security services offer us the possibility to monitor our home from anywhere.

All you need is a dedicated security device set up in your home and a security app downloaded to your smartphone to allow you to view your house and remotely control your home electronics and appliances. Such a service can help keep you monitor your elderly parents. Or, you can remotely monitor your children at home while you are away..

In the home security field, a wide variety of sensors are used with wireless camera networks such as detecting doors and windows open/close status, warning you if you left a window or a door open, monitoring and measuring room temperature, humidity and light intensity, and detecting motion when a person or an animal is in the room.

Online support service for business office
Services for office solutions include a real-time monitoring of the operation status of office electronics such as photocopiers, laser printers and multifunction peripherals over the internet.

By connecting equipment information such as toner levels and parts replacement cycle to dealers or customer service offices, the sensor can detect equipment failure or toner running out before users notice on their own.

This way, distributors can provide the right after-sales service at the right time, ultimately helping users save cost and the manufacturer to improve maintenance efficiency altogether.

Recent multifunction peripherals are installed with sensors that detect human motion, so when a person approaches a machine, it allows the machine to automatically turn on.

Wearable devices
Wearable devices monitor human posture, measure calorie burn and vital signs such as heart rate, just by wearing it on your body.

Data can be collected from sensors embedded in clothing or wearable devices attached to the body. Then, data is transmitted to the cloud via internet where it is accumulated and analyzed, enabling users to check their health conditions anytime.

Wearable devices are particularly playing a significant role in the healthcare industry, construction/building and logistics/transportation industries. In the healthcare sector, wearable devices can help monitor the health condition of, for example, patients with chronic illness and elderly people.

In the construction/building and logistics/transportation industries, wearables help improve the safety of workers, such as for heatstroke prevention while working outside under the sun and sleep monitoring to alert drivers.

Remote monitoring service for elderly people
Remote monitoring service for elderly people
Dementia is one of the biggest challenges facing society today. Older people with dementia may wander off, in some cases far away from home, and may get lose and unable to return back. getting lost and unable to return back. The number of people with dementia who were reported missing in Japan continues to rise year by year, reaching more than 15,000 in 2016 according to the 2017 report by the Japanese police force.

Monitoring is essential to keep people with dementia safe from wandering but looking after a person with dementia 24/7 on your own or hiring a caretaker can have a considerable stress on the person taking care of the patient. This is where sensors come into play for wandering protective devices.

Placing human detecting sensor near entrances/exits of your home
Attaching a GPS tracking device to the patient
Placing a tracking device to send an alarm when the patient wanders away from the premises
The sensors set near entrances/exits of homes such as the front entrance and windows can help detect when the person in care tries to leave the house without supervision. Such products may be useful more for families taking care of older adults with dementia at home.
A GPS tracking device is a wearable IoT device to track the location of the person in care from smart phones.
A tracking device sends an alert if the person in care leaves a certain distance.

Sensors are embedded into everyday products like a watch or a shoe. These products are not only a solution to keep people with dementia safe from wandering but also for children from getting lost.

Women’s healthcare service
From the women’s healthcare perspective, sensors provide services such as ovulation and menstrual cycle prediction based on the collected body temperature data or detect abnormalities in the body and alert the user.

There are also services where you can send your daily body temperature readings from a digital basal thermometer to your smartphone simply by placing your phone over the thermometer. Most of these types of services can work with weight data from a scale and visualize how your body composition is changing over time.

There are many types of sensors used in digital thermometers but thermistors have been mostly used among them.

Hazard detection device
Hazard detection device
The level of damage from an earthquake depends on the construction of a building and the ground condition even if the buildings and houses are in the same region or have the same housing type. Generally, the damage degree of houses caused by an earthquake is larger for wooden houses compared to steel structure houses, and for old houses compared to new builds.

Structural damage is evident when a building collapse occurs but depending on the damage degree, it may not look obvious just by a glance. In some cases, while the building may remain intact, structural damage may be hidden and the building could become vulnerable to seismic damage. Post-earthquake building inspection is conducted by construction experts who determine the degree of damage, but it can be time consuming especially when the damage area is wider.

Such inspection to determine the degree of damage can be done using a hazard detection device. Most hazard detection devices measure and display the intense levels of shaking and damage to buildings and alert residents. By quickly detecting the damage level of the structure, hazard detection devices can guide you to decide whether to stay in your home or to evacuate to a shelter.

4.Summary
Sensors are clearly deeply rooted in our everyday life and business situations. They will be extensively utilized in various fields to respond to social needs in the future.
Particularly, with a feature that allows monitoring without human intervention, sensors will make an important contribution to work-style reforms.It might be worthwhile to consider integrating various types of sensors for your IoT business.

Omron has released its open-platform sensor evaluation board (Type: 2JCIE-EV) which enables easy sensor performance evaluation.

 

Please utilize the below "Contact Us Form" if you have any questions or comments regarding this IoT article.

 

OMRON’s Sensors

OMRON Sensors lineup

 

Contact us
Contact us from here
 

FAQ

TOP
Twitter
LinkedIn
YouTube
Footer Link
OMRON Global
Terms of Use
Privacy Policy
CA Privacy Policy
Cookie Policy
Do Not Sell My Personal Information
Terms and Conditions of Sales
© Copyright OMRON Corporation 2022 All Rights Reserved.
